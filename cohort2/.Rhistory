)
}
# test
getRoundValuesNumeric("1e-10")
getRoundValuesCharacter <- function(characterValue){
#
value <- characterValue
if(is(value, "numeric")){
roundValue1 <- round(value)
roundValue2 <- round(value, digits = 1)
roundValue3 <- round(value, digits = 10)
roundValue4 <- format(value, scientific = T)
roundValue5 <- format(value, scientific = T, digits = 1)
roundValue6 <- format(value, scientific = T, digits = 10)
roundValue7 <- format(value, scientific = F)
roundValue8 <- format(value, scientific = F, digits = 1)
roundValue9 <- format(value, scientific = F, digits = 10)
} else{
value <- as.numeric(value)
roundValue1 <- round(value)
roundValue2 <- round(value, digits = 1)
roundValue3 <- round(value, digits = 10)
roundValue4 <- format(value, scientific = T)
roundValue5 <- format(value, scientific = T, digits = 1)
roundValue6 <- format(value, scientific = T, digits = 10)
roundValue7 <- format(value, scientific = F)
roundValue8 <- format(value, scientific = F, digits = 1)
roundValue9 <- format(value, scientific = F, digits = 10)
}
returnList <- list(
roundValue1,
roundValue2,
roundValue3,
roundValue4,
roundValue5,
roundValue6,
roundValue7,
roundValue8,
roundValue9
)
return(
returnList
)
}
# test
getRoundValuesCharacter("1e-10")
getRoundValuesNumeric(0.2-1e-10)
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
dfLute1 <- df.k2
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/02_crossvalidate_script.RData")
dfLute2 <- df.k2
head(dfLute1)
knitr::opts_chunk$set(echo = TRUE)
# load data from supplement
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
dfLute1 <- df.k2
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/02_crossvalidate_script.RData")
dfLute2 <- df.k2
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
head(dfLute)
# load data from benchmark
benchS1 <- read.csv("./BIOARXIV_BENCHMARK/TABLE_S1.csv")
benchS3 <- read.csv("./BIOARXIV_BENCHMARK/TABLE_S3.csv")
head(benchS1)
colnames(benchS1)
head(benchS3)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(benchS3$Sample))
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
head(dfLute)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(dfLute$sample.id))
dfLute$sample.id
head(dfLute)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
head(benchS1)
# num blocks bench
length(unique(benchS1$Sample))
length(unique(benchS3$Sample))
# num blocks lute
length(unique(dfLute$sample.id))
head(benchS1)
head(benchS3)
head(dfLute)
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(dfLute$bulk.sample.id))
dfLute$bulk.sample.id
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1", "", dfLute$bulk.sample.id)))
gsub("1", "", dfLute$bulk.sample.id)
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1", "", dfLute$bulk.sample.id)))
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1$", "", dfLute$bulk.sample.id)))
colnames(benchS1)
head(benchS1[,c(1:5)])
head(benchS1[,c(1:10)])
# summaries by condition, bench
table(benchS1$library_combo) |> as.data.frame()
do.call(rbind, lapply(uniqueCombo, function(ci){
numDonor <- length(
unique(
benchS1[benchS1$library_combo==ci,]$BrNum
)
)
c(numDonor, ci)
}))
uniqueDonorsVector <- unique(benchS1$BrNum)
uniqueCombo <- unique(benchS1$library_combo)
dfDonorCondSummary <- do.call(rbind, lapply(uniqueCombo, function(ci){
numDonor <- length(
unique(
benchS1[benchS1$library_combo==ci,]$BrNum
)
)
c(numDonor, ci)
}))
dfDonorCondSummary
head(dfLute)
# sample summaries by condition, bench
table(dfLute$bulk.sample.condition) |> as.data.frame()
# donor summaries by condition, bench
# sample summaries by condition, bench
table(dfLute[!duplicated(gsub("1", "", rownames(dfLute))),]$bulk.sample.condition) |> as.data.frame()
# donor summaries by condition, bench
!duplicated(gsub("1", "", rownames(dfLute)))
table(!duplicated(gsub("1", "", rownames(dfLute))))
dfLute[!duplicated(gsub("1", "", rownames(dfLute))),]$bulk.sample.condition |>
table() |> as.data.frame()
head(dfLute)
head(df.k2)
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
table(dfLute$s.set.values)
table(dfLute$s.set.label)
table(dfLute$experiment.type)
table(dfLute$bulk.scale.type)
head(dfLute)
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="rpkm.counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
filterLute
table(filterLute)
table(dfLute$bulk.scale.type)
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
table(filterLute)
dim(dfLute)
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dim(dfLute)
table(dfLute$bulk.sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg)
table(dfLute$bulk.sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
# summary lute conditions, block
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# summary lute conditions, donor
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
length(unique(gsub("_.*", "", dfLute$sample.id)))
unique(gsub("_.*", "", dfLute$sample.id))
length(unique(gsub("_.*", "", dfLute$sample.id)))
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
# summary lute conditions, block
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# summary lute conditions, donor
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
# num blocks bench
length(unique(benchS1$Sample))
length(unique(benchS3$Sample))
# num blocks lute
length(unique(dfLute$sample.id))
unique(dfLute$sample.id)
head(dflute)
head(dfLute)
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$SAMPLE_ID))
benchS3$SAMPLE_ID
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# blocks overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, lute
length(intersect(gsub("_", "", dfLute$sample.id), gsub("_", "", benchS3$Sample)))
length(intersect(unique(gsub("_", "", dfLute$sample.id)), unique(gsub("_", "", benchS3$Sample))))
gsub("_", "", dfLute$sample.id)
length(intersect(gsub("_.*", "", dfLute$sample.id), gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(gsub("_.*", "", dfLute$sample.id)), unique(gsub("_.*", "", benchS3$Sample))))
# blocks overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, lute
length(intersect(gsub("_.*", "", dfLute$sample.id), gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(gsub("_.*", "", dfLute$sample.id)), unique(gsub("_.*", "", benchS3$Sample))))
head(benchS1$SAMPLE_ID)
benchS1$BrNum
benchS1$Sample
benchS1$BrNum
# blocks overlap, bulk, sn, rn, bench
length(intersect(benchS1$Sample, benchS3$Sample))
length(intersect(unique(benchS1$Sample), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, bench
length(intersect(benchS1$BrNum, gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(benchS1$BrNum), unique(gsub("_.*", "", benchS3$Sample))))
load("~/GitHub/deconvo_method-paper/cohort1/outputs/00_preprocess/list-scef_markers-k2-k3-k4_ro1-dlpfc.rda")
names(lscef)
sce <- lscef[[1]]
dim(cse)
dim(sce)
colnames(colData(sce))
library(lute)
referenceFromSingleCellExperiment(sce)
?referenceFromSingleCellExperiment
referenceFromSingleCellExperiment(sce, cellTypeVariable = "k2")
ref <- referenceFromSingleCellExperiment(sce, cellTypeVariable = "k2")
load("~/GitHub/deconvo_method-paper/cohort1/outputs/00_preprocess/list-scef_markers-k2-k3-k4_ro1-dlpfc.rda")
ref <- referenceFromSingleCellExperiment(sce, cellTypeVariable = "k2")
head(rowData(ref))
rowData(ref)
head(ref)
filterNeuron <- ref[,2] > ref[,1]
refNeuron <- ref[filterNeuron,]
median(refNeuron)
filterGlial <- ref[,1] > ref[,2]
refGlial <- ref[filterGlial,]
median(refGlial)
filterNeuron <- ref[,whichRefGlial] > ref[,whichRefNeuron]
whichRefGlial <- 1
whichRefNeuron <- 2
filterNeuron <- ref[,whichRefGlial] > ref[,whichRefNeuron]
refNeuron <- ref[filterNeuron,whichRefNeuron]
median(refNeuron)
filterGlial <- ref[,whichRefGlial] > ref[,whichRefNeuron]
refGlial <- ref[filterGlial,whichRefGlial]
median(refGlial)
refBg <- c(ref[filterNeuron,whichRefGlial],
ref[filterGlial,whichRefNeuron])
summary(bg)
refBg <- c(ref[filterNeuron,whichRefGlial],
ref[filterGlial,whichRefNeuron])
summary(refBg)
whichRefGlial <- 1
whichRefNeuron <- 2
filterNeuron <- ref[,whichRefGlial] < ref[,whichRefNeuron]
refNeuron <- ref[filterNeuron,whichRefNeuron]
median(refNeuron)
filterGlial <- ref[,whichRefGlial] > ref[,whichRefNeuron]
refGlial <- ref[filterGlial,whichRefGlial]
median(refGlial)
refBg <- c(ref[filterNeuron,whichRefGlial],
ref[filterGlial,whichRefNeuron])
median(refBg)
median(refNeuron)/median(refBg)
median(refGlial)/median(refBg)
8/4
ratio(median(ref[,1]))
median(ref[,1])
median(ref[,1]/median(ref[,2]))
median(ref[,1])/median(ref[,2]))
median(ref[,1])/median(ref[,2])
median(ref[,2])/median(ref[,1])
df <- as.data.frame(csf.table)
library(ExperimentHub)
eh = ExperimentHub()
query(eh, c("cellScaleFactors"))
data(csf.table)
data(csf_table)
csf_table
object[["EH8419"]]
query(eh, c("cellScaleFactors"))
query(eh, object[["EH8419"]])
query(eh, c("cellScaleFactors"))[["EH8419"]]
csf <- query(ExperimentHub(), c("cellScaleFactors"))[["EH8419"]]
csf
csf
csf[["EH8419"]]
csf
csf_table
query(ExperimentHub(), c("cellScaleFactors"))[["EH8419"]]
rh
eh
EH8419
class(csfData)
csfData <- query(eh, c("cellScaleFactors"))
path <- csfData[["EH8419"]]
csfData <- get(load(path))
csfData
class(csfData)
head(csfData)
df
df[grepl("Codeluppi.*", df$citation.s.),]
csfData <- path |> load() |> get() |> as.data.frame()
df <- csfData[grepl("Codeluppi.*", csfData$citation.s.),]
df
df1 <- df[df$scale.factor.type=="cell area",]
df1[df1$cell_type=="neuron",]$scale.factor.value/
df1[df1$cell_type=="glial",]$scale.factor.value
df1 <- df[df$scale.factor.type=="nuclear mRNA",]
df1[df1$cell_type=="neuron",]$scale.factor.value/
df1[df1$cell_type=="glial",]$scale.factor.value # 1.351648
#----------------
# k2 markers data
#----------------
ref <- referenceFromSingleCellExperiment(sce, cellTypeVariable = "k2")
whichRefGlial <- 1
whichRefNeuron <- 2
filterNeuron <- ref[,whichRefGlial] < ref[,whichRefNeuron]
refNeuron <- ref[filterNeuron,whichRefNeuron]
median(refNeuron)
filterGlial <- ref[,whichRefGlial] > ref[,whichRefNeuron]
refGlial <- ref[filterGlial,whichRefGlial]
median(refGlial)
refBg <- c(ref[filterNeuron,whichRefGlial],
ref[filterGlial,whichRefNeuron])
median(refBg)
median(refNeuron)/median(refBg)
median(refGlial)/median(refBg)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort2")
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k3_mrb_script.RData")
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dfp.ct
head(dfp.ct)
dfp1 <- data.frame(
known = dfp.tall$Excit.true,
pred = dfp.tall$Excit.pred,
type = dfp.tall$type,
celltype = rep('Excit', nrow(dfp.tall))
)
dfp2 <- data.frame(
known = dfp.tall$Inhib.true,
pred = dfp.tall$Inhib.pred,
type = dfp.tall$type,
celltype = rep('Inhib', nrow(dfp.tall))
)
dfp3 <- data.frame(
known = dfp.tall$glial.true,
pred = dfp.tall$glial.pred,
type = dfp.tall$type,
celltype = rep('glial', nrow(dfp.tall))
)
dfp <- rbind(dfp1, rbind(dfp2, dfp3)) |> as.data.frame()
dfp$celltype <-
factor(dfp$celltype, levels = c("Excit", "Inhib", "glial"))
newScatterGrid <- ggplot(dfp, aes(x = known, y = pred)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) +
facet_grid(celltype~type) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0,1) + ylim(0,1) + ggtitle("Huuki-Meyers et. al. 2023")
newScatterGrid
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(~celltype) + theme_bw() + ylab("Error")
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(~celltype) + theme_bw() + ylab("Error")
newBoxGrid
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(~celltype) + theme_bw() + ylab("Error") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
newBoxGrid
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(celltype~) + theme_bw() + ylab("Error") +
?facet_grid
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(cols = 1, ~celltype) + theme_bw() + ylab("Error") +
theme(axis.text.x = element_text(angle = 45, hjust=1),
axis.title.x = element_blank())
dfp$error <- abs(dfp$known-dfp$pred)
newBoxGrid <- ggplot(dfp, aes(x = type, y = error)) +
geom_jitter(alpha = 0.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
facet_grid(~celltype) + theme_bw() + ylab("Error") +
theme(axis.text.x = element_text(angle = 45, hjust=1),
axis.title.x = element_blank())
newBoxGrid
