sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
}
}))
rownames(dfp) <- unique.sample.id.vector
return(dfp)
}
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce.k2
sce.deconvo <- sce.k2[,sce.k2$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zpb(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce.k2
sce.deconvo <- sce.k2[,sce.k2$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zpb(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp <- do.call(rbind, lapply(unique.sample.id.vector, function(sample.id){
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
}))
unique.sample.id.vector <- unique(sce.foriter[[sample.id.variable]])
dfp <- do.call(rbind, lapply(unique.sample.id.vector, function(sample.id){
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
}))
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
dim(sce.iter)
assay.name
names(assays(sce.iter))
if(assay.name == "logcounts" & !"logcounts" %in% names(assays(sce.deconvo))){sce.deconvo <- scuttle::logNormCounts(sce.deconvo)}
if(assay.name == "logcounts" & !"logcounts" %in% names(assays(sce.foriter))){sce.foriter <- scuttle::logNormCounts(sce.foriter)}
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
unique.sample.id.vector <- unique(sce.foriter[[sample.id.variable]])
dfp <- do.call(rbind, lapply(unique.sample.id.vector, function(sample.id){
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
}))
get_ypb_experiment_results_shuffle_zpb <- function(sce.foriter, sce.deconvo, sample.id.variable = "Sample",
celltype.variable = "k2", assay.name = "logcounts",
s.vector.ypb = c("glial" = 3, "neuron" = 10),
s.vector.pred = c("glial" = 1, "neuron" = 1),
deconvolution.algorithm = "nnls", system.sleep.sec = 2){
#
# use z pseudobulk shuffling
#
# sce.foriter : sce on which to base pseudobulk iterations. iterates on sample id groups where specified.
# sce.deconvo : sce to use across all deconvolution experiments (not used in pseudobulks directly)
#
s.vector.ypb <- order_svector(s.vector.ypb)
s.vector.pred <- order_svector(s.vector.pred)
# get results for a single iteration of an experiment
# use with get_ypb_experiment_series()
if(assay.name == "logcounts" & !"logcounts" %in% names(assays(sce.deconvo))){sce.deconvo <- scuttle::logNormCounts(sce.deconvo)}
if(assay.name == "logcounts" & !"logcounts" %in% names(assays(sce.foriter))){sce.foriter <- scuttle::logNormCounts(sce.foriter)}
unique.sample.id.vector <- unique(sce.foriter[[sample.id.variable]])
dfp <- do.call(rbind, lapply(unique.sample.id.vector, function(sample.id){
message(sample.id)
sce.iter <- sce.foriter[,sce.foriter[[sample.id.variable]]==sample.id]
ypb.iter <- ypb_from_sce(sce = sce.iter, assay.name = assay.name,
celltype.variable = celltype.variable,
sample.id.variable = sample.id.variable,
S = s.vector.ypb) %>% as.matrix()
prop.true.iter <- table(sce.iter[[celltype.variable]]) %>% prop.table() %>% as.matrix() %>% t()
prop.pred.iter <- lute(sce = sce.deconvo, y = ypb.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table
colnames(prop.pred.iter) <- paste0(colnames(prop.pred.iter), ".pred")
colnames(prop.true.iter) <- paste0(colnames(prop.true.iter), ".true")
dfp.iter <- cbind(prop.true.iter, prop.pred.iter) %>% as.data.frame()
Sys.sleep(system.sleep.sec)
dfp.iter
}))
rownames(dfp) <- unique.sample.id.vector
return(dfp)
}
get_ypb_experiment_series_shuffle_zpb <- function(sce.foriter, sce.deconvo, sample.id.variable = "Sample",
celltype.variable = "k2", assay.name = "logcounts",
s.vector = c("glial" = 3, "neuron" = 10),
algorithm.name = "nnls", return.dimensions = c("wide", "tall"),
dfp.tall.errors = TRUE, system.sleep.sec = 2,
deconvolution.algorithm = "nnls"){
#
# shuffles the z pseudobulk, using the same reference for deconvolution runs.
#
# sce.foriter : sce containing sample groups for pb iterations.
# sce.deconvo : the main sce object to use for all deconvolutions as the Z reference.
#
#
s.vector <- order_svector(s.vector)
# get pseudobulk experiment series, testing cellsize adjustment
# use with dfp_tall_by_celltype()
# get experiment results
if(!sample.id.variable %in% colnames(colData(sce))){stop("Error: couldn't find sample.id.variable in sce coldata.")}
celltype.variable.format <- sce[[celltype.variable]] %>% as.factor()
unique.celltypes <- unique(celltype.variable.format)
num.celltypes <- length(unique(celltype.variable.format))
s.vector.null <- rep(1, num.celltypes); names(s.vector.null) <- unique.celltypes
s.vector.null <- s.vector.null[order(match(names(s.vector.null), names(s.vector)))]
# get experiment proportions
# sce.iter <- sce[,sce[[sample.id.variable]]==sample.id.iter]
dfp.noscale <- get_ypb_experiment_results_shuffle_zpb(sce.foriter, sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector.ypb = s.vector,
s.vector.pred = s.vector.null,
system.sleep.sec = system.sleep.sec,
deconvolution.algorithm = deconvolution.algorithm)
dfp.withscale <- get_ypb_experiment_results_shuffle_zpb(sce.foriter, sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector.ypb = s.vector,
s.vector.pred = s.vector,
system.sleep.sec = system.sleep.sec,
deconvolution.algorithm = deconvolution.algorithm)
if(return.dimensions == "tall"){
# get plot data -- tall
dfp.noscale$type <- 'noscale'
dfp.withscale$type <- 'withscale'
dfp.noscale$sample.id <- rownames(dfp.noscale)
dfp.withscale$sample.id <- rownames(dfp.withscale)
dfp <- rbind(dfp.noscale, dfp.withscale)
if(dfp.tall.errors){dfp <- dfp_tall_append_errors(dfp)}
} else{
# get plot data -- wide
colnames(dfp.noscale) <- paste0(colnames(dfp.noscale), ".noscale")
colnames(dfp.withscale) <- paste0(colnames(dfp.withscale), ".withscale")
identical(rownames(dfp.noscale), rownames(dfp.withscale))
dfp <- cbind(dfp.noscale, dfp.withscale)
}
return(dfp)
}
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce.k2
sce.deconvo <- sce.k2[,sce.k2$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zpb(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$z.deconvo.sample.id <- zpb.sample.id
dfp.tall$matched.z <- dfp.tall$sample.id == dfp.tall$z.deconvo.sample.id
ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.szy)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("S scale id: ", s.scale.sample.id))
head(dfp.tall)
ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.z)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("S scale id: ", zpb.sample.id))
ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.z)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("Z deconvo id: ", zpb.sample.id))
setwd("..")
setwd("..")
env.name <- "00_check-rnascope-pseudobulk_cohort1.RData"
env.path <- file.path("notebooks", "13_pseudobulk_shuffle-experiment_dlpfc-cohort1", env.name)
if(file.exists(env.path)){
knitr::opts_chunk$set(echo = F, eval = F, include = F)
load(file = env.path)
} else{
knitr::opts_chunk$set(echo = T)
}
#
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
#
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_final.rda" # "mae_with-rpkm_additional-data_final.rda"
mae.path <- file.path( # "deconvo_method-paper",
"outputs", "01_prepare-datasets", mae.filename)
list.files()
mae <- get(load(mae.path))
folder.name <- "13_pseudobulk_shuffle-experiment_dlpfc-cohort1"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("outputs", "01_prepare-datasets", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
#
setwd("..")
source("deconvo_method-paper/code/13_pseudobulk_shuffle-experiment_dlpfc-cohort1/00_parameters-pseudobulk.R")
#
zpb.sample.id <- "Br3942_mid"
new.plot.filename <- "fig3_shuffle-zdeconvo_high-proportion_cohort1.jpg"
jpeg(new.plot.filename, width = 5, height = 3, units = "in", res = 400)
ggplot(dfp.tall.high, aes(x = neuron.true, y = neuron.pred, shape = matched.id)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) + theme_bw() +
ggtitle(paste0("Z deconvo id: ", sample.id.iter)) + xlim(0.2, 1) + ylim(0.2, 1)
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce.k2
dim(sce)
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce
sce.deconvo <- sce[,sce$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zdeconvo(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
setwd("..")
setwd("..")
env.name <- "00_check-rnascope-pseudobulk_cohort1.RData"
env.path <- file.path("notebooks", "13_pseudobulk_shuffle-experiment_dlpfc-cohort1", env.name)
if(file.exists(env.path)){
knitr::opts_chunk$set(echo = F, eval = F, include = F)
load(file = env.path)
} else{
knitr::opts_chunk$set(echo = T)
}
#
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
#
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_final.rda" # "mae_with-rpkm_additional-data_final.rda"
mae.path <- file.path( # "deconvo_method-paper",
"outputs", "01_prepare-datasets", mae.filename)
list.files()
mae <- get(load(mae.path))
folder.name <- "13_pseudobulk_shuffle-experiment_dlpfc-cohort1"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("outputs", "01_prepare-datasets", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
#
setwd("..")
source("deconvo_method-paper/code/13_pseudobulk_shuffle-experiment_dlpfc-cohort1/00_parameters-pseudobulk.R")
#
sample.id.variable <- "Sample"
assay.name <- "logcounts"
celltype.variable <- "k2"
algorithm.name <- "nnls"
return.dimensions <- "tall"
index <- 2
sample.id.vector <- unique(sce[[sample.id.variable]])
sample.id.iter <- sample.id.vector[index]
s.data.frame <- dfs.rn
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce
sce.deconvo <- sce[,sce$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zdeconvo(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
setwd("..")
setwd("..")
env.name <- "00_check-rnascope-pseudobulk_cohort1.RData"
env.path <- file.path("notebooks", "13_pseudobulk_shuffle-experiment_dlpfc-cohort1", env.name)
if(file.exists(env.path)){
knitr::opts_chunk$set(echo = F, eval = F, include = F)
load(file = env.path)
} else{
knitr::opts_chunk$set(echo = T)
}
#
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
#
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_final.rda" # "mae_with-rpkm_additional-data_final.rda"
mae.path <- file.path( # "deconvo_method-paper",
"outputs", "01_prepare-datasets", mae.filename)
list.files()
mae <- get(load(mae.path))
folder.name <- "13_pseudobulk_shuffle-experiment_dlpfc-cohort1"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("outputs", "01_prepare-datasets", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
#
setwd("..")
source("deconvo_method-paper/code/13_pseudobulk_shuffle-experiment_dlpfc-cohort1/00_parameters-pseudobulk.R")
#
sce.k2 <- sce
sample.id.variable <- "Sample"
assay.name <- "logcounts"
celltype.variable <- "k2"
algorithm.name <- "nnls"
return.dimensions <- "tall"
index <- 2
sample.id.vector <- unique(sce.k2[[sample.id.variable]])
sample.id.iter <- sample.id.vector[index]
s.data.frame <- dfs.rn
zpb.sample.id <- "Br3942_mid"
sce.foriter <- sce.k2
sce.deconvo <- sce.k2[,sce.k2$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zpb(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$z.deconvo.sample.id <- zpb.sample.id
dfp.tall$matched.z <- dfp.tall$sample.id == dfp.tall$z.deconvo.sample.id
dfp.tall.high <- dfp.tall
setwd("..")
setwd("..")
env.name <- "00_fig3ef_zpb_shuffle-pseudobulk_cohort1.RData"
env.path <- file.path("notebooks", "13_pseudobulk_shuffle-experiment_dlpfc-cohort1", env.name)
if(file.exists(env.path)){
knitr::opts_chunk$set(echo = F, eval = F, include = F)
load(file = env.path)
} else{
knitr::opts_chunk$set(echo = T)
}
#
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
#
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_final.rda" # "mae_with-rpkm_additional-data_final.rda"
mae.path <- file.path( # "deconvo_method-paper",
"outputs", "01_prepare-datasets", mae.filename)
list.files()
mae <- get(load(mae.path))
folder.name <- "13_pseudobulk_shuffle-experiment_dlpfc-cohort1"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("outputs", "01_prepare-datasets", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
#
setwd("..")
source("deconvo_method-paper/code/13_pseudobulk_shuffle-experiment_dlpfc-cohort1/00_parameters-pseudobulk.R")
#
ggplot(dfp.tall.high, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.z)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("Z pseudobulk id: ", zpb.sample.id))
new.plot.filename <- "fig3_shuffle-zpb_high-proportion_cohort1.jpg"
jpeg(new.plot.filename, width = 5, height = 3, units = "in", res = 400)
ggplot(dfp.tall.high, aes(x = neuron.true, y = neuron.pred, shape = matched.z)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) + theme_bw() +
ggtitle(paste0("Z pseudobulk id: ", zpb.sample.id)) + xlim(0.2, 1) + ylim(0.2, 1)
dev.off()
zpb.sample.id <- "Br2743_ant"
sce.foriter <- sce.k2
sce.deconvo <- sce.k2[,sce.k2$Sample==zpb.sample.id]
dfp.tall <- get_ypb_experiment_series_shuffle_zpb(sce.foriter,
sce.deconvo,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$z.deconvo.sample.id <- zpb.sample.id
dfp.tall$matched.z <- dfp.tall$sample.id == dfp.tall$z.deconvo.sample.id
dfp.tall.low <- dfp.tall
ggplot(dfp.tall.low, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.z)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("Z deconvo id: ", zpb.sample.id))
new.plot.filename <- "fig3_shuffle-zpb_low-proportion_cohort1.jpg"
jpeg(new.plot.filename, width = 5, height = 3, units = "in", res = 400)
ggplot(dfp.tall.low, aes(x = neuron.true, y = neuron.pred, shape = matched.z)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) + theme_bw() +
ggtitle(paste0("Z pseudobulk id: ", zpb.sample.id)) + xlim(0.2, 1) + ylim(0.2, 1)
dev.off()
