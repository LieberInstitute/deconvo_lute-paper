geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC (beta/acinar)', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot
library(scRNAseq)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(scran)
dataOriginal <- BaronPancreasData('human')
# preprocess SingleCellExperiment
data <- logNormCounts(dataOriginal)
# filter high mitochondrial expression data
data <- filterCells(data, percent.mito = 0.05)
library(BiocManager)
libv <- c(
"SummarizedExperiment",
"ExperimentSubset",
"SummarizedBenchmark",
"MultiAssayExperiment",
"SingleCellExperiment",
"SpatialExperiment",
"MultiModalExperiment"
)
sapply(libv, function(libStr){BiocManager::install(libStr)})
BiocManager::install("MultimodalExperiment")
library(MultimodalExperiment)
library(lute)
?ypb_from_sce
ypb_from_sce
citation("sva")
citation("scuttle")
citation(MuSiC)
library(MuSiC)
citation(MuSiC)
citation("MuSiC")
citation(BisqueRNA)
library(BisqueRNA)
citation(BisqueRNA)
citation("BisqueRNA")
getMultiGroupExampleDataRMSE <- function(conditions = c("cond1", "cond2")){
do.call(rbind, lapply(conditions, function(conditionLevel){
exampleDataCondition <- data.frame(
sample.id = c("sample1", "sample2", "sample3"),
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true"),
)
exampleDataCondition$condition <- conditionLevel
})) |> as.data.frame()
}
getMultiGroupExampleDataRMSE
getMultiGroupExampleDataRMSE()
getMultiGroupExampleDataRMSE <- function(conditions = c("cond1", "cond2")){
do.call(rbind, lapply(conditions, function(conditionLevel){
exampleDataCondition <- data.frame(
sample.id = c("sample1", "sample2", "sample3"),
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
exampleDataCondition$condition <- conditionLevel
})) |> as.data.frame()
}
getMultiGroupExampleDataRMSE()
samplesVector <- c("sample1", "sample2", "sample3")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
levelsVector
levelsVector = c("true", "false")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
proportions = cellTypeVector
)
})) |> as.data.frame()
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
exampleDataLevels
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
exampleDataLevels
sepSymbol <- "_"
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
})) |> as.data.frame()
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- NA
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- 0
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
exampleDataSamples
}
}
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
nullValueProportions <- 0
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
exampleDataSamples
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
}
do.call(cbind, lapply(levelsVector, function(level){
do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
}))
do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
exampleDataSamples$sample.id <- samplesVector
exampleDataSamples
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, "Proportions", levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
do.call(rbind, lapply(1:nrow(exampleDataSamples), function(rowIndex){
exampleDataSamples[rowIndex, "sample.id"] <- paste0(
exampleDataSamples[rowIndex, "sample.id"], levelsSepSymbol, conditionLevel)
exampleDataSamples[rowIndex,]
})) |> as.data.frame()
do.call(rbind, lapply(1:nrow(exampleDataSamples), function(rowIndex){
exampleDataSamples[rowIndex, "sample.id"] <- paste0(
exampleDataSamples[rowIndex, "sample.id"], levelsSepSymbol, conditionLevel)
exampleDataSamples[rowIndex,]
})) |> as.data.frame()
exampleDataSamples
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10, echo = F)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp$bulk.sample.id <- gsub("c1", "c", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("k1", "k", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("o1", "o", dfp$bulk.sample.id)
# experiment conditions
dfp$bulk.sample.condition <- cd[dfp$bulk.sample.id,]$expt_condition
table(dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
facet_grid(s.set.label~experiment.type) + xlab("Known") +
ylab("Predicted") + xlim(0, 1) + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.scatter
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
# Filter results to within-reference condition only
dfp <- df.k2[df.k2$experiment.type=="shared.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
# combine all samples
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)") + xlab("Preparation type")
new.plot.jitter.prep
head(dfp)
View(dfp)
source("./software/src/rmse.R")
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = dfp$true.glial,
neuron_known = dfp$true.neuron,
sample.id = dfp$preparation.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$bulk.scale.type
)
rmseNew <- applyRmse(propRMSE, cellTypeVector = c("glial", "neuron"))
setwd("..")
setwd("..")
setwd("..")
# RMSE
source("./software/src/rmse.R")
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = dfp$true.glial,
neuron_known = dfp$true.neuron,
sample.id = dfp$preparation.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$bulk.scale.type
)
rmseNew <- applyRmse(propRMSE, cellTypeVector = c("glial", "neuron"))
applyRmse
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("glial", "neuron"))
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("glial", "neuron"))
propRMSE
summary(propRMSE)
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = as.numeric(dfp$true.glial),
neuron_known = dfp$true.neuron,
sample.id = dfp$preparation.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$bulk.scale.type
)
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("glial", "neuron"))
summary(propRMSE)
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = as.numeric(dfp$true.glial),
neuron_known = dfp$true.neuron,
sample.id = dfp$preparation.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$crossvalidation
)
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("glial", "neuron"))
dfp$preparation.type
propRMSE
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("neuron", "glial"))
rmseNew
traceback()
applyRmse
rmseNew <- applyRmse(propRMSE, cellTypesVector = c("neuron", "glial"))
propRMSEall <- propRMSE
propRMSE <- propRMSEall[propRMSEall$sample.id=="polyA",]
errorVector <- propRMSE$glial_predicted-propRMSE$glial_known
errorVector <- c(errorVector, propRMSE$neuron_predicted-propRMSE$neuron_known)
errorSq <- errorVector^2
meanErr <- sum(errorSq)/length(errorSq)
rmsePolyA <- sqrt(meanErr)
rmsePolyA
propRMSE <- propRMSEall[propRMSEall$sample.id=="RiboZeroGold",]
errorVector <- propRMSE$glial_predicted-propRMSE$glial_known
errorVector <- c(errorVector, propRMSE$neuron_predicted-propRMSE$neuron_known)
errorSq <- errorVector^2
meanErr <- sum(errorSq)/length(errorSq)
rmseRZG <- sqrt(meanErr)
rmseRZG
# combined samples
dfp$cell_compartment <- gsub("_.*", "", dfp$bulk.sample.condition)
new.plot.jitter.compart <- ggplot(dfp, aes(x = cell_compartment, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (Neuron)") + xlab("Cell compartment")
new.plot.jitter.compart
gc()
gc()
knitr::opts_chunk$set(fig.width=10, fig.height=10, echo = F)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
# load env data
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_manual_script.RData")
# format plot data
dfp <- df.k2
# format variable states
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp$assay.name.lutearg <- paste0("rescale_type : ", dfp$assay.name.lutearg)
dfp$s.set.label <- paste0("s_set : ", dfp$s.set.label)
dfp$bulk.sample.id <- gsub("c1", "c", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("k1", "k", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("o1", "o", dfp$bulk.sample.id)
# experiment conditions
dfp$bulk.sample.condition <- cd[dfp$bulk.sample.id,]$expt_condition
table(dfp$bulk.sample.condition)
# filter na
dfp <- na.omit(dfp)
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "Type of cell type reference for deconvolution",
y.expression.scale = "Scale of the bulk sample data passed to lute",
s.pred.set.name = "Label of the S factor set",
s.pred.set.values = "S factor set values.",
cell.label.type = "Cell type identifier")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
# new plot
new.plot.scatter <-
ggplot(dfp, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_grid(experiment.type~assay.name.lutearg+s.set.label) +
xlab("Known") + ylab("Predicted") + xlim(0, 1) + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.scatter
new.plot.jitter.cond <- ggplot(dfp, aes(x = bulk.sample.condition,
y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)") + xlab("Preparation condition")
new.plot.jitter.cond
dfp
head(dfp)
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = as.numeric(dfp$true.glial),
neuron_known = dfp$true.neuron,
sample.id = dfp$preparation.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$crossvalidation
)
dfp
head(dfp)
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = as.numeric(dfp$true.glial),
neuron_known = dfp$true.neuron,
sample.id = dfp$experiment.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$experiment.type
)
table(propRMSE$sample.id)
propRMSE <- data.frame(
glial_predicted = dfp$glial,
neuron_predicted = dfp$neuron,
glial_known = as.numeric(dfp$true.glial),
neuron_known = dfp$true.neuron,
sample.id = dfp$experiment.type,
condition.id = dfp$bulk.scale.type,
replicate.id = dfp$experiment.type
)
# manual
propRMSEall <- propRMSE
propRMSE <- propRMSEall[propRMSEall$sample.id=="z_type : shared.reference",]
errorVector <- propRMSE$glial_predicted-propRMSE$glial_known
errorVector <- c(errorVector, propRMSE$neuron_predicted-propRMSE$neuron_known)
errorSq <- errorVector^2
meanErr <- sum(errorSq)/length(errorSq)
rmseShared <- sqrt(meanErr)
rmseShared
propRMSE <- propRMSEall[propRMSEall$sample.id=="z_type : within.reference",]
errorVector <- propRMSE$glial_predicted-propRMSE$glial_known
errorVector <- c(errorVector, propRMSE$neuron_predicted-propRMSE$neuron_known)
errorSq <- errorVector^2
meanErr <- sum(errorSq)/length(errorSq)
rmseWithin <- sqrt(meanErr)
rmseWithin
