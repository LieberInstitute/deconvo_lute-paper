data <- logcounts(data)
?logNormCounts
data <- logNormCounts(data)
volcanoPlot <- function(data, gene) {
data <- data |>
scran::findMarkers(assay = 'RNA',
ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
volcanoPlot <- function(data, gene) {
data <- data |>
scran::findMarkers(ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
?findMarkers
class(data)
colData(data)
head(colData(data))
data <- data |>
scran::findMarkers(
groups = colData(data)$label)
data
head(data)
class(data)
data <- data |>
filter(gene == gene)
data <- BaronPancreasData('human')
data <- logNormCounts(data)
markerList <- data |>
scran::findMarkers(
groups = colData(data)$label)
dfPlot <- counts(data)["ARID1A",]
dfPlot
class(dfPlot)
markerList <- data |>
scran::findMarkers(
groups = colData(data)$label)
top10 <- markerList |>
head(10)
top10
names(top10)
dim(top10[[1]])
markerList
top10 <- lapply(markerList, function(item){item[seq(10),]})
dim(top10[[1]])
top10[[1]]
top10 <- do.call(rbind, top10) |> as.data.frame()
dfPlot <- markerList[[1]]
head(dfPlot)
names(markerList)
names(markerList)
head(dfPlot)
dfPlot <- markerList[[1]]
dfPlot <- data.frame(
logFC = dfPlot$logFC.beta
)
dfPlot$cellType1 <- "beta"
dfPlot$cellType2 <- "acinar"
head(dfPlot)
head(markerList[[1]])
summary(markerList[[1]]$p.value)
dfPlot <- markerList[[1]]
dfPlot <- markerList[[1]]
dfPlot <- data.frame(
logFC = dfPlot$logFC.beta,
pvalue = dfPlot$p.value,
FDR = dfPlot$FDR
)
dfPlot$cellType1 <- "beta"
dfPlot$cellType2 <- "acinar"
head(dfPlot)
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot
# plot volcano plot
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC (beta/acinar)', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot
library(scRNAseq)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(scran)
dataOriginal <- BaronPancreasData('human')
# preprocess SingleCellExperiment
data <- logNormCounts(dataOriginal)
# filter high mitochondrial expression data
data <- filterCells(data, percent.mito = 0.05)
library(BiocManager)
libv <- c(
"SummarizedExperiment",
"ExperimentSubset",
"SummarizedBenchmark",
"MultiAssayExperiment",
"SingleCellExperiment",
"SpatialExperiment",
"MultiModalExperiment"
)
sapply(libv, function(libStr){BiocManager::install(libStr)})
BiocManager::install("MultimodalExperiment")
library(MultimodalExperiment)
library(lute)
?ypb_from_sce
ypb_from_sce
citation("sva")
citation("scuttle")
citation(MuSiC)
library(MuSiC)
citation(MuSiC)
citation("MuSiC")
citation(BisqueRNA)
library(BisqueRNA)
citation(BisqueRNA)
citation("BisqueRNA")
getMultiGroupExampleDataRMSE <- function(conditions = c("cond1", "cond2")){
do.call(rbind, lapply(conditions, function(conditionLevel){
exampleDataCondition <- data.frame(
sample.id = c("sample1", "sample2", "sample3"),
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true"),
)
exampleDataCondition$condition <- conditionLevel
})) |> as.data.frame()
}
getMultiGroupExampleDataRMSE
getMultiGroupExampleDataRMSE()
getMultiGroupExampleDataRMSE <- function(conditions = c("cond1", "cond2")){
do.call(rbind, lapply(conditions, function(conditionLevel){
exampleDataCondition <- data.frame(
sample.id = c("sample1", "sample2", "sample3"),
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
exampleDataCondition$condition <- conditionLevel
})) |> as.data.frame()
}
getMultiGroupExampleDataRMSE()
samplesVector <- c("sample1", "sample2", "sample3")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
levelsVector
levelsVector = c("true", "false")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
predictedProportions = c("celltype1.pred", "celltype2.pred", "celltype3.pred"),
trueProportions = c("celltype1.true", "celltype2.true", "celltype3.true")
)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
data.frame(
proportions = cellTypeVector
)
})) |> as.data.frame()
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
exampleDataLevels
colnames(exampleDataLevels) <- paste0(
rep(cellTypeVector, length(levelsVector)), levelsVector
)
exampleDataLevels
sepSymbol <- "_"
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
})) |> as.data.frame()
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- NA
exampleDataLevels
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- 0
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
exampleDataSamples
}
}
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
samplesVector <- c("sample1", "sample2", "sample3")
cellTypeVector <- c("celltype1", "celltype2", "celltype3")
levelsSepSymbol <- "_"
nullValueProportions <- 0
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
exampleDataSamples
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(paste0(cellTypeVector, levelsSepSymbol), length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
}
do.call(cbind, lapply(levelsVector, function(level){
do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
}))
do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
})) |> as.data.frame()
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
exampleDataSamples <- do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
exampleDataSamples$sample.id <- samplesVector
exampleDataSamples
do.call(rbind, lapply(samplesVector, function(sampleID){
exampleDataLevels <- do.call(cbind, lapply(levelsVector, function(level){
matrix(cellTypeVector, nrow = 1)
})) |> as.data.frame()
colnames(exampleDataLevels) <- paste0(
rep(
paste0(
cellTypeVector, "Proportions", levelsSepSymbol),
length(levelsVector)), levelsVector
)
exampleDataLevels[1,] <- nullValueProportions
exampleDataLevels
})) |> as.data.frame()
do.call(rbind, lapply(1:nrow(exampleDataSamples), function(rowIndex){
exampleDataSamples[rowIndex, "sample.id"] <- paste0(
exampleDataSamples[rowIndex, "sample.id"], levelsSepSymbol, conditionLevel)
exampleDataSamples[rowIndex,]
})) |> as.data.frame()
do.call(rbind, lapply(1:nrow(exampleDataSamples), function(rowIndex){
exampleDataSamples[rowIndex, "sample.id"] <- paste0(
exampleDataSamples[rowIndex, "sample.id"], levelsSepSymbol, conditionLevel)
exampleDataSamples[rowIndex,]
})) |> as.data.frame()
exampleDataSamples
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
knitr::opts_chunk$set(echo = TRUE)
source("./software/src/rmse.R")
knitr::opts_chunk$set(echo = TRUE)
source("./software/src/rmse.R")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
setwd("..")
source("./software/src/rmse.R")
# shuffle experiment
load(file.path("./cohort1/env/02_figde_script.RData"))
setwd("..")
setwd("..")
source("./software/src/rmse.R")
setwd("..")
setwd("..")
source("./src/rmse.R")
setwd("..")
# shuffle experiment
load(file.path("./cohort1/env/03_shuffle/02_figde_script.RData"))
head(dfp.tall)
proportionsShuffle <- dfp.tall
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial.known", "neuron.known", "glial.predicted", "neuron.predicted",
"sample.id.shuffle.pred", "condition", "sample.id", "matched.id"
)
applyRmse(proportionsShuffle)
traceback()
head(proportionsShuffle)
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial.known", "neuron.known", "glial.predicted", "neuron.predicted",
"sample.id.shuffle.pred", "condition", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,7,6)]
head(proportionsShuffle)
# run RMSE calculations
applyRmse(proportionsShuffle)
traceback()
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial.known", "neuron.known", "glial.predicted", "neuron.predicted",
"sample.id.shuffle.pred", "condition.id", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,7,6)]
head(proportionsShuffle)
# run RMSE calculations
applyRmse(proportionsShuffle)
head(proportionsShuffle)
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial.known", "neuron.known", "glial.predicted", "neuron.predicted",
"sample.id.shuffle.pred", "condition.id", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,3,4,7,6)]
head(proportionsShuffle)
# run RMSE calculations
applyRmse(proportionsShuffle)
traceback()
head(proportionsShuffle)
# shuffle experiment
load(file.path("./cohort1/env/03_shuffle/02_figde_script.RData"))
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial_known", "neuron_known", "glial_predicted", "neuron_predicted",
"sample.id.shuffle.pred", "condition.id", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,3,4,7,6)]
head(proportionsShuffle)
# run RMSE calculations
applyRmse(proportionsShuffle)
traceback()
proportionsShuffle$replicate.id <- "rep1"
applyRmse(proportionsShuffle)
traceback()
setwd("..")
setwd("..")
source("./src/rmse.R")
setwd("..")
# shuffle experiment
load(file.path("./cohort1/env/03_shuffle/02_figde_script.RData"))
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial_known", "neuron_known", "glial_predicted", "neuron_predicted",
"sample.id.shuffle.pred", "condition.id", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,3,4,7,6)]
head(proportionsShuffle)
# run RMSE calculationss
proportionsShuffle$replicate.id <- "rep1"
applyRmse(proportionsShuffle)
traceback()
head(proportionsShuffle)
class(proportionsShuffle$glial_known)
class(proportionsShuffle$neuron_known)
class(proportionsShuffle$glial_predicted)
class(proportionsShuffle$neuron_predicted)
proportionsShuffle
head(proportionsShuffle)
proportionsShuffle$replicate.id <- "rep1"
applyRmse(proportionsShuffle)
traceback()
setwd("..")
setwd("..")
source("./src/rmse.R")
setwd("..")
# shuffle experiment
load(file.path("./cohort1/env/03_shuffle/02_figde_script.RData"))
proportionsShuffle <- dfp.tall
colnames(proportionsShuffle) <- c(
"glial_known", "neuron_known", "glial_predicted", "neuron_predicted",
"sample.id.shuffle.pred", "condition.id", "sample.id", "matched.id"
)
proportionsShuffle <- proportionsShuffle[,c(1,2,3,4,7,6)]
head(proportionsShuffle)
# run RMSE calculationss
proportionsShuffle$replicate.id <- "rep1"
applyRmse(proportionsShuffle, c("glial", "neuron"))
colnames(proportionsShuffle)
traceback()
