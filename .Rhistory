list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 4, 1)
s.step.train.range <- s.step.train.range <- seq(1, 2, 0.2)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 4, 1)
s.step.train.range <- s.step.train.range <- seq(1, 40, 10)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
dim(df.hparam.res)
min(df.hparam.res$min.error.train)
min(df.hparam.res$min.error.validate)
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 10, 2)
s.step.train.range <- s.step.train.range <- seq(20, 100, 20)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
head(hparam)
ist.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 5, 0.5)
s.step.train.range <- s.step.train.range <- seq(20, 80, 20)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
dim(hparam)
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 5, 0.5)
s.step.train.range <- s.step.train.range <- seq(20, 100, 25)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 5, 0.5)
s.step.train.range <- s.step.train.range <- seq(20, 60, 10)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.train.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
dim(hparam)
s.increment.range <- seq(1, 5, 0.5)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.validation.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
dim(hparam)
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 5, 0.5)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.validation.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
dim(hparam)
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 3, 1)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(s.increment.range, s.step.train.range, s.step.validation.range)
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
dim(hparam)
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
head(df.hparam.res)
summary(df.hparam.res$s.step.train)
s.step.train.range
hparam <- expand.grid(as.character(s.increment.range),
as.character(s.step.train.range),
as.character(s.step.validation.range))
hparam
head(hparam)
s.increment.range <- seq(1, 3, 1)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(as.character(s.increment.range),
as.character(s.step.train.range),
as.character(s.step.validation.range))
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
for(c in seq(ncol(hparam))){hparam[,c] <- as.numeric(hparam[,c])}
dim(hparam)
head(hparam)
s.increment.range <- seq(1, 3, 1)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(as.character(s.increment.range),
as.character(s.step.train.range),
as.character(s.step.validation.range))
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
head(hparam)
class(hparam[,1])
class(hparam[,2])
for(c in seq(ncol(hparam))){hparam[,c] <- as.numeric(as.character(hparam[,c]))}
dim(hparam)
head(hparam)
list.expt <- get_soptimize_data_list(sce = sce,
sample.id.vector = sample.id.vector,
list.df.true = list.df.true, dfs = dfs.train,
y.eset = y.unadj, y.train = y.train,
y.validate = y.validate,
assay.name = assay.name,
celltype.variable = k.variable.name,
group.name = group.name,
matched.sce = TRUE)
s.increment.range <- seq(1, 3, 1)
s.step.train.range <- seq(20, 100, 20)
s.step.validation.range <- seq(10, 20, 5)
hparam <- expand.grid(as.character(s.increment.range),
as.character(s.step.train.range),
as.character(s.step.validation.range))
colnames(hparam) <- c("s.range", "s.step.train", "s.step.validate")
for(c in seq(ncol(hparam))){hparam[,c] <- as.numeric(as.character(hparam[,c]))}
dim(hparam)
sf.rn <- dfs.rn[dfs.rn$sample.id.dfs.rn == yf.train$sample.id[1],]
df_hparam_result <- function(hparam, sf.rn, list.expt){
# df_hparam_result
# tests hyperparameters for s optimization cross-validation.
# hparam: hyperparameters to test.
# sf.rn: empirical s cell size scale factors to begin with.
# list.expt: list of experiment data, metadata for crossvalidate_soptimization().
#
df.res.hparam <- do.call(rbind, lapply(seq(nrow(hparam)), function(index){
message("working on hparam index: ", index)
hparam.iter <- as.numeric(hparam[index,])
search.range.increment <- hparam.iter[1]
s.step.train <- hparam.iter[2]
s.step.validate <- hparam.iter[3]
s.search.min <- min(sf.rn[1:2])-search.range.increment
s.search.max <- max(sf.rn[1:2])+search.range.increment
s.search.step <- (s.search.max-s.search.min)/s.step.train
dfs.train.iter <- get_dfs(num.types = 2,
min.size = s.search.min,
max.size = s.search.max,
size.step = s.search.step)
colnames(dfs.train.iter)[seq(2)] <- names(sf.rn)[seq(2)]
list.expt$dfs <- dfs.train.iter
t1 <- Sys.time()
crossval.unmatched.result <-
crossvalidate_soptimization(list.expt,
s.step.validate = TRUE,
validate.dfs = TRUE,
plot.results = FALSE)
time.elapsed <- Sys.time()-t1
min.error.train <- min(crossval.unmatched.result$df.res.train$error.glial.true.pred)
min.error.validate <- min(crossval.unmatched.result$df.res.validate$error.glial.true.pred)
matrix(c(min.error.train,
min.error.validate,
hparam.iter, time.elapsed), nrow = 1)
}))
df.res.hparam <- as.data.frame(df.res.hparam)
colnames(df.res.hparam) <- c("min.error.train", "min.error.validate",
"s.range", "s.step.train", "s.step.validate",
"time.elapsed.sec")
return(df.res.hparam)
}
df.hparam.res <- df_hparam_result(hparam, sf.rn, list.expt)
save(df.hparam.res, file = "df-hparam-results_singleton-samples_s-optimize_cohort1.rda")
dim(df.hparam.res)
head(hparam)
dim(hparam)
head(df.hparam.res)
density(df.hparam.res$time.elapsed.sec)
summary(df.hparam.res$time.elapsed.sec)
plot(density(df.hparam.res$time.elapsed.sec))
ggplot(df.hparam.res, aes(x = s.range, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Hyperparameter: s.range")
ggplot(df.hparam.res, aes(x = s.range, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Hyperparameter: s.range\nfacet: s.step.train") +
facet_wrap(~s.step.train)
ggplot(df.hparam.res, aes(x = s.range, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Hyperparameter: s.range\nfacet: s.step.validate") +
facet_wrap(~s.step.validate)
ggplot(df.hparam.res, aes(x = s.step.train, y = min.error.validate, group = s.range)) +
geom_point() + geom_line() + ggtitle("Hyperparameter: s.step.train\nfacet: s.range") +
facet_wrap(~s.range)
summary(df.hparam.res$min.error.validate)
summary(df.hparam.res$min.error.train)
ggplot(df.hparam.res, aes(x = min.error.train, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Facet: s.range") +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.range)
ggplot(df.hparam.res, aes(x = min.error.train, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Facet: s.range") +
geom_abline(slope = 1, intercept = 0)
ggplot(df.hparam.res, aes(x = min.error.train, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Facet: s.range") +
geom_abline(slope = 1, intercept = 0) + xlim(0, 1) + ylim(0, 1) +
facet_wrap(~s.range)
ggplot(df.hparam.res, aes(x = min.error.train, y = min.error.validate)) +
geom_point() + geom_line() + ggtitle("Facet: s.range") +
geom_abline(slope = 1, intercept = 0) + xlim(0, 1) + ylim(0, 1)
