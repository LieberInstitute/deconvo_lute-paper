# now adjust vectors x1, y1 such that the ratio is achieved
X.adj <- adj.weight.x(WeightX = X, WeightY = Y, x1 = x1, y1 = y1)
Y.adj <- adj.weight.x(WeightX = Y, WeightY = X, x1 = x1, y1 = y1)
list(x.adj=x1*X.adj, y.adj=y1*Y.adj)
}
# CRITICALITY CHECK: for identical terms (x1==y1), expect X.adj==X, Y.adj==Y
X.adj <- adj.weight.x(WeightX = X, WeightY = Y, x1 = x1[1], y1 = y1[1])
Y.adj <- adj.weight.x(WeightX = Y, WeightY = X, x1 = x1[1], y1 = y1[1])
round(X.adj)==X
round(Y.adj)==Y
X.adj
Y.adj
dfp <- rbind(data.frame(x = x1, y = y1, type = rep("unadj", length(x1))),
data.frame(x = x2, y = y2, type = rep("dynamic", length(x2))))
adj.xy <- get.adj(x1, y1, WeightX = X, WeightY = Y)
x2 <- adj.xy[[1]]
y2 <- adj.xy[[2]]
dfp <- rbind(data.frame(x = x1, y = y1, type = rep("unadj", length(x1))),
data.frame(x = x2, y = y2, type = rep("dynamic", length(x2))))
dfp <- rbind(dfp, data.frame(x = x1*X, y = y1*Y, type = rep("static", length(x1))))
ggplot(dfp, aes(x = x, y = y, color = type)) + geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0)
# cor tests
# unadj
cor(dfp[dfp$type=="unadj",]$x,dfp[dfp$type=="unadj",]$y) # -0.2988827
# static
cor(dfp[dfp$type=="static",]$x,dfp[dfp$type=="static",]$y) # -0.2988827
# dynamic
cor(dfp[dfp$type=="dynamic",]$x,dfp[dfp$type=="dynamic",]$y) # [1] 0.9354588
# cov tests
# unadj
cov(dfp[dfp$type=="unadj",]$x,dfp[dfp$type=="unadj",]$y) # -3.7
# static
cov(dfp[dfp$type=="static",]$x,dfp[dfp$type=="static",]$y) # -111
# dynamic
cov(dfp[dfp$type=="dynamic",]$x,dfp[dfp$type=="dynamic",]$y) # 1093.662
sce.filter <- rownames(sce) %in% markers$typemarker.results
z.unadj <- lute:::.get_z_from_sce(sce2, "counts", "k2")
z.static <- lute:::.get_z_from_sce(sce2, "counts", "k2") %>%
lute:::.zstransform(s = c("glial" = 3, "neuron" = 10))
ladj <- get.adj(x1 = z.unadj[,1], y1 = z.unadj[,2], WeightX = 3, WeightY = 10)
z.dynamic <- do.call(cbind, lapply(ladj, function(type.expr){type.expr}))
colnames(z.dynamic) <- c("glial", "neuron")
dfp <- rbind(
data.frame(neuron = z.unadj[,"neuron"], glial = z.unadj[,"glial"], type = rep("unadj", nrow(z.unadj))),
data.frame(neuron = z.static[,"neuron"], glial = z.static[,"glial"], type = rep("static", nrow(z.static)))
)
dfp <- rbind(dfp,
data.frame(
neuron = z.dynamic[,"neuron"], glial = z.dynamic[,"glial"],
type = rep("dynamic", nrow(z.dynamic))))
ggplot(dfp, aes(x = neuron, y = glial, color = type)) +
geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0)
adj.xy <- get.adj(x1, y1, WeightX = X, WeightY = Y)
x2 <- adj.xy[[1]]
y2 <- adj.xy[[2]]
dfp <- rbind(data.frame(x = x1, y = y1, type = rep("unadj", length(x1))),
data.frame(x = x2, y = y2, type = rep("dynamic", length(x2))))
dfp <- rbind(dfp, data.frame(x = x1*X, y = y1*Y, type = rep("static", length(x1))))
ggplot(dfp, aes(x = x, y = y, color = type)) + geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0)
# get z matrices
z.unadj <- lute:::.get_z_from_sce(sce1, "counts", "k2")
z.static <- lute:::.get_z_from_sce(sce1, "counts", "k2") %>%
lute:::.zstransform(s = c("glial" = 3, "neuron" = 10))
ladj <- get.adj(x1 = z.unadj[,1], y1 = z.unadj[,2], WeightX = 3, WeightY = 10)
z.dynamic <- do.call(cbind, lapply(ladj, function(type.expr){type.expr}))
colnames(z.dynamic) <- c("glial", "neuron")
dfp <- rbind(
data.frame(neuron = z.unadj[,"neuron"], glial = z.unadj[,"glial"], type = rep("unadj", nrow(z.unadj))),
data.frame(neuron = z.static[,"neuron"], glial = z.static[,"glial"], type = rep("static", nrow(z.static)))
)
dfp <- rbind(dfp,
data.frame(neuron = z.dynamic[,"neuron"], glial = z.dynamic[,"glial"],
type = rep("dynamic", nrow(z.dynamic))))
ggplot(dfp, aes(x = neuron, y = glial, color = type)) +
geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0)
unique.donors <- unique(sce$Sample)
dfp.tall <- do.call(rbind, lapply(unique.donors, function(donor.id){
scef <- sce[,sce$Sample==donor.id]
ypb <- ypb_from_sce(scef, "counts", "k2") %>% as.matrix()
pred.unadj <- lute(z = z.unadj, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
pred.static <- lute(z = z.static, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
pred.dynamic <- lute(z = z.dynamic, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
dfp <- data.frame(value = unlist(c(pred.unadj, pred.static, pred.dynamic)),
k2 = names(c(pred.unadj, pred.static, pred.dynamic)),
type = c(rep("unadj", 2), rep("static", 2), rep("dynamic", 2)))
dfp$donor.id <- donor.id
dfp
}))
dfp.wide <- do.call(cbind, lapply(unique(dfp.tall$k2), function(celltype){
dfp.iter <- dfp.tall[dfp.tall$k2==celltype,][,c(1,3)]
colnames(dfp.iter) <- c(celltype, "type")
dfp.iter
}))
ggplot(dfp.tall, aes(x = donor.id, y = value)) + geom_jitter() + geom_boxplot(color = "cyan") + facet_wrap(~type) + theme(axis.text.x = element_text(angle = 45,hjust=1))
adj.xy <- get.adj(x1, y1, WeightX = X, WeightY = Y)
x2 <- adj.xy[[1]]
y2 <- adj.xy[[2]]
dfp <- rbind(data.frame(x = x1, y = y1, type = rep("unadj", length(x1))),
data.frame(x = x2, y = y2, type = rep("dynamic", length(x2))))
dfp <- rbind(dfp, data.frame(x = x1*X, y = y1*Y, type = rep("static", length(x1))))
ggplot(dfp, aes(x = x, y = y, color = type)) + geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0) + ggtitle("Marker expression")
# cor tests
# unadj
cor(dfp[dfp$type=="unadj",]$x,dfp[dfp$type=="unadj",]$y) # -0.2988827
# static
cor(dfp[dfp$type=="static",]$x,dfp[dfp$type=="static",]$y) # -0.2988827
# dynamic
cor(dfp[dfp$type=="dynamic",]$x,dfp[dfp$type=="dynamic",]$y) # [1] 0.9354588
# cov tests
# unadj
cov(dfp[dfp$type=="unadj",]$x,dfp[dfp$type=="unadj",]$y) # -3.7
# static
cov(dfp[dfp$type=="static",]$x,dfp[dfp$type=="static",]$y) # -111
# dynamic
cov(dfp[dfp$type=="dynamic",]$x,dfp[dfp$type=="dynamic",]$y) # 1093.662
z.unadj <- lute:::.get_z_from_sce(sce2, "counts", "k2")
z.static <- lute:::.get_z_from_sce(sce2, "counts", "k2") %>%
lute:::.zstransform(s = c("glial" = 3, "neuron" = 10))
ladj <- get.adj(x1 = z.unadj[,1], y1 = z.unadj[,2], WeightX = 3, WeightY = 10)
z.dynamic <- do.call(cbind, lapply(ladj, function(type.expr){type.expr}))
colnames(z.dynamic) <- c("glial", "neuron")
dfp <- rbind(
data.frame(neuron = z.unadj[,"neuron"], glial = z.unadj[,"glial"], type = rep("unadj", nrow(z.unadj))),
data.frame(neuron = z.static[,"neuron"], glial = z.static[,"glial"], type = rep("static", nrow(z.static)))
)
dfp <- rbind(dfp,
data.frame(
neuron = z.dynamic[,"neuron"], glial = z.dynamic[,"glial"],
type = rep("dynamic", nrow(z.dynamic))))
ggplot(dfp, aes(x = neuron, y = glial, color = type)) +
geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Marker expression")
# get z matrices
z.unadj <- lute:::.get_z_from_sce(sce1, "counts", "k2")
z.static <- lute:::.get_z_from_sce(sce1, "counts", "k2") %>%
lute:::.zstransform(s = c("glial" = 3, "neuron" = 10))
ladj <- get.adj(x1 = z.unadj[,1], y1 = z.unadj[,2], WeightX = 3, WeightY = 10)
z.dynamic <- do.call(cbind, lapply(ladj, function(type.expr){type.expr}))
colnames(z.dynamic) <- c("glial", "neuron")
dfp <- rbind(
data.frame(neuron = z.unadj[,"neuron"], glial = z.unadj[,"glial"], type = rep("unadj", nrow(z.unadj))),
data.frame(neuron = z.static[,"neuron"], glial = z.static[,"glial"], type = rep("static", nrow(z.static)))
)
dfp <- rbind(dfp,
data.frame(neuron = z.dynamic[,"neuron"], glial = z.dynamic[,"glial"],
type = rep("dynamic", nrow(z.dynamic))))
ggplot(dfp, aes(x = neuron, y = glial, color = type)) +
geom_point() + facet_wrap(~type) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Marker expression")
unique.donors <- unique(sce$Sample)
dfp.tall <- do.call(rbind, lapply(unique.donors, function(donor.id){
scef <- sce[,sce$Sample==donor.id]
ypb <- ypb_from_sce(scef, "counts", "k2") %>% as.matrix()
pred.unadj <- lute(z = z.unadj, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
pred.static <- lute(z = z.static, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
pred.dynamic <- lute(z = z.dynamic, y = ypb,
typemarker.algorithm = NULL)[[1]]@predictions.table
dfp <- data.frame(value = unlist(c(pred.unadj, pred.static, pred.dynamic)),
k2 = names(c(pred.unadj, pred.static, pred.dynamic)),
type = c(rep("unadj", 2), rep("static", 2), rep("dynamic", 2)))
dfp$donor.id <- donor.id
dfp
}))
dfp.wide <- do.call(cbind, lapply(unique(dfp.tall$k2), function(celltype){
dfp.iter <- dfp.tall[dfp.tall$k2==celltype,][,c(1,3)]
colnames(dfp.iter) <- c(celltype, "type")
dfp.iter
}))
ggplot(dfp.tall, aes(x = donor.id, y = value)) + geom_jitter() + geom_boxplot(color = "cyan") + facet_wrap(~type) + theme(axis.text.x = element_text(angle = 45,hjust=1))
head(dfp.tall)
dim(mae)
dim(sce)
dim(sce1)
dim(sce2)
gc()
install.packages("sgd")
## Linear regression
set.seed(42)
N <- 1e4
d <- 5
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
library(sgd)
## Linear regression
set.seed(42)
N <- 1e4
d <- 5
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sprintf("Mean squared error: %0.3f", mean((theta - as.numeric(sgd.theta$coefficients))^2))
sgd.theta
?sgd
dat
head(dat)
sgd.thetat
sgd.theta
dim(dat)
library(lute)
?lute
lexample <- lute:::.get_decon_example_data()
?ypb_from_sce
lexample <- lute:::.get_decon_example_data()
sce <- random_sce()
ypb <- ypb_from_(sce, S = lexample$s)
lexample <- lute:::.get_decon_example_data()
sce <- random_sce()
ypb <- ypb_from_sce(sce, S = lexample$s)
ypb
head(ypb)
dat <- data.frame(y=ypb[,1], x=assays(sce)[["counts"]])
head(dat)
head(assays(sce)[["counts"]])
dim(assays(sce)[["counts"]])
dat <- data.frame(y=ypb[,1], x=lexample$z)
head(dat)
dat <- data.frame(y=ypb[,1], x=lexample$z)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sgd.theta
3.5/-0.49
head(ypb)
Ypb <- ypb_from_sce(sce, S = lexample$s)
Z <- lute:::.get_z_from_sce(sce)
dat <- data.frame(y=Ypb[,1], x=Z)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sgd.theta
head(dat)
head(z)
head(Z)
head(Ypb)
?sgd
sgd.res <- sgd(y ~ ., data=dat, model="lm")
lm.res <- lm(y ~ ., data=dat)
lm.res$cor
lm.res$coefficients
sgd.res
table(sce$celltype)
class(sgd.res)
class(sgd.result)
sgd.result <- sgd(y ~ ., data=dat, model="lm")
class(sgd.result)
attributes(sgd.result)
plot(sgd.result)
sgd.result$estimates
dim(sgd.result$estimates)
sgd.results$fitted.values
sgd.result$fitted.values
head(sgd.result$fitted.values)
head(sgd.result$fitted.values)
head(lm.result$fit)
sgd.result <- sgd(y ~ ., data=dat, model="lm")
lm.result <- lm(y ~ ., data=dat)
head(sgd.result$fitted.values)
head(lm.result$fit)
plot(sgd.result$fitted.values[,1], lm.result$fit)
plot(sgd.result$fitted.values[,1], lm.result$fit)
ggplot(data.frame(sgd = sgd.result$fitted.values[,1], lm = lm.result$fit),
aes(x = sgd, y = lm)) + geom_point() + geom_abline(slope = 1, intercept = 0)
libv <- c("sgd", "ggplot2", "lute")
sapply(libv, library, character.only = T)
ggplot(data.frame(sgd = sgd.result$fitted.values[,1], lm = lm.result$fit),
aes(x = sgd, y = lm)) + geom_point() + geom_abline(slope = 1, intercept = 0)
names(sgd.result)
sgd.result$residuals
ggplot(data.frame(sgd = sgd.result$resideuals[,1], lm = lm.result$residuals),
aes(x = sgd, y = lm)) + geom_point() + geom_abline(slope = 1, intercept = 0)
lm.result$residuals
sgd.result$resideuals[,1]
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(x = sgd, y = lm)) + geom_point() + geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(x = sgd, y = lm)) + geom_point() +
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(y = sgd)) +
geom_bar()
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(y = sgd)) +
geom_density()
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(x = sgd)) +
geom_density()
ggplot(data.frame(sgd = sgd.result$residuals[,1], lm = lm.result$residuals),
aes(x = lm)) +
geom_density()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
knitr::opts_chunk$set(echo = TRUE)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
load.filename <- "df-result_s-opt-bias_cohort1.rda"
load.path <- file.path("deconvo_method-paper", "outputs", "11_soptimize-pbfit-bias_dlpfc-cohort1", load.filename)
df.res <- get(load(load.path))
df.res$abs.bias.neuron <- abs(df.res$bias.neuron.true.pred)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + geom_line() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_line() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_smooth(se = T) + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = glial, y = neuron)) + theme_bw() +
geom_raster(aes(fill = bias.neuron.true.pred)) +
scale_fill_gradientn(colours = rainbow(5)) + facet_wrap(~sample.id) +
geom_vline(xintercept = 3) + geom_hline(yintercept = 10)
ggplot(df.res, aes(x = glial, y = neuron)) + theme_bw() +
geom_raster(aes(fill = abs.bias.neuron)) +
scale_fill_gradientn(colours = rainbow(5)) +
facet_wrap(~sample.id) +
geom_vline(xintercept = 3) + geom_hline(yintercept = 10)
ggplot(df.res, aes(x = glial, y = neuron)) + theme_bw() +
geom_raster(aes(fill = abs.bias.neuron)) +
scale_fill_gradientn(colours = rainbow(5)) +
facet_wrap(~sample.id) +
geom_vline(xintercept = 3) + geom_hline(yintercept = 10)
ggplot(df.res, aes(x = glial, y = neuron)) + theme_bw() +
geom_raster(aes(fill = bias.neuron.true.pred)) +
scale_fill_gradientn(colours = rainbow(5)) + facet_wrap(~sample.id) +
geom_vline(xintercept = 3) + geom_hline(yintercept = 10)
ggplot(df.res, aes(x = glial, y = neuron)) + theme_bw() +
geom_raster(aes(fill = abs.bias.neuron)) +
scale_fill_gradientn(colours = rainbow(5)) +
facet_wrap(~sample.id) +
geom_vline(xintercept = 3) + geom_hline(yintercept = 10) +
geom_abline(slope = 1, intercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_line() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_smooth(se = T) + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_line() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_smooth(se = T) + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_line() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred)) +
geom_point() + geom_smooth(se = T) + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + theme_bw() + geom_smooth(se = T) + geom_hline(yintercept = 0)
?geom_smooth
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0) +
geom_smooth(method = "glm", se = T)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + theme_bw() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0) +
geom_smooth(method = "glm", se = T)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point() + theme_bw() + geom_smooth(se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0) +
geom_smooth(method = "glm", se = T)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
theme_bw() + geom_smooth(method = "glm", se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
geom_point(alpha = 0.2) + theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
theme_bw() + facet_wrap(~sample.id) + geom_hline(yintercept = 0) +
geom_smooth(method = "glm", se = T)
ggplot(df.res, aes(x = neuron, y = bias.neuron.true.pred, color = sample.id)) +
theme_bw() + geom_smooth(method = "glm", se = T) + geom_hline(yintercept = 0)
ggplot(df.res, aes(x = neuron, y = bias.glial.true.pred, color = sample.id)) +
theme_bw() + geom_smooth(method = "glm", se = T) + geom_hline(yintercept = 0)
head(df.res)
df.res$is.zero.bias.neuron <- df.res$bias.neuron.true.pred==0
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.zero.bias.neuron)) +
geom_point() + scale_color_manual(values = c(TRUE = "red", FALSE = "gray")) +
head(df.res)
df.res$is.zero.bias.neuron <- df.res$bias.neuron.true.pred==0
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.zero.bias.neuron)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
min(df.res$bias.neuron.true.pred)
df.res$is.zero.bias.neuron <- df.res$bias.neuron.true.pred==min(df.res$bias.neuron.true.pred)
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.zero.bias.neuron)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
df.res$is.zero.bias.neuron <- df.res$bias.neuron.true.pred==min(df.res$abs.bias.neuron)
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.zero.bias.neuron)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,1e-2))
df.res$lowest.quantile <- df.res$abs.bias.neuron<=quant[0]
quant[1]
quant[2]
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,1e-2))
df.res$lowest.quantile <- df.res$abs.bias.neuron<=quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,1))
df.res$lowest.quantile <- df.res$abs.bias.neuron<=quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
quant
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$lowest.quantile <- df.res$abs.bias.neuron<=quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
df.res$is.max.bias <- df.res$bias.neuron.true.pred==max(df.res$abs.bias.neuron)
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.max.bias)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
max(df.res$abs.bias.neuron)
table(df.res$is.max.bias)
max(df.res$abs.bias.neuron)
df.res$is.max.bias <- df.res$bias.neuron.true.pred==max(df.res$bias.neuron.true.pred)
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = is.max.bias)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
table(df.res$is.max.bias)
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
quant
quant[10]
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$highest.decile <- df.res$abs.bias.neuron>=quant[10]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$highest.decile <- df.res$abs.bias.neuron>=quant[10]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = highest.decile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
df.res$minimum.bias <- df.res$bias.neuron.true.pred==min(df.res$abs.bias.neuron)
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = minimum.bias)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$lowest.quantile <- df.res$abs.bias.neuron<=quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$lowest.decile.bias <- df.res$abs.bias.neuron <= quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.quantile)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
# quantile filter
quant <- quantile(df.res$abs.bias.neuron, seq(0,1,0.1))
df.res$lowest.decile.bias <- df.res$abs.bias.neuron <= quant[2]
# red and gray color scheme
ggplot(df.res, aes(x = glial, y = neuron, color = lowest.decile.bias)) +
geom_point() + scale_color_manual(values = c("TRUE" = "red", "FALSE" = "gray")) +
facet_wrap(~sample.id)
gc()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
