roundValue3 <- round(value, digits = 10)
roundValue4 <- format(value, scientific = T)
roundValue5 <- format(value, scientific = T, digits = 1)
roundValue6 <- format(value, scientific = T, digits = 10)
roundValue7 <- format(value, scientific = F)
roundValue8 <- format(value, scientific = F, digits = 1)
roundValue9 <- format(value, scientific = F, digits = 10)
} else{
value <- as.numeric(value)
roundValue1 <- round(value)
roundValue2 <- round(value, digits = 1)
roundValue3 <- round(value, digits = 10)
roundValue4 <- format(value, scientific = T)
roundValue5 <- format(value, scientific = T, digits = 1)
roundValue6 <- format(value, scientific = T, digits = 10)
roundValue7 <- format(value, scientific = F)
roundValue8 <- format(value, scientific = F, digits = 1)
roundValue9 <- format(value, scientific = F, digits = 10)
}
returnList <- list(
roundValue1,
roundValue2,
roundValue3,
roundValue4,
roundValue5,
roundValue6,
roundValue7,
roundValue8,
roundValue9
)
return(
returnList
)
}
# test
getRoundValuesCharacter("1e-10")
getRoundValuesNumeric(0.2-1e-10)
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
dfLute1 <- df.k2
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/02_crossvalidate_script.RData")
dfLute2 <- df.k2
head(dfLute1)
knitr::opts_chunk$set(echo = TRUE)
# load data from supplement
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/01_run_manual_script.RData")
dfLute1 <- df.k2
load("~/GitHub/deconvo_method-paper/cohort1/env/05_bulk/02_crossvalidate_script.RData")
dfLute2 <- df.k2
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
head(dfLute)
# load data from benchmark
benchS1 <- read.csv("./BIOARXIV_BENCHMARK/TABLE_S1.csv")
benchS3 <- read.csv("./BIOARXIV_BENCHMARK/TABLE_S3.csv")
head(benchS1)
colnames(benchS1)
head(benchS3)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(benchS3$Sample))
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
head(dfLute)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(dfLute$sample.id))
dfLute$sample.id
head(dfLute)
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
head(benchS1)
# num blocks bench
length(unique(benchS1$Sample))
length(unique(benchS3$Sample))
# num blocks lute
length(unique(dfLute$sample.id))
head(benchS1)
head(benchS3)
head(dfLute)
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(dfLute$bulk.sample.id))
dfLute$bulk.sample.id
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1", "", dfLute$bulk.sample.id)))
gsub("1", "", dfLute$bulk.sample.id)
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1", "", dfLute$bulk.sample.id)))
# num bulk samples bench
length(unique(benchS1$SAMPLE_ID))
# num bulk samples lute
length(unique(gsub("1$", "", dfLute$bulk.sample.id)))
colnames(benchS1)
head(benchS1[,c(1:5)])
head(benchS1[,c(1:10)])
# summaries by condition, bench
table(benchS1$library_combo) |> as.data.frame()
do.call(rbind, lapply(uniqueCombo, function(ci){
numDonor <- length(
unique(
benchS1[benchS1$library_combo==ci,]$BrNum
)
)
c(numDonor, ci)
}))
uniqueDonorsVector <- unique(benchS1$BrNum)
uniqueCombo <- unique(benchS1$library_combo)
dfDonorCondSummary <- do.call(rbind, lapply(uniqueCombo, function(ci){
numDonor <- length(
unique(
benchS1[benchS1$library_combo==ci,]$BrNum
)
)
c(numDonor, ci)
}))
dfDonorCondSummary
head(dfLute)
# sample summaries by condition, bench
table(dfLute$bulk.sample.condition) |> as.data.frame()
# donor summaries by condition, bench
# sample summaries by condition, bench
table(dfLute[!duplicated(gsub("1", "", rownames(dfLute))),]$bulk.sample.condition) |> as.data.frame()
# donor summaries by condition, bench
!duplicated(gsub("1", "", rownames(dfLute)))
table(!duplicated(gsub("1", "", rownames(dfLute))))
dfLute[!duplicated(gsub("1", "", rownames(dfLute))),]$bulk.sample.condition |>
table() |> as.data.frame()
head(dfLute)
head(df.k2)
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
table(dfLute$s.set.values)
table(dfLute$s.set.label)
table(dfLute$experiment.type)
table(dfLute$bulk.scale.type)
head(dfLute)
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="rpkm.counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
filterLute
table(filterLute)
table(dfLute$bulk.scale.type)
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
table(filterLute)
dim(dfLute)
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dim(dfLute)
table(dfLute$bulk.sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg)
table(dfLute$bulk.sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
# summary lute conditions, block
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# summary lute conditions, donor
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
length(unique(gsub("_.*", "", dfLute$sample.id)))
unique(gsub("_.*", "", dfLute$sample.id))
length(unique(gsub("_.*", "", dfLute$sample.id)))
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
colNamesVector <- c("bulk.sample.id", "bulk.sample.condition", "sample.id",
"s.set.values", "s.set.label", "experiment.type",
"bulk.scale.type", "assay.name.lutearg")
dfLute <- rbind(
dfLute1[,colNamesVector],
dfLute2[,colNamesVector]
) |> as.data.frame()
save(dfLute, file = "dfLute.rda")
# filter lute conditions
filterLute <- dfLute$s.set.label=="s.null"
filterLute <- filterLute & dfLute$experiment.type=="shared.reference"
filterLute <- filterLute & dfLute$bulk.scale.type=="counts"
filterLute <- filterLute & dfLute$assay.name.lutearg=="counts"
dfLute <- dfLute[filterLute,]
dfLute$BrNum <- gsub("_.*", "", dfLute$sample.id)
# summary lute conditions, block
table(dfLute$sample.id, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# summary lute conditions, donor
table(dfLute$BrNum, dfLute$experiment.type,
dfLute$bulk.scale.type, dfLute$assay.name.lutearg) |> as.data.frame()
# num donors bench
length(unique(benchS1$BrNum))
length(unique(gsub("_.*", "", benchS3$Sample)))
# num donors lute
length(unique(gsub("_.*", "", dfLute$sample.id)))
# num blocks bench
length(unique(benchS1$Sample))
length(unique(benchS3$Sample))
# num blocks lute
length(unique(dfLute$sample.id))
unique(dfLute$sample.id)
head(dflute)
head(dfLute)
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$SAMPLE_ID))
benchS3$SAMPLE_ID
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
# overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# blocks overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, lute
length(intersect(gsub("_", "", dfLute$sample.id), gsub("_", "", benchS3$Sample)))
length(intersect(unique(gsub("_", "", dfLute$sample.id)), unique(gsub("_", "", benchS3$Sample))))
gsub("_", "", dfLute$sample.id)
length(intersect(gsub("_.*", "", dfLute$sample.id), gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(gsub("_.*", "", dfLute$sample.id)), unique(gsub("_.*", "", benchS3$Sample))))
# blocks overlap, bulk, sn, rn, lute
length(intersect(dfLute$sample.id, benchS3$Sample))
length(intersect(unique(dfLute$sample.id), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, lute
length(intersect(gsub("_.*", "", dfLute$sample.id), gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(gsub("_.*", "", dfLute$sample.id)), unique(gsub("_.*", "", benchS3$Sample))))
head(benchS1$SAMPLE_ID)
benchS1$BrNum
benchS1$Sample
benchS1$BrNum
# blocks overlap, bulk, sn, rn, bench
length(intersect(benchS1$Sample, benchS3$Sample))
length(intersect(unique(benchS1$Sample), unique(benchS3$Sample)))
# donors overlap, bulk, sn, rn, bench
length(intersect(benchS1$BrNum, gsub("_.*", "", benchS3$Sample)))
length(intersect(unique(benchS1$BrNum), unique(gsub("_.*", "", benchS3$Sample))))
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/01_read_script.RData")
knitr::opts_chunk$set(echo = FALSE)
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/01_read_script.RData")
knitr::opts_chunk$set(echo = FALSE)
df.def <- data.frame(
cell.type = c("B.Naive",
"Basophils.LD",
"MAIT",
"mDCs",
"Monocytes.C",
"Monocytes.NC.I",
"Neutrophils.LD",
"NK",
"pDCs",
"Plasmablasts",
"T.CD4.Naive",
"T.CD8.Memory",
"T.CD8.Naive",
"T.gd.non.Vd2",
"T.gd.Vd2"),
description = c("Naive B-cells",
"Low-density Basophils",
"Mucosal-associated invariant T cells (MAIT)",
"Myeloid Dendritic Cells",
"Monocytes, type C",
"Monocytes, types NC and I combined",
"Low-density Neutrophils",
"Natural Killer",
"Plasmacytoid Dendritic Cells",
"Plasmablasts",
"CD4+ Naive T-cell",
"CD8+ Memory T-cell",
"CD8+ Naive T-cell",
"T lymphocyte, gamma delta, non-Vdelta2",
"T lymphocyte, gamma delta, Vdelta2")
)
knitr::kable(df.def)
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/03_deconvolve.RData")
knitr::opts_chunk$set(echo = FALSE)
df.def <- data.frame(
cell.type = c("B.Naive",
"Basophils.LD",
"MAIT",
"mDCs",
"Monocytes.C",
"Monocytes.NC.I",
"Neutrophils.LD",
"NK",
"pDCs",
"Plasmablasts",
"T.CD4.Naive",
"T.CD8.Memory",
"T.CD8.Naive",
"T.gd.non.Vd2",
"T.gd.Vd2"),
description = c("Naive B-cells",
"Low-density Basophils",
"Mucosal-associated invariant T cells (MAIT)",
"Myeloid Dendritic Cells",
"Monocytes, type C",
"Monocytes, types NC and I combined",
"Low-density Neutrophils",
"Natural Killer",
"Plasmacytoid Dendritic Cells",
"Plasmablasts",
"CD4+ Naive T-cell",
"CD8+ Memory T-cell",
"CD8+ Naive T-cell",
"T lymphocyte, gamma delta, non-Vdelta2",
"T lymphocyte, gamma delta, Vdelta2")
)
knitr::kable(df.def)
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
dfPlotCellSize$cellType <- factor(dfPlotCellSize$cellType, levels = dfPlotCellSize$cellType[order(dfPlotCellSize$size)])
plot1 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_histogram() + xlab("Cell size") + ylab("Cell type count")
plot2 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_density() + xlab("Cell size") + ylab("Cell amount density")
grid.arrange(plot1, plot2, nrow=2)
plot3 <- ggplot(dfPlotCellSize, aes(x = size, fill = cellType)) + geom_histogram() + xlab("Cell size") +
ylab("Cell type count") + guides(fill=guide_legend(ncol=2))
plot3
ggplot(dfPlotCellSize, aes(x = cellType, y = size, fill = cellType)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle=45,hjust=1)) +
guides(fill=guide_legend(ncol=2))
dfPlotNotPlasmablast <- dfPlotCellSize[!dfPlotCellSize$cellType=="Plasmablasts",]
dfPlotNotPlasmablast$conditionLabel <- "Non-plasmablasts"
dfPlotNotPlasmablast$dendriticCellType <-
ifelse(dfPlotNotPlasmablast$cellType %in% c("pDCs", "mDCs"), TRUE, FALSE)
ggplot(dfPlotNotPlasmablast, aes(x = cellType, y = size, fill = cellType)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle=45,hjust=1)) +
guides(fill=guide_legend(ncol=2))
ggplot(
dfPlotNotPlasmablast, aes(x = conditionLabel, y = size)) +
geom_boxplot(alpha = 0, color = "black") +
geom_jitter(aes(color = cellType, shape = dendriticCellType), size = 4)
gc()
gc()
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/01_read_script.RData")
knitr::opts_chunk$set(echo = FALSE)
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/03_deconvolve.RData")
knitr::opts_chunk$set(echo = FALSE)
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
dfPlotCellSize$cellType <- factor(dfPlotCellSize$cellType, levels = dfPlotCellSize$cellType[order(dfPlotCellSize$size)])
plot1 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_histogram() + xlab("Cell size") + ylab("Cell type count")
plot2 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_density() + xlab("Cell size") + ylab("Cell amount density")
grid.arrange(plot1, plot2, nrow=2)
plot3 <- ggplot(dfPlotCellSize, aes(x = size, fill = cellType)) + geom_histogram() + xlab("Cell size") +
ylab("Cell type count") + guides(fill=guide_legend(ncol=2))
plot3
ggplot(dfPlotCellSize, aes(x = cellType, y = size, fill = cellType)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle=45,hjust=1)) +
guides(fill=guide_legend(ncol=2))
dfPlotType <- ptrue |> t() |> melt() |> as.data.frame()
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/03_deconvolve.RData")
load("./env/01_pseudobulk/01_read_script.RData")
knitr::opts_chunk$set(echo = FALSE)
dfPlotCellSize <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
dfPlotCellSize$cellType <- factor(dfPlotCellSize$cellType, levels = dfPlotCellSize$cellType[order(dfPlotCellSize$size)])
plot1 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_histogram() + xlab("Cell size") + ylab("Cell type count")
plot2 <- ggplot(dfPlotCellSize, aes(x = size)) + geom_density() + xlab("Cell size") + ylab("Cell amount density")
grid.arrange(plot1, plot2, nrow=2)
plot3 <- ggplot(dfPlotCellSize, aes(x = size, fill = cellType)) + geom_histogram() + xlab("Cell size") +
ylab("Cell type count") + guides(fill=guide_legend(ncol=2))
plot3
ggplot(dfPlotCellSize, aes(x = cellType, y = size, fill = cellType)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle=45,hjust=1)) +
guides(fill=guide_legend(ncol=2))
dfPlotType <- ptrue |> t() |> melt() |> as.data.frame()
ptrue <- experimentData$p.true
dfPlotType <- ptrue |> t() |> melt() |> as.data.frame()
colnames(dfPlotType) <- c("sample.id", "cellType", "proportion.fc")
dfPlotType$is.plasmablast <- ifelse(
dfPlotType$cellType=="Plasmablasts", "Plasmablasts", "Not-plasmablasts")
plot1 <- ggplot(dfPlotType, aes(x = sample.id, y = proportion.fc, fill = cellType)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill=guide_legend(ncol=2))
plot2 <- ggplot(dfPlotType, aes(x = sample.id, y = proportion.fc, fill = is.plasmablast)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(fill=guide_legend(ncol=2))
plot1
plot2
dfPlotPlasmablasts <- dfPlotType[dfPlotType$cellType=="Plasmablasts",]
dfPlotPlasmablasts$sample.id <- factor(dfPlotPlasmablasts$sample.id,
levels = dfPlotPlasmablasts$sample.id[
order(dfPlotPlasmablasts$proportion.fc)])
plot3 <- ggplot(dfPlotPlasmablasts,
aes(x = sample.id, y = proportion.fc)) +
geom_bar(stat = "identity", position = "stack") + ggtitle("Plasmablasts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
dfPlotPlasmablasts <- dfPlotType[dfPlotType$cellType=="Plasmablasts",]
dfPlotPlasmablasts$sample.id <- factor(dfPlotPlasmablasts$sample.id,
levels = dfPlotPlasmablasts$sample.id[
order(dfPlotPlasmablasts$proportion.fc)])
plot3 <- ggplot(dfPlotPlasmablasts,
aes(x = sample.id, y = proportion.fc)) +
geom_bar(stat = "identity", position = "stack") + ggtitle("Plasmablasts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
dfPlotNotPlasmablasts <- dfPlotPlasmablasts
dfPlotNotPlasmablasts$proportion.fc=1-dfPlotNotPlasmablasts$proportion.fc
dfPlotNotPlasmablasts$cellType <- "Not-plasmablast"
plot1 <- ggplot(dfPlotNotPlasmablasts, aes(x = proportion.fc)) +
geom_histogram() + xlab("Proportion non-Plasmablast") + ylab("Sample count")
plot1
dfPlotType
head(dfPlotType)
summary(dfPlotType[dfPlotType$is.plasmablast=="Plasmablast",]$proportion.fc)
dfPlotType$is.plasmablast=="Plasmablast"
table(dfPlotType$is.plasmablast=="Plasmablast")
table(dfPlotType$is.plasmablast)
summary(dfPlotType[dfPlotType$is.plasmablast=="Plasmablasts",]$proportion.fc)
summary(dfPlotType[dfPlotType$is.plasmablast=="Not-plasmablasts",]$proportion.fc)
summary(dfPlotType[dfPlotType$is.plasmablast=="Plasmablasts",]$proportion.fc)
summary(dfPlotType[dfPlotType$is.plasmablast=="Not-plasmablasts",]$proportion.fc)
summary(dfPlotType[dfPlotType$is.plasmablast=="Plasmablasts",]$proportion.fc)
summary(dfPlotType[dfPlotType$is.plasmablast=="Not-plasmablasts",]$proportion.fc)
load("C:/Users/User/Documents/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
10/3
df <- as.data.frame(csf.table)
df <- df[grepl("Codeluppi.*", df$citation.s.),]
df
df[df$cell_type=="glial",]/df[df$cell_type=="neuron",]
df[df$cell_type=="glial",]$scale.factor.value/df[df$cell_type=="neuron",]$scale.factor.value
df[df$cell_type=="neuron",]$scale.factor.value/df[df$cell_type=="glial",]$scale.factor.value
