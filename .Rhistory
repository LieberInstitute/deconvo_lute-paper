s.set5 = c("glial" = 4, "neuron" = 10))
# notes:
# difference scale seems to matter more than magnitude scale (e.g. similar c(3,10), c(30,100), etc.)
# ratio difference matters (e.g. different c(3,10), c(5,10), etc.)
#---------------------------------------------------
# k2 experiment -- same reference across experiments
#---------------------------------------------------
# run k2 experiment
celltype.variable <- "k2"
sample.id.vector <- unique(colData(mae)[,1][complete.cases(mae)])
sample.id <- sample.id.vector[1]
df.s.k2.shared <- do.call(rbind, lapply(seq(length(list.s.pred)), function(s.index){
# format cell sizes
s.set.name <- names(list.s.pred)[s.index]
s.vector.pred <- list.s.pred[[s.index]]
s.vector.pred <- order_svector(s.vector.pred)
# iterate on samples, returning predictions matrix
do.call(rbind, lapply(sample.id.vector, function(sample.id){
message(sample.id)
# filter bulk
filter.y.sample <- colData(rse.all)[,"batch.id2"]==sample.id
filter.y.marker <- rownames(rse.all) %in% rownames(sce.iter)
rse.iter <- rse.all[filter.y.marker, filter.y.sample]
rse.iter <- logNormCounts(rse.iter)
y.iter <- assays(rse.iter)[[assay.name]]
# get predictions
prop.pred.iter <- lute(sce = sce.iter, y = y.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table %>%
as.data.frame()
prop.pred.iter$s.set.label <- s.set.name
prop.pred.iter$s.set.values <- paste0(
names(s.vector.pred),"=",s.vector.pred,collapse=",")
prop.pred.iter$sample.id <- sample.id
prop.pred.iter$k.type <- celltype.variable
# get true proportions
df.rn.iter <- df.rn[df.rn$sample_id==sample.id,]
prop.pred.iter$true.glial <- df.rn.iter[df.rn.iter$cell_type=="glial",]$true_proportion
prop.pred.iter$true.neuron <- df.rn.iter[df.rn.iter$cell_type=="neuron",]$true_proportion
prop.pred.iter
}))
}))
df.s.k2.shared$experiment.type <- "shared.reference"
#--------------------------------------------------------------------------
# k2 experiment -- using within-sample matched reference across experiments
#--------------------------------------------------------------------------
# run k2 experiment
celltype.variable <- "k2"
sample.id.vector <- unique(colData(mae)[,1][complete.cases(mae)])
sample.id <- sample.id.vector[1]
df.s.k2.within <- do.call(rbind, lapply(seq(length(list.s.pred)), function(s.index){
# format cell sizes
s.set.name <- names(list.s.pred)[s.index]
s.vector.pred <- list.s.pred[[s.index]]
s.vector.pred <- order_svector(s.vector.pred)
# iterate on samples, returning predictions matrix
do.call(rbind, lapply(sample.id.vector, function(sample.id){
message(sample.id)
# filter bulk
filter.y.sample <- colData(rse.all)[,"batch.id2"]==sample.id
filter.y.marker <- rownames(rse.all) %in% rownames(sce.iter)
rse.iter <- rse.all[filter.y.marker, filter.y.sample]
rse.iter <- logNormCounts(rse.iter)
y.iter <- assays(rse.iter)[[assay.name]]
# filter snrnaseq
sce.iter.sample <- sce.iter[,sce.iter$Sample==sample.id]
# get predictions
prop.pred.iter <- lute(sce = sce.iter.sample, y = y.iter, assay.name = assay.name,
celltype.variable = celltype.variable, s = s.vector.pred,
typemarker.algorithm = NULL, return.info = FALSE,
deconvolution.algorithm = deconvolution.algorithm)$deconvolution.results@predictions.table %>%
as.data.frame()
prop.pred.iter$s.set.label <- s.set.name
prop.pred.iter$s.set.values <- paste0(
names(s.vector.pred),"=",s.vector.pred,collapse=",")
prop.pred.iter$sample.id <- sample.id
prop.pred.iter$k.type <- celltype.variable
# get true proportions
df.rn.iter <- df.rn[df.rn$sample_id==sample.id,]
prop.pred.iter$true.glial <- df.rn.iter[df.rn.iter$cell_type=="glial",]$true_proportion
prop.pred.iter$true.neuron <- df.rn.iter[df.rn.iter$cell_type=="neuron",]$true_proportion
prop.pred.iter
}))
}))
df.s.k2.within$experiment.type <- "within.reference"
#---------------
# format results
#---------------
df.k2 <- rbind(df.s.k2.shared, df.s.k2.within)
# append abs.error
df.k2$abs.error.neuron <- abs(df.k2$neuron-df.k2$true.neuron)
df.k2$abs.error.glial <- abs(df.k2$glial-df.k2$true.glial)
#-----
# plot
#-----
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~s.set.label) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
names(mae)
mae[["df.cellstat.rnascope"]]
head(df.k2)
gc()
gc()
gc()
# dependencies
libv <- c("here", "lute", "dplyr", "ggplot2", "gridExtra", "SingleCellExperiment",
"SummarizedExperiment", "scran", "edgeR")
sapply(libv, library, character.only = TRUE)
# save path
save.path <- here("deconvo_method-paper", "outputs", "07_bulk-scale-abtest_dlpfc-cohort1")
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- here("deconvo_method-paper", "outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
# experiment variables
assay.name <- "logcounts"
deconvolution.algorithm <- "nnls"
cell.type.variable <- "k2"
names(mae)
mae[["df.cellstat.rnascope"]]
rnascope <- mae[["rnascope.image"]]
# append k2 label
cd <- colData(rnascope)
cd$k2 <- "NA"
cd$k2 <- ifelse(grepl("Excit|Inhib", cd$cell_type), "neuron",
ifelse(grepl("Endo|Oligo|Micro", cd$cell_type), "glial", "NA"))
colData(rnascope) <- cd
# filter na
rnascope <- rnascope[,!rnascope$k2=="NA"]
sample.id.vector <- unique(rnascope$Sample)
# make rnscope data
df.rn <- do.call(rbind, lapply(sample.id.vector, function(sample.id){
rnf <- rnascope[,rnascope$Sample==sample.id]
# proportions
df.prop <- table(rnf[[cell.type.variable]], rnf$Sample) %>% prop.table()
# sizes
df.size <- aggregate(data.frame(area = assays(rnf)[["Nucleus_Area"]][1,]),
by = list(cell_type = rnf[[cell.type.variable]]), FUN = "median")
df.iter <- cbind(df.prop, df.size)
df.iter <- df.iter[,c(1,2,3,5)]
colnames(df.iter) <- c("cell_type", "sample_id", "true_proportion", "cell_size")
df.iter
}))
df.rn
names(mae)
# get bulk expression
rse.counts <- mae[["bulk.rnaseq"]]
rse.rpkm <- mae[["bulk.rpkm.rnaseq"]]
names(assays(rse.counts)) <- names(assays(rse.rpkm)) <- "counts"
rownames(rse.counts) <- rownames(rse.rpkm) <- rowData(rse.all)$Symbol
# get bulk expression
rse.counts <- mae[["bulk.rnaseq"]]
rse.rpkm <- mae[["bulk.rpkm.rnaseq"]]
names(assays(rse.counts)) <- names(assays(rse.rpkm)) <- "counts"
rownames(rse.counts) <- rownames(rse.rpkm) <- rowData(rse.counts)$Symbol
dim(rse.counts)
dim(rse.rpkm)
rownames(rse.counts)
rownames(rse.rpkm)
rse.counts <- mae[["bulk.rnaseq"]]
rse.rpkm <- mae[["bulk.rpkm.rnaseq"]]
names(assays(rse.counts)) <- names(assays(rse.rpkm)) <- "counts"
# snrnaseq reference -- using same reference across experiments
sce.iter <- mae[["sn1.rnaseq"]]
sce.iter <- logNormCounts(sce.iter)
class(rse.counts)
class(rse.rpkm)
# snrnaseq reference -- using same reference across experiments
sce.iter <- mae[["sn1.rnaseq"]]
sce.iter <- logNormCounts(sce.iter)
prep rnascope data
names(mae)
# prep rnascope data
# get true proportions from rnascope data
rnascope <- mae[["rnascope.image"]]
# append k2 label
cd <- colData(rnascope)
cd$k2 <- "NA"
cd$k2 <- ifelse(grepl("Excit|Inhib", cd$cell_type), "neuron",
ifelse(grepl("Endo|Oligo|Micro", cd$cell_type), "glial", "NA"))
colData(rnascope) <- cd
# filter na
rnascope <- rnascope[,!rnascope$k2=="NA"]
sample.id.vector <- unique(rnascope$Sample)
# make rnscope data (ROWS = CELLTYPE;SAMPLE_ID)
df.rn <- do.call(rbind, lapply(sample.id.vector, function(sample.id){
rnf <- rnascope[,rnascope$Sample==sample.id]
# proportions
df.prop <- table(rnf[[cell.type.variable]], rnf$Sample) %>% prop.table()
# sizes
df.size <- aggregate(data.frame(area = assays(rnf)[["Nucleus_Area"]][1,]),
by = list(cell_type = rnf[[cell.type.variable]]), FUN = "median")
df.iter <- cbind(df.prop, df.size)
df.iter <- df.iter[,c(1,2,3,5)]
colnames(df.iter) <- c("cell_type", "sample_id", "true_proportion", "cell_size")
df.iter
}))
gc()
gc()
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
source(file.path(base.path, "01_prepare-mae.R")) # prep mae data
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
source(file.path(base.path, "01_prepare-mae.R")) # prep mae data
# run experiments
source(file.path(base.path, "02-01_shared-reference-experiments.R"))
gc()
gc()
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_shared-reference-experiments.R"))
gc()
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_shared-reference-experiments.R"))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_shared-reference-experiments.R"))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-01_rse-rpkm_shared-reference-experiments.R"))
gc()
gc()
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
library(knitr)
list.s.pred
paste0(list.s.pred[[1]])
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
# table visualization
knitr::kable(expt)
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~s.set.label) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# errors by sample
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~s.set.label) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# errors by sample
ggplot(df.k2, aes(x = s.set.label, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~sample.id) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
gc()
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
list.files()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
gc()
gc()
gc()
library(here)
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- here("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
list.files()
list.files("outputs")
library(here)
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- here("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
library(here)
list.files()
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- here("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
library(here)
list.files()
# load mae
#new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
#mae.final.filepath <- here("outputs", "01_prepare-datasets", new.mae.filename)
#mae <- get(load(mae.final.filepath))
library(here)
list.files()
here()
# load mae
#new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
#mae.final.filepath <- file.path("outputs", "01_prepare-datasets", new.mae.filename)
#mae <- get(load(mae.final.filepath))
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- file.path("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. "shared" is the same summary across donors and experiments, "within" means a new reference was calculated based on each donor's own snRNAseq data.",
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. "counts" means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(data.dict))
data.dict
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
ggplot(df.k2, aes(x = true.neuron, y = neuron)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label)
head(df.k2)
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- file.path("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
ggplot(df.k2, aes(x = true.neuron, y = neuron)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label)
head(df.k2)
# load mae
new.mae.filename <- "mae_with-rpkm_additional-data_final.rda"
mae.final.filepath <- file.path("outputs", "01_prepare-datasets", new.mae.filename)
mae <- get(load(mae.final.filepath))
base.path <- file.path("code", "07_bulk-scale-abtest_dlpfc-cohort1")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01_rse-counts_shared-reference-experiments.R"))
source(file.path(base.path, "02-02_rse-counts_within-reference-experiments.R"))
source(file.path(base.path, "02-03_rse-rpkm_shared-reference-experiments.R"))
source(file.path(base.path, "02-04_rse-rpkm_within-reference-experiments.R"))
# bind results
source(file.path(base.path, "03_prep-experiment-results.R"))
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
ggplot(df.k2, aes(x = true.neuron, y = neuron)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label)
head(df.k2)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~s.set.label) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# errors by sample
ggplot(df.k2, aes(x = s.set.label, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~sample.id) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
