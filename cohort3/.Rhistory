strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3/notebooks/02_abisseq")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3/notebooks/03_k5")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3/notebooks/03_k5")
libraryVector <-
c("ggplot2", "reshape2", "dplyr", "ComplexHeatmap", "UpSetR")
sapply(libraryVector, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
dim(zref)
dim(dfPlotHeatmapLog2TpmRef)
dim(zref)
dim(zrefMapped)
dim(tpm)
dim(tpmReference)
dim(trueCellTypeProportions)
dim(zref)
gc()
gc()
gc()
libv <- c("ggplot2", "ComplexHeatmap", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.Rdata")
# heatmap scale label
# heatmaps are TPM zscore
heatmap.label <- "Z"
dim(dfPlotHeatmapLog2TpmRef)
gc()
libraryVector <-
c("ggplot2", "reshape2", "dplyr", "ComplexHeatmap", "UpSetR")
sapply(libraryVector, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
#!/usr/bin/env/R
# Author: Sean Maden
#
# Run K5 experiments on ABIS-seq data
#
#
#
#
#
#
#
libv <- c("tidyr", "lute")
sapply(libv, library, character.only = TRUE)
source("./scripts/03_k5/00_param.R")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
#!/usr/bin/env/R
# Author: Sean Maden
#
# Run K5 experiments on ABIS-seq data
#
#
#
#
#
#
#
libv <- c("tidyr", "lute")
sapply(libv, library, character.only = TRUE)
source("./scripts/03_k5/00_param.R")
#-----
# load
#-----
load("./env/02_abisseq/01_abisseq_script.RData")
load("./env/02_abisseq/02_proportions_s13_script.RData")
source("./source/lute_experiment.R")
source("./source/cell_mappings_helpers.R")
#------------------
# map k5 cell types
#------------------
vectorCellTypeMap <-
c("T", "B", "Dendrocyte", "Plasma", "Monocyte", "Neutrophil", "NK")
vectorCellTypeStart <- colnames(zref)
mappingsTable <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, returnType = "list")[[1]]
zrefMapped <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, zref,
returnType = "df", summaryOperation = "mean")
# tests -- mappings for reference
#
#
#
# test label Monocyte
mappedLabel <- "Monocyte"
# test gene FXYD6, label Monocyte
geneName <- "FXYD6"
zrefMapped[geneName,mappedLabel]==rowMeans(
zref[,which(colnames(zref) %in% mappingsTable[mappingsTable[,2]==mappedLabel,1])]
)[geneName]
# test gene NRG1, label Monocyte
geneName <- "NRG1"
zrefMapped[geneName,mappedLabel]==rowMeans(
zref[,which(colnames(zref) %in% mappingsTable[mappingsTable[,2]==mappedLabel,1])]
)[geneName]
#
# test label Plasma
mappedLabel <- "Plasma"
# test gene FXYD6, label Plasma
geneName <- "FXYD6"
zrefMapped[geneName,mappedLabel]==
zref[,which(colnames(zref) %in%
mappingsTable[mappingsTable[,2]==mappedLabel,1])][
which(rownames(zref)==geneName)]
# test gene NRG1, label Plasma
geneName <- "NRG1"
zrefMapped[geneName,mappedLabel]==
zref[,which(colnames(zref) %in%
mappingsTable[mappingsTable[,2]==mappedLabel,1])][
which(rownames(zref)==geneName)]
# parse true proportions
#
#
#
# format from supplement
trueProportionsStart <- fc.proportions
rownames(trueProportionsStart) <- sampleNames <- fc.proportions[,1]
trueProportionsStart <- trueProportionsStart[,c(2:ncol(trueProportionsStart))]
trueProportionsStart <- trueProportionsStart[
,colnames(trueProportionsStart) %in% colnames(zref)]
# get fractions <1
trueProportionsStart <- t(apply(
trueProportionsStart, 1, function(ri){ri/sum(ri)}))
trueProportionsStart <- as.data.frame(trueProportionsStart)
rownames(trueProportionsStart) <- sampleNames
# map labels
trueproportionsMapped <- cellLabelMappings(
vectorCellTypeMap, colnames(trueProportionsStart),
trueProportionsStart, returnType = "df", summaryOperation = "sum")
trueproportionsMapped <- trueproportionsMapped[
,!colnames(trueproportionsMapped)=="NA"]
# get fractions <1
trueproportionsMapped <- t(apply(
trueproportionsMapped, 1, function(ri){ri/sum(ri)}))
trueproportionsMapped <- as.data.frame(trueproportionsMapped)
rownames(trueproportionsMapped) <- sampleNames
# tests -- proportions
#
#
# test original proportions table
length(which(rowSums(trueProportionsStart)==1))==
nrow(trueProportionsStart)
#
# test new proportions table
length(which(round(rowSums(trueproportionsMapped),1)==1))==
nrow(trueproportionsMapped)
# parse cell type sizes
#
#
#
#
cellFactorsOriginal <- matrix(df.tall$s.cell.size,nrow=1)
colnames(cellFactorsOriginal) <- df.tall$cell.type
cellFactorsOriginal <- as.data.frame(cellFactorsOriginal)
dfCellScaleFactors <- cellLabelMappings(
vectorCellTypeMap=vectorCellTypeMap,
vectorCellTypeStart=cellFactorsOriginal$cellTypesOriginal,
dfToMap=cellFactorsOriginal, returnType = "df",
summaryOperation = "mean"
)
cellScaleFactors <- as.numeric(dfCellScaleFactors)
names(cellScaleFactors) <- colnames(dfCellScaleFactors)
cellScaleFactors <- cellScaleFactors[!names(cellScaleFactors)=="NA"]
# test
#
#
#---------------
# run experiment
#---------------
bulkExpression <- as.matrix(assays(se)[["tpm"]])
bulkExpression <- bulkExpression[
rownames(bulkExpression) %in% rownames(zref),]
colnames(bulkExpression) <- gsub("_.*", "", colnames(bulkExpression))
referenceExpression <- zrefMapped
referenceExpression <- referenceExpression[
rownames(referenceExpression) %in% rownames(bulkExpression),]
trueCellTypeProportions <- trueproportionsMapped
colnames(trueCellTypeProportions) <-
paste0(colnames(trueCellTypeProportions), ".true")
trueCellTypeProportions$sample.id <- rownames(trueCellTypeProportions)
# get experiment results
#experimentList <- newExperimentList(
#  referenceExpression=referenceExpression,
#  trueCellTypeProportions=trueCellTypeProportions,
#  cellScaleFactors=cellScaleFactors,
#  bulkExpression=bulkExpression,
#  trueCellTypeProportionsSource="Flow cytometry",
#  typemarkerAlgorithmName=NULL
#)
#experimentResults <- evaluateExperiment(
#  experimentList, TRUE
#)
#--------------------------
#
#--------------------------
log2TpmReference <-
apply(
tpmReference, 2,
function(cellName){
log2(cellName+1)}) %>% as.data.frame()
#--------------------------
# get the expression tables
#--------------------------
tpmReference <- zref
# list quantile results
#
#
getQuantileTablesFromReferenceExpression(
tpmReference, "TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
scaleTpmReference, "Z TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
log2TpmReference, "log2 TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
scaleLog2TpmZref, "Z log2 TPM", 10, seq(0,1,0.1)
)[[3]]
dim(scaleLog2TpmZref)
gc()
gc()
gc()
libv <- c("tidyr", "lute")
sapply(libv, library, character.only = TRUE)
source("./scripts/03_k5/00_param.R")
load("./env/02_abisseq/01_abisseq_script.RData")
load("./env/02_abisseq/02_proportions_s13_script.RData")
source("./source/lute_experiment.R")
source("./source/cell_mappings_helpers.R")
vectorCellTypeMap <-
c("T", "B", "Dendrocyte", "Plasma", "Monocyte", "Neutrophil", "NK")
vectorCellTypeStart <- colnames(zref)
vectorCellTypeMap
mappingsTable <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, returnType = "list")[[1]]
mappingsTable
cellLabelMappings
vectorCellTypeMap <-
c("T", "B", "Dendritic", "Plasma", "Monocyte", "Neutrophil", "NK")
vectorCellTypeStart <- colnames(zref)
zref
head(zref)
mappingsTable <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, returnType = "list")[[1]]
head(mappingsTable)
mappingsTable <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, returnType = "list")[[1]]
mappingsTable[mappingsTable$celltype1 %in% c("mDCs", "pDCs"),2] <- "Dendritic"
mappingsTable
length(unique(mappingsTable$celltype2))
libv <- c("ggplot2", "ComplexHeatmap", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.Rdata")
# heatmap scale label
# heatmaps are TPM zscore
heatmap.label <- "Z"
knitr::kable(mappingsTable)
?aggregate
as.data.frame(table(mappingsTable$celltype2))
ggplot(
as.data.frame(table(mappingsTable$celltype2)), aes(x = Var1)) +
geom_barplot(stat = "identity")
as.data.frame(table(mappingsTable$celltype2))
ggplot(
as.data.frame(table(mappingsTable$celltype2)), aes(x = Var1, y = Freq)) +
geom_barplot(stat = "identity")
libv <- c("ggplot2", "ComplexHeatmap", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.Rdata")
# heatmap scale label
# heatmaps are TPM zscore
heatmap.label <- "Z"
ggplot(
as.data.frame(table(mappingsTable$celltype2)), aes(x = Var1, y = Freq)) +
geom_barplot(stat = "identity")
ggplot(
as.data.frame(table(mappingsTable$celltype2)), aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity")
#!/usr/bin/env/R
# Author: Sean Maden
#
# Run experiments using reduced cell type counts from ABIS-seq reference.
#
#
#
#
#
#
#
libv <- c("tidyr", "lute")
sapply(libv, library, character.only = TRUE)
source("./scripts/03_k5/00_param.R")
#-----
# load
#-----
load("./env/02_abisseq/01_abisseq_script.RData")
load("./env/02_abisseq/02_proportions_s13_script.RData")
source("./source/lute_experiment.R")
source("./source/cell_mappings_helpers.R")
#------------------
# map k5 cell types
#------------------
# makes the mappings from total cell types to reduced cell types
# starts with abis-seq reference of
vectorCellTypeMap <-
c("T", "B", "Dendritic", "Plasma", "Monocyte", "Neutrophil", "NK")
vectorCellTypeStart <- colnames(zref)
mappingsTable <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, returnType = "list")[[1]]
mappingsTable[mappingsTable$celltype1 %in% c("mDCs", "pDCs"),2] <- "Dendritic"
zrefMapped <- cellLabelMappings(
vectorCellTypeMap, vectorCellTypeStart, zref,
returnType = "df", summaryOperation = "mean")
# tests -- mappings for reference
#
#
#
# test label Monocyte
mappedLabel <- "Monocyte"
# test gene FXYD6, label Monocyte
geneName <- "FXYD6"
zrefMapped[geneName,mappedLabel]==rowMeans(
zref[,which(colnames(zref) %in% mappingsTable[mappingsTable[,2]==mappedLabel,1])]
)[geneName]
# test gene NRG1, label Monocyte
geneName <- "NRG1"
zrefMapped[geneName,mappedLabel]==rowMeans(
zref[,which(colnames(zref) %in% mappingsTable[mappingsTable[,2]==mappedLabel,1])]
)[geneName]
#
# test label Plasma
mappedLabel <- "Plasma"
# test gene FXYD6, label Plasma
geneName <- "FXYD6"
zrefMapped[geneName,mappedLabel]==
zref[,which(colnames(zref) %in%
mappingsTable[mappingsTable[,2]==mappedLabel,1])][
which(rownames(zref)==geneName)]
# test gene NRG1, label Plasma
geneName <- "NRG1"
zrefMapped[geneName,mappedLabel]==
zref[,which(colnames(zref) %in%
mappingsTable[mappingsTable[,2]==mappedLabel,1])][
which(rownames(zref)==geneName)]
# parse true proportions
#
#
#
# format from supplement
trueProportionsStart <- fc.proportions
rownames(trueProportionsStart) <- sampleNames <- fc.proportions[,1]
trueProportionsStart <- trueProportionsStart[,c(2:ncol(trueProportionsStart))]
trueProportionsStart <- trueProportionsStart[
,colnames(trueProportionsStart) %in% colnames(zref)]
# get fractions <1
trueProportionsStart <- t(apply(
trueProportionsStart, 1, function(ri){ri/sum(ri)}))
trueProportionsStart <- as.data.frame(trueProportionsStart)
rownames(trueProportionsStart) <- sampleNames
# map labels
trueproportionsMapped <- cellLabelMappings(
vectorCellTypeMap, colnames(trueProportionsStart),
trueProportionsStart, returnType = "df", summaryOperation = "sum")
trueproportionsMapped <- trueproportionsMapped[
,!colnames(trueproportionsMapped)=="NA"]
# get fractions <1
trueproportionsMapped <- t(apply(
trueproportionsMapped, 1, function(ri){ri/sum(ri)}))
trueproportionsMapped <- as.data.frame(trueproportionsMapped)
rownames(trueproportionsMapped) <- sampleNames
# tests -- proportions
#
#
# test original proportions table
length(which(rowSums(trueProportionsStart)==1))==
nrow(trueProportionsStart)
#
# test new proportions table
length(which(round(rowSums(trueproportionsMapped),1)==1))==
nrow(trueproportionsMapped)
# parse cell type sizes
#
#
#
#
cellFactorsOriginal <- matrix(df.tall$s.cell.size,nrow=1)
colnames(cellFactorsOriginal) <- df.tall$cell.type
cellFactorsOriginal <- as.data.frame(cellFactorsOriginal)
dfCellScaleFactors <- cellLabelMappings(
vectorCellTypeMap=vectorCellTypeMap,
vectorCellTypeStart=cellFactorsOriginal$cellTypesOriginal,
dfToMap=cellFactorsOriginal, returnType = "df",
summaryOperation = "mean"
)
cellScaleFactors <- as.numeric(dfCellScaleFactors)
names(cellScaleFactors) <- colnames(dfCellScaleFactors)
cellScaleFactors <- cellScaleFactors[!names(cellScaleFactors)=="NA"]
# test
#
#
#---------------
# run experiment
#---------------
bulkExpression <- as.matrix(assays(se)[["tpm"]])
bulkExpression <- bulkExpression[
rownames(bulkExpression) %in% rownames(zref),]
colnames(bulkExpression) <- gsub("_.*", "", colnames(bulkExpression))
referenceExpression <- zrefMapped
referenceExpression <- referenceExpression[
rownames(referenceExpression) %in% rownames(bulkExpression),]
trueCellTypeProportions <- trueproportionsMapped
colnames(trueCellTypeProportions) <-
paste0(colnames(trueCellTypeProportions), ".true")
trueCellTypeProportions$sample.id <- rownames(trueCellTypeProportions)
# get experiment results
#experimentList <- newExperimentList(
#  referenceExpression=referenceExpression,
#  trueCellTypeProportions=trueCellTypeProportions,
#  cellScaleFactors=cellScaleFactors,
#  bulkExpression=bulkExpression,
#  trueCellTypeProportionsSource="Flow cytometry",
#  typemarkerAlgorithmName=NULL
#)
#experimentResults <- evaluateExperiment(
#  experimentList, TRUE
#)
#--------------------------
#
#--------------------------
log2TpmReference <-
apply(
tpmReference, 2,
function(cellName){
log2(cellName+1)}) %>% as.data.frame()
#--------------------------
# get the expression tables
#--------------------------
tpmReference <- zref
# list quantile results
#
#
getQuantileTablesFromReferenceExpression(
tpmReference, "TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
scaleTpmReference, "Z TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
log2TpmReference, "log2 TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
scaleLog2TpmZref, "Z log2 TPM", 10, seq(0,1,0.1)
)[[3]]
getQuantileTablesFromReferenceExpression(
tpmReference, "TPM", 10, seq(0,1,0.1)
)
tpmQunatilesList <- getQuantileTablesFromReferenceExpression(
tpmReference, "TPM", 10, seq(0,1,0.1)
)
tpmReference <- zref
# list quantile results
#
#
tpmQuantilesList <- getQuantileTablesFromReferenceExpression(
tpmReference, "TPM", 10, seq(0,1,0.1)
)
scaleTpmQuantilesList <- getQuantileTablesFromReferenceExpression(
scaleTpmReference, "Z TPM", 10, seq(0,1,0.1)
)
log2TpmQunatilesList <- getQuantileTablesFromReferenceExpression(
log2TpmReference, "log2 TPM", 10, seq(0,1,0.1)
)
scaleTpmQuantilesList <- getQuantileTablesFromReferenceExpression(
scaleLog2TpmZref, "Z log2 TPM", 10, seq(0,1,0.1)
)
