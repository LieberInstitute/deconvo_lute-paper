attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = genes.format,
mart = mart
)
rowdata$ensembl_transcript_id <- rownames(tpm)
head(rowdata)
dim(rowdata)
length(unique(genes.format))
head(genes.format)
class(rowdata)
# get final rowdata
rd.out <- rbind(rowdata, df.append)
# get outersect ids df
id.exclude <- genes.format[!genes.format %in% rowdata$ensembl_gene_id]
df.append <- data.frame(ensembl_gene_id = gsub("\\..*", "", id.exclude))
df.append$hgnc_symbol <- "NA"
df.append$ensembl_transcript_id <- id.exclude
rownames(df.append) <- id.exclude
# get final rowdata
rd.out <- rbind(rowdata, df.append)
dim(rowdata)
dim(df.append)
head(df.append)
head(rowdata)
transcript.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", transcript.id.vector)
names(transcript.id.vector) <- gene.id.vector
length(transcript.id.vector[gene.id.vector])
length(transcript.id.vector)
rd.maps <- rowdata
length(transcript.id.vector[rd.maps$ensembl_gene_id])
dim(rowdata)
rd.maps$ensembl_transcript_id <- transcript.id.vector[rd.maps$ensembl_gene_id]
head(rd.maps)
id.exclude <- gene.id.vector[!gene.id.vector %in% rd.maps$ensembl_gene_id]
rd.append <- data.frame(ensembl_gene_id = gsub("\\..*", "", id.exclude))
rd.append$hgnc_symbol <- "NA"
rd.append$ensembl_transcript_id <- id.exclude
rownames(rd.append) <- id.exclude
rd.out <- rbind(rowdata, df.append)
rd.out <- rbind(rd.maps, rd.append)
head(rd.out)
dim(rd.out)
rownames(rowdata) <- rd.out$ensembl_transcript_id
rd.out <- rbind(rd.maps, rd.append)
rownames(rd.out) <- rd.out$ensembl_transcript_id
dim(rd.out)
head(rd.out)
class(rd.out)
rowData(se) <- rd.out
head(rowData(se))
head(rownames(se))
identical(rownames(rowData(se)), rownames(assays(se)[["tpm"]]))
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Read in TPM expression data.
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
tpm.path <- "./data/GSE107011_Processed_data_TPM/GSE107011_Processed_data_TPM.txt"
tpm <- read.table(tpm.path)
#--------------------
# format as se object
#--------------------
se <- SummarizedExperiment(assays = list(tpm = tpm))
#------------------
# get pheno/coldata
#------------------
cd <- colnames(tpm)
table(gsub(".*_", "", cd))
cd <- data.frame(sample.id = cd,
source.id = gsub("_.*", "", cd),
sample.type = gsub(".*_", "", cd))
cd$tissue.type <- ifelse(cd$sample.type=="PBMC", "PBMC", "immune_cell")
cd$tissue.type.detail <- ifelse(cd$sample.type=="PBMC", "PBMC", cd$sample.type)
# append summary statistics
tpm <- as.matrix(tpm)
cd$library.size <- colSums(tpm)
cd$mean.expression <- colMeans(tpm)
cd$median.expression <- colMedians(tpm)
cd$sd.expression <- colSds(tpm)
cd$num.na.expression <- colAnyNAs(tpm)
cd$num.zero.expression <- unlist(apply(tpm, 2, function(ci){length(ci[ci==0])}))
rownames(cd) <- cd[,1]
# format summarized experiment
colData(se) <- DataFrame(cd)
#-----------------
# map gene symbols
#-----------------
# get gene input vector
transcript.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", transcript.id.vector)
names(transcript.id.vector) <- gene.id.vector
# map ids
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
rd.maps <- getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = gene.id.vector,
mart = mart
)
rd.maps$ensembl_transcript_id <- transcript.id.vector[rd.maps$ensembl_gene_id]
# get outersect ids df
id.exclude <- gene.id.vector[!gene.id.vector %in% rd.maps$ensembl_gene_id]
rd.append <- data.frame(ensembl_gene_id = gsub("\\..*", "", id.exclude))
rd.append$hgnc_symbol <- "NA"
rd.append$ensembl_transcript_id <- id.exclude
rownames(rd.append) <- id.exclude
# get final rowdata
rd.out <- rbind(rd.maps, rd.append)
rownames(rd.out) <- rd.out$ensembl_transcript_id
head(rd.out)
summary(as.data.frame(table(id.exclude)))
id.exclude
head(id.exclude)
# get outersect ids df
id.exclude <- gene.id.vector[!gene.id.vector %in% rd.maps$ensembl_gene_id]
rd.append <- data.frame(ensembl_gene_id = gsub("\\..*", "", id.exclude))
rd.append$hgnc_symbol <- "NA"
rd.append$ensembl_transcript_id <- id.exclude
rownames(rd.append) <- rd.append$ensembl_transcript_id
# get final rowdata
rd.out <- rbind(rd.maps, rd.append)
rownames(rd.out) <- rd.out$ensembl_transcript_id
rd.out <- rbind(rd.maps, rd.append)
head(rd.out)
rownames(rd.out) <- rd.out$ensembl_transcript_id
summary(as.data.frame(table(rd.out$ensembl_transcript_id)))
dim(se)
rd.maps <- getBM(
attributes = c('ensembl_transcript_id_version', 'hgnc_symbol'),
filters = 'ensembl_transcript_id_version',
values = gene.id.vector,
mart = mart
)
head(rd.maps)
rd.maps <- getBM(
attributes = c('ensembl_transcript_id_version', 'hgnc_symbol'),
filters = 'ensembl_transcript_id_version',
values = transcript.id.vector,
mart = mart
)
head(rd.maps)
head(transcript.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_transcript_id_version', 'hgnc_symbol'),
filters = 'ensembl_transcript_id_version',
values = as.character(transcript.id.vector),
mart = mart
)
rd.maps <- getBM(
attributes = c('ensembl_transcript_id_version', 'hgnc_symbol'),
filters = 'ensembl_transcript_id_version',
values = as.character(transcript.id.vector),
mart = mart
)
head(rd.maps)
as.character(transcript.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_transcript_id_version', 'hgnc_symbol'),
filters = 'ensembl_transcript_id_version',
values = as.character(transcript.id.vector),
mart = mart
)
rd.maps
rd.maps <- getBM(
attributes = c('ensembl_gene_id_version', 'hgnc_symbol'),
filters = 'ensembl_gene_id_version',
values = as.character(transcript.id.vector),
mart = mart
)
head(rd.maps)
dim(rd.maps)
summary(as.data.frame(transcript.id.vector))
summary(as.data.frame(table(transcript.id.vector)))
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(tpm) <- rd.new
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
head(r.dnew)
head(rd.new)
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(tpm) <- DataFrame(rd.new)
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(se) <- DataFrame(rd.new)
head(rowData(se))
head(rd.maps)
rownames(rd.maps) <- rd.maps$ensembl_gene_id_version
dim(rd.maps[rd.maps[,1]==rownames(se),])
head(rownames(se))
head(rd.maps)
class(rd.maps[,1])
rd.maps[,1]==rownames(se)
head(rd.maps)
head(rownames(se))
which(rd.maps[,1]==rownames(se))
dim(rd.maps)
gene.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", gene.id.vector)
# map gene ids to symbols
gene.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", gene.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = as.character(gene.id.vector),
mart = mart
)
head(rd.maps)
rownames(rd.maps) <- rd.maps[,1]
dim(rd.maps)
head(rd.maps[rd.maps[,1]==head(rownames(se)),])
head(rd.maps[rd.maps[,1]==head(gsub("\\..*", "", rownames(se))),])
head(gsub("\\..*", "", rownames(se)))
rd.symbol <- rd.maps[,2]
names(rd.symbol) <- rd.maps[,1]
rd.symbol <- rd.symbol[gsub("\\..*", "", rownames(se))]
length(rd.symbol)
rd.symbol <- rd.maps[,2]
names(rd.symbol) <- rd.maps[,1]
rd.symbol <- rd.symbol[gsub("\\..*", "", rownames(se))]
length(rd.symbol)
dim(se)
head(rd.symbol)
# map symbols for rowdata
rd.symbol <- rd.maps[,2]
names(rd.symbol) <- rd.maps[,1]
rd.symbol <- rd.symbol[gsub("\\..*", "", rownames(se))]
length(rd.symbol)
dim(se)
rowData(se)$gene_symbol <- rd.symbol
head(rowData(se))
gc()
gc()
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Read in TPM expression data.
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
tpm.path <- "./data/GSE107011_Processed_data_TPM/GSE107011_Processed_data_TPM.txt"
tpm <- read.table(tpm.path)
#--------------------
# format as se object
#--------------------
se <- SummarizedExperiment(assays = list(tpm = tpm))
#------------------
# get pheno/coldata
#------------------
cd <- colnames(tpm)
table(gsub(".*_", "", cd))
cd <- data.frame(sample.id = cd,
source.id = gsub("_.*", "", cd),
sample.type = gsub(".*_", "", cd))
cd$tissue.type <- ifelse(cd$sample.type=="PBMC", "PBMC", "immune_cell")
cd$tissue.type.detail <- ifelse(cd$sample.type=="PBMC", "PBMC", cd$sample.type)
# append summary statistics
tpm <- as.matrix(tpm)
cd$library.size <- colSums(tpm)
cd$mean.expression <- colMeans(tpm)
cd$median.expression <- colMedians(tpm)
cd$sd.expression <- colSds(tpm)
cd$num.na.expression <- colAnyNAs(tpm)
cd$num.zero.expression <- unlist(apply(tpm, 2, function(ci){length(ci[ci==0])}))
rownames(cd) <- cd[,1]
# format summarized experiment
colData(se) <- DataFrame(cd)
#-----------------
# map gene symbols
#-----------------
# begin rowdata
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(se) <- DataFrame(rd.new)
# map gene ids to symbols
gene.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", gene.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = as.character(gene.id.vector),
mart = mart
)
#!/usr/bin/env R
# Author: Sean Maden
#
# Read in TPM expression data.
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
tpm.path <- "./data/GSE107011_Processed_data_TPM/GSE107011_Processed_data_TPM.txt"
tpm <- read.table(tpm.path)
#--------------------
# format as se object
#--------------------
se <- SummarizedExperiment(assays = list(tpm = tpm))
#------------------
# get pheno/coldata
#------------------
cd <- colnames(tpm)
table(gsub(".*_", "", cd))
cd <- data.frame(sample.id = cd,
source.id = gsub("_.*", "", cd),
sample.type = gsub(".*_", "", cd))
cd$tissue.type <- ifelse(cd$sample.type=="PBMC", "PBMC", "immune_cell")
cd$tissue.type.detail <- ifelse(cd$sample.type=="PBMC", "PBMC", cd$sample.type)
# append summary statistics
tpm <- as.matrix(tpm)
cd$library.size <- colSums(tpm)
cd$mean.expression <- colMeans(tpm)
cd$median.expression <- colMedians(tpm)
cd$sd.expression <- colSds(tpm)
cd$num.na.expression <- colAnyNAs(tpm)
cd$num.zero.expression <- unlist(apply(tpm, 2, function(ci){length(ci[ci==0])}))
rownames(cd) <- cd[,1]
# format summarized experiment
colData(se) <- DataFrame(cd)
#-----------------
# map gene symbols
#-----------------
# begin rowdata
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(se) <- DataFrame(rd.new)
# map gene ids to symbols
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
gene.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", gene.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = as.character(gene.id.vector),
mart = mart
)
#!/usr/bin/env R
# Author: Sean Maden
#
# Read in TPM expression data.
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
tpm.path <- "./data/GSE107011_Processed_data_TPM/GSE107011_Processed_data_TPM.txt"
tpm <- read.table(tpm.path)
#--------------------
# format as se object
#--------------------
se <- SummarizedExperiment(assays = list(tpm = tpm))
#------------------
# get pheno/coldata
#------------------
cd <- colnames(tpm)
table(gsub(".*_", "", cd))
cd <- data.frame(sample.id = cd,
source.id = gsub("_.*", "", cd),
sample.type = gsub(".*_", "", cd))
cd$tissue.type <- ifelse(cd$sample.type=="PBMC", "PBMC", "immune_cell")
cd$tissue.type.detail <- ifelse(cd$sample.type=="PBMC", "PBMC", cd$sample.type)
# append summary statistics
tpm <- as.matrix(tpm)
cd$library.size <- colSums(tpm)
cd$mean.expression <- colMeans(tpm)
cd$median.expression <- colMedians(tpm)
cd$sd.expression <- colSds(tpm)
cd$num.na.expression <- colAnyNAs(tpm)
cd$num.zero.expression <- unlist(apply(tpm, 2, function(ci){length(ci[ci==0])}))
rownames(cd) <- cd[,1]
# format summarized experiment
colData(se) <- DataFrame(cd)
#-----------------
# map gene symbols
#-----------------
# begin rowdata
rd.new <- data.frame(ensembl_gene_id_version = rownames(tpm))
rownames(rd.new) <- rd.new[,1]
rowData(se) <- DataFrame(rd.new)
# map gene ids to symbols
mart.ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
gene.id.vector <- rownames(tpm)
gene.id.vector <- gsub("\\..*", "", gene.id.vector)
rd.maps <- getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = as.character(gene.id.vector),
mart = mart.ensembl
)
# map symbols for rowdata
rd.symbol <- rd.maps[,2]
names(rd.symbol) <- rd.maps[,1]
rd.symbol <- rd.symbol[gsub("\\..*", "", rownames(se))]
length(rd.symbol)
dim(se)
rowData(se)$gene_symbol <- rd.symbol
#-----
# save
#-----
save.image("./env/01_tpm_summaries/01_read_script.RData")
gc()
gc()
libv <- c("lute")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <- read.csv("./data/zref_abisseq.csv")
ptrue <- read.csv("./data/ptrue_abis.csv")
load("./env/01_tpm_summaries/01_read_script.RData")
#--------------
# format inputs
#--------------
# zref
rownames(zref) <- zref[,1]
head(zred)
head(zred)
head(zref)
rownames(zref) <- zref[,1]
which(zref[,1]=="12:00 AM")
zref <- zref[!rownames(zref)=="12:00 AM",]
rownames(zref) <- zref[,1]
summary(as.data.frame(zref[,1]))
head(zref[,1])
summary(as.data.frame(table(zref[,1])))
zref <- zref[!zref[,1]=="12:00 AM",]
rownames(zref) <- zref[,1]
zref <- zref[,c(2:ncol(zref))]
head(zref)
head(rowData(se))
rownames(se) <- rowData(se)$gene_symbol
list.result <- lute(
z = as.matrix(zref),
y = assays(se)[["tpm"]],
typemarker.algorithm = NULL
)
rownames(se) <- rowData(se)$gene_symbol
rownames(se) <- rowData(se)$gene_symbol
filter.rows <- !(duplicated(rownames(se))|is.na(rownames(se)))
table(filter.rows)
head(duplicated(rownames(se)))
# se
rownames(se) <- rowData(se)$gene_symbol
head(rownames(se))
summary(duplicated(rownames(se)))
filter.rows <- !(duplicated(rownames(se))|is.na(rownames(se)))
table(filter.rows)
se <- se[filter.rows,]
dim(se)
list.result <- lute(
z = as.matrix(zref),
y = assays(se)[["tpm"]],
typemarker.algorithm = NULL
)
list.result <- lute(
z = as.matrix(zref),
y = se,
assay.name = 'tpm',
typemarker.algorithm = NULL
)
y
assays(se)[["tpm"]]
class(assays(se)[["tpm"]])
list.result <- lute(
z = as.matrix(zref),
y = as.matrix(assays(se)[["tpm"]]),
assay.name = 'tpm',
typemarker.algorithm = NULL
)
list.result
dim(list.result)
attributes(list.result)
list.result@deconvolution.results
list.result[["deconvolution.results"]]
dim(list.result[["deconvolution.results"]])
dim(list.result[["deconvolution.results"]]@predictions.table)
z
head(z)
zref
head(zref)
colnames(zref)
colnames(se)
colnames(zre)
colnames(zref)
unique(se$sample.type)
head(rownames(se))
dim(se)
se <- se[rownames(se) %in% rownames(zref),]
dim(se)
vector.sample.types
vector.sample.types <- unique(se$sample.type)
vector.sample.types
colnames(zre)
colnames(zref)
# filter se marker genes
se <- se[rownames(se) %in% rownames(zref),]
