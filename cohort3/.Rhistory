hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
cellTypeTrue<-colnames(zTpm)==cellType
cellType=colnames(zTpm)[1]
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
summary(tpmAbsDiff)
head(tpmAbsDiff)
head(tpmAbsDiff[order(tpmAbsDiff)])
# filter
vectorGenes130 <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
) %>% unlist()
markersPerType<-40
vectorGenes130 <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
) %>% unlist()
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
markersPerType<-40
vectorGenes130 <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
) %>% unlist()
vectorGenes130
length(vectorGenes130)
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# load
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
# format
zTpm <- zTpm[!duplicated(zTpm[,1]),]
# rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
zTpm <- as.matrix(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
# filter
markersPerType<-40
vectorGenes130 <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
) %>% unlist()
# heatmaps
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
vectorGenes130
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
# format
zTpm <- zTpm[!duplicated(zTpm[,1]),]
rownames(zTpm)<-zTpm[,1]
# rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
zTpm <- as.matrix(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
# filter
markersPerType<-40
listMarkers <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(zTpm)
zTpm <- zTpm[!duplicated(zTpm[,1]),]
rownames(zTpm)<-zTpm[,1]
# rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
zTpm <- as.matrix(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
# filter
markersPerType<-40
listMarkers <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(zTpm)
# tables for heatmaps
zTpmFilter<-zTpm[unlist(listMarkers),]
zTpmTransformedFilter <-zTpmTransformed[unlist(listMarkers),]
dim(zTpmTransformedFilter)
dim(zTpmFilter)
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# load
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
# format
zTpm <- zTpm[!duplicated(zTpm[,1]),]
rownames(zTpm)<-zTpm[,1]
# rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
zTpm <- as.matrix(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
# filter
markersPerType<-20
listMarkers <-lapply(
colnames(zTpm), function(cellType){
cellTypeTrue<-colnames(zTpm)==cellType
cellTypeFalse<-!colnames(zTpm)==cellType
tpmTrue<-zTpm[,cellTypeTrue]
tpmFalse<-apply(zTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(zTpm)
# tables for heatmaps
zTpmFilter<-zTpm[unlist(listMarkers),]
zTpmTransformedFilter<-zTpmTransformed[unlist(listMarkers),]
dim(zTpmFilter)
dim(zTpmFilter)
Heatmap(zTpmFilter)
?Heatmap
Heatmap(zTpmFilter, row_names_gp = gpar(fontsize=11))
Heatmap(zTpmFilter, row_names_gp = gpar(fontsize=5))
Heatmap(scale(zTpmFilter), Name="Z", row_names_gp = gpar(fontsize=5))
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# param
markersPerType<-20
# load
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
refTpm<-read.csv(csvPath)
# format
refTpm <- refTpm[!duplicated(refTpm[,1]),]
rownames(refTpm)<-refTpm[,1]
# rownames(refTpm) <- paste0("symbol:",refTpm[,1])
refTpm <- refTpm[,seq(2,ncol(refTpm))]
for(c in seq(ncol(refTpm))){refTpm[,c] <- as.numeric(refTpm[,c])}
refTpm <- as.matrix(refTpm)
cellSizes<-apply(as.matrix(refTpm),2,sum)
refTpmTransformed <- lute:::.zstransform(refTpm, cellSizes)
# filter
listMarkers <-lapply(
colnames(refTpm), function(cellType){
cellTypeTrue<-colnames(refTpm)==cellType
cellTypeFalse<-!colnames(refTpm)==cellType
tpmTrue<-refTpm[,cellTypeTrue]
tpmFalse<-apply(refTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(refTpm)
# tables for heatmaps
refTpmFilter<-refTpm[unlist(listMarkers),]
refTpmTransformedFilter<-refTpmTransformed[unlist(listMarkers),]
# heatmaps
Heatmap(refTpm)
Heatmap(refTpmTransformed)
save.image(file="./env/04_transform/01_transform_script.RData")
Heatmap(scale(zTpmFilter), Name="Z", row_names_gp = gpar(fontsize=5))
zTpmFilter
head(zTpmFilter)
scale(zTpmFilter)
dim(scale(zTpmFilter))
class(scale(zTpmFilter))
Heatmap(scale(zTpmFilter), name="Z", row_names_gp = gpar(fontsize=5))
Heatmap(scale(refTpmFilter), name="Z", row_names_gp = gpar(fontsize=5))
Heatmap(scale(refTpmFilter), name="Z_{TPM}", row_names_gp = gpar(fontsize=5))
Heatmap(scale(refTpmFilter),name="Z_{TPM}",row_names_gp=gpar(fontsize=5))
knitr::opts_chunk$set(echo = TRUE)
library(ComplexHeatmap)
library(circlize)
set.seed(123)
pvalue = 10^-runif(10, min = 0, max = 3)
is_sig = pvalue < 0.01
pch = rep("*", 10)
pch[!is_sig] = NA
# color mapping for -log10(pvalue)
pvalue_col_fun = colorRamp2(c(0, 2, 3), c("green", "white", "red"))
ha = HeatmapAnnotation(
pvalue = anno_simple(-log10(pvalue), col = pvalue_col_fun, pch = pch),
annotation_name_side = "left")
ht = Heatmap(matrix(rnorm(100), 10), name = "mat", top_annotation = ha)
# now we generate two legends, one for the p-value
# see how we define the legend for pvalue
lgd_pvalue = Legend(title = "p-value", col_fun = pvalue_col_fun, at = c(0, 1, 2, 3),
labels = c("1", "0.1", "0.01", "0.001"))
# and one for the significant p-values
lgd_sig = Legend(pch = "*", type = "points", labels = "< 0.01")
# these two self-defined legends are added to the plot by `annotation_legend_list`
draw(ht, annotation_legend_list = list(lgd_pvalue, lgd_sig))
set.seed(123)
ha = HeatmapAnnotation(
pvalue = ,
annotation_name_side = "left")
sample(10,4)
heatmapTable<-matrix(sample(10,4))
heatmap(heatmapTable)
Heatmap(heatmapTable)
heatmapTable<-matrix(sample(10,4),nrow=2)
heatmap(heatmapTable)
heatmapTable
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapAnno<-HeatmapAnnotation(anno=list(label1=c("a"="red","b"="blue")))
HeatmapAnnotation(anno=list(label1=c("a"="red","b"="blue")))
HeatmapAnnotation(
anno=list(
label1=c("a"="red","b"="blue")))
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapAnno<-HeatmapAnnotation(
label1=c("a","b"),
anno=list(
label1=c("a"="red","b"="blue")))
HeatmapAnnotation(
label1=c("a","b"),
anno=list(
label1=c("a"="red","b"="blue")),
gp=gpar(col="black")
)
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapAnno<-HeatmapAnnotation(
label1=c("a","b"),
col=list(label1=c("a"="red","b"="blue")),
gp=gpar(col="black")
)
heatmap(heatmapTable)
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapTopAnno<-HeatmapAnnotation(
label1=c("a","b"),
col=list(label1=c("a"="red","b"="blue")),
gp=gpar(col="black")
)
heatmap(heatmapTable,top_annotation=heatmapTopAnno)
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapTopAnno<-HeatmapAnnotation(
label1=c("a","b"),
col=list(label1=c("a"="red","b"="blue")),
gp=gpar(col="black")
)
Heatmap(heatmapTable,top_annotation=heatmapTopAnno)
dim(refTpmFilter)
head(colnames(refTpmFilter))
colours
colours[1:10]
colours[1]
colours()
colours()[1:10]
HeatmapAnnotation(
label1=cellTypeVector,
col=list(cellType=paste0(cellTypeVector,"=",colours()[sample(cellTypeCount)])),
gp=gpar(col="black")
)
colnames(heatmapTable)<-c("a","b")
cellTypeVector<-colnames(refTpmFilter)
cellTypeCount<-length(cellTypeVector)
heatmapTopAnno<-HeatmapAnnotation(
label1=cellTypeVector,
col=list(cellType=paste0(cellTypeVector,"=",colours()[sample(cellTypeCount)])),
gp=gpar(col="black")
)
heatmapTopAnno
Heatmap(scale(refTpmFilter),name="Z_{TPM}",top_annotation=heatmapTopAnno)
names(listMarkers)
sapply(names(listMarkers),function(cellType){
rep(cellType,length(listMarkers[[cellType]]))})
unlist(lapply(names(listMarkers),function(cellType){
rep(cellType,length(listMarkers[[cellType]]))
}))
paste0(cellTypeVector,"=",colours()[sample(cellTypeCount)]))
paste0(cellTypeVector,"=",colours()[sample(cellTypeCount)])
dfCellColors<-data.frame(cellTypeVector=cellTypeVector,
cellTypeColor=colours()[sample(cellTypeCount)])
dfCellColors
paste0(dfCellColors[,1],"=",dfCellColors[,2])
set.seed(0)
# set cell type colors
dfCellColors<-data.frame(cellTypeVector=cellTypeVector,
cellTypeColor=colours()[sample(cellTypeCount)])
# top annotation
cellTypeVector<-colnames(refTpmFilter)
cellTypeCount<-length(cellTypeVector)
heatmapTopAnno<-HeatmapAnnotation(
cellType=cellTypeVector,
col=list(cellType=paste0(dfCellColors[,1],"=",dfCellColors[,2])),
gp=gpar(col="black")
)
cellTypeMarkerVector
cellTypeMarkerVector<-unlist(
lapply(names(listMarkers),function(cellType){
rep(cellType,length(listMarkers[[cellType]]))
}))
cellTypeMarkerVector
unlist(
lapply(names(listMarkers),function(cellType){
rep(dfCellColors[dfCellColors[,1]==cellType,2],
length(listMarkers[[cellType]]))
}))
rowAnnotation(
cellType=cellTypeMarkerVector,
col=list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
))
)
cellTypeMarkerVector<-unlist(
lapply(names(listMarkers),function(cellType){
rep(cellType,length(listMarkers[[cellType]]))
}))
cellTypeMarkerColorVector<-unlist(
lapply(names(listMarkers),function(cellType){
rep(dfCellColors[dfCellColors[,1]==cellType,2],
length(listMarkers[[cellType]]))
}))
heatmapRowAnno<-rowAnnotation(
cellType=cellTypeMarkerVector,
col=list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
))
)
cellTypeMarkerVector
cellTypeMarkerColorVector
length(cellTypeMarkerVector)
length(cellTypeMarkerColorVector)
paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
)
rowAnnotation(
cellType=cellTypeMarkerVector,
col=list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
))
)
list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
))
cellTypeMarkerVector
heatmapRowAnno<-rowAnnotation(
cellType=cellTypeMarkerVector,
col=list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
)),
gp=gpar(col="black")
)
list(cellType=paste0(
cellTypeMarkerVector,"=",cellTypeMarkerColorVector
))
?rowAnnotation
rowAnnotation
?HeatmapAnnotation
