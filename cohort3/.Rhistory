new.plot.name <- "figs1c_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k3_mrb_script.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "figs1d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
setwd("..")
setwd("..")
new.plot.name <- "fig2d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1f_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 4.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/02_k3.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2c_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 6, height = 3, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1e_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/01_k2.RData")
head(dfp.ct)
dim(dfp.ct)
summary(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
summary(dfp.ct$abs.error.noscale)
sd(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
sd(dfp.ct$abs.error.withscale)
head(dfp.ct)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
identical(dfp.tall$glial.abs.error)
identical(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
plot(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k2_mrb_script.RData")
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
packageVersion("lute")
?memory.limit
?install_github
library(devtools)
?install_github
packageVersion(lute)
packageVersion("lute")
packageVersion("lute")
devtools::install_github("metamaden/lute")
?install_version
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files()
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files("./scdc/data")
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
?load
setwd("..")
data <- readRDS("./scdc/data/baron.rds")
dim(data)
data
data
dim(data)
metadata(data)
attributes(data)
phenoData(data)
colData(data)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data/baron.rds"
setwd("..")
list.files(data.path)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data"
setwd("..")
list.files(data.path)
setwd("..")
data <- readRDS(file.path(data.path, "baron.rds"))
qc <- readRDS(file.path(data.path, "qc_baron.rds"))
qc
class(qc)
names(qc)
data
dim(data)
names(qc)
qc$prop.qc
class(qc$prop.qc)
names("qc_baron.rds")
names(qc$prop.qc)
rownames(qc$prop.qc)
dim(qc$prop.qc)
qc$sc.eset.qc
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq", z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq", y.file.name = "MIX3cl__bulkESET.rds")
knitr::kable(df.term)
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
file.path(data.path, paste0(dataset, "_bulkESET.rds"))
data.bulk
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "MIX3cl__bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, "MIX3cl__bulkESET.rds"))
data.bulk
attributes(data.bulk)
phenoData(data.bulk)
as.data.frame(phenoData(data.bulk))
data.bulk@phenoData
data.bulk@phenoData@data
data.bulk@phenoData@varMetadata
data.bulk@phenoData
as.data.frame(data.bulk@phenoData)
data.bulk
experimentData(data.bulk)
ExpressionSet
?ExpressionSet
phenoData(data.bulk)
phenoData(data.bulk)$pdata
dim(data.bulk)
data.sc
colData(data.cs)
colData(data.sc)
phenoData(data.sc)
attributes(phenoData(data.sc))
phenoData(data.sc)@data
head(phenoData(data.sc)@data)
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq",
z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq",
y.file.name = "MIX3cl__bulkESET.rds",
p.true = "6:3:1",
p.true.celltypes = "hbc;MCF7;hf")
knitr::kable(df.term)
library(lute)
?lute
# get example bulk data
y <- get_decon_example_data()$y
# get example sce
sce <- random_sce()[seq(10),]
# get framework results
experiment.results <- lute(sce=sce, y=y, typemarker.algorithm=NULL)
experiment.results
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
libv <- c("ggplot2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/02_abisseq/01_abisseq_script.RData")
df.def <- data.frame(
cell.type = c("B.Naive",
"Basophils.LD",
"MAIT",
"mDCs",
"Monocytes.C",
"Monocytes.NC.I",
"Neutrophils.LD",
"NK",
"pDCs",
"Plasmablasts",
"T.CD4.Naive",
"T.CD8.Memory",
"T.CD8.Naive",
"T.gd.non.Vd2",
"T.gd.Vd2"),
description = c("Naive B-cells",
"Low-density Basophils",
"Mucosal-associated invariant T cells (MAIT)",
"Myeloid Dendritic Cells",
"Monocytes, type C",
"Monocytes, types NC and I combined",
"Low-density Neutrophils",
"Natural Killer",
"Plasmacytoid Dendritic Cells",
"Plasmablasts",
"CD4+ Naive T-cell",
"CD8+ Memory T-cell",
"CD8+ Naive T-cell",
"T lymphocyte, gamma delta, non-Vdelta2",
"T lymphocyte, gamma delta, Vdelta2")
)
knitr::kable(df.def)
message("original:")
summary(df.wide$true.prop.mean.flow.cyto)
message("format:")
summary(df.wide$true.prop.mean.flow.cyto.format)
message("unscaled")
summary(df.tall$mean.unscaled)
message("scaled")
summary(df.tall$mean.scaled)
ggplot(df.tall, aes(x = cell.type, y = s.cell.size)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ylab("Cell size (marker library size)")
ggplot(df.tall, aes(x = cell.type, y = s.cell.size.log)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ylab("Cell size (log10, marker library size)")
plot1 <- ggplot(df.tall, aes(x = mean.unscaled, y = mean.scaled)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot1
plot2 <- ggplot(df.tall, aes(x = mean.unscaled, y = mean.scaled, size = s.cell.size.log)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot2
plot3 <- ggplot(df.tall, aes(x = mean.unscaled, y = mean.scaled, color = cell.type)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot3
plot4 <- ggplot(df.tall, aes(x = mean.unscaled, y = mean.scaled,
color = cell.type, size = s.cell.size.log)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot4
plot1 <- ggplot(df.tall, aes(x = sd.unscaled, y = sd.scaled)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot1
plot2 <- ggplot(df.tall, aes(x = sd.unscaled, y = sd.scaled, size = s.cell.size.log)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot2
plot3 <- ggplot(df.tall, aes(x = sd.unscaled, y = sd.scaled, color = cell.type)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot3
plot4 <- ggplot(df.tall, aes(x = sd.unscaled, y = sd.scaled,
color = cell.type, size = s.cell.size.log)) +
geom_point() + geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0)
plot4
ggplot(df.wide, aes(x = mean, y = sd)) +
geom_point() + geom_smooth(method = "lm", se = F) + facet_wrap(~type)
ggplot(df.wide, aes(x = mean, y = sd)) +
geom_point(aes(color = cell.type)) +
geom_smooth(method = "lm", se = F) + facet_wrap(~type)
message("original:")
summary(df.wide$true.prop.mean.flow.cyto)
sum(df.wide$true.prop.mean.flow.cyto)
message("format:")
summary(df.wide$true.prop.mean.flow.cyto.format)
sum(df.wide$true.prop.mean.flow.cyto.format)
ggplot(df.tall, aes(x = cell.type, y = s.cell.size)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ylab("Cell size (marker library size)")
table(df.wide$cell.type)
head(df.wide)
dim(df.wide)
cell.type <- "Plasmablasts"
filter.cell.type <- df.wide$cell.type==cell.type
df.filter <- df.wide[filter.cell.type,]
df.filter
mean.differences <- apply(df.filter,1,function(ri){ri$mean-ri$true.prop.mena.flow.cyto})
mean.differences <- apply(df.filter,1,function(ri){ri$mean-ri$true.prop.mean.flow.cyto})
df.filter$mean-df.filter$true.prop.mean.flow.cyto
cell.type <- "Plasmablasts"
filter.cell.type <- df.wide$cell.type==cell.type
df.filter <- df.wide[filter.cell.type,]
#
mean.differences <- df.filter$mean-df.filter$true.prop.mean.flow.cyto
names(mean.differences) <- df.filter$type
mean.differences
sqrt(mean.differences^2)
mean.differences <- df.wide$mean-df.wide$true.prop.mean.flow.cyto
names(mean.differences) <- df.filter$type
mean.differences
mean.differences <- df.wide$mean-df.wide$true.prop.mean.flow.cyto
names(mean.differences) <- paste0(df.wide$cell.type, ";", df.wide$type)
mean.differences
mean.differences <- df.wide$mean-df.wide$true.prop.mean.flow.cyto
names(mean.differences) <- paste0(df.wide$cell.type, ";", df.wide$type)
mean.differences <- mean.differences[order(names(mean.differences))]
mean.differences
mean.differences[grepl("Plasmablasts", names(mean.differences))]
summary(df.tall$s.cell.size)
df.tall[df.tall$s.cell.size==min(df.tall$s.cell.size),]
mean.differences[grepl("Basophils.LD", names(mean.differences))]
sqrt(mean.differences[grepl("Basophils.LD", names(mean.differences))]^2)
mean.differences <- df.wide$mean-df.wide$true.prop.mean.flow.cyto
names(mean.differences) <- paste0(df.wide$cell.type, ";", df.wide$type)
mean.differences <- mean.differences[order(names(mean.differences))]
root.sq.mean.diff <- sqrt(mean.differences^2)
root.sq.mean.diff
root.sq.mean.diff[grepl("Plasmablasts", names(root.sq.mean.diff))]
root.sq.mean.diff[grepl("Basophils.LD", names(root.sq.mean.diff))]
df.plot <- data.frame(root.sq.mean.diff = root.sq.mean.diff,
cell.type.and.scale = names(root.sq.mean.diff))
ggplot(df.plot, aes(x = cell.type.and.scale, y = root.sq.mean.diff)) +
geom_bar()
df.plot
class(df.plot[,1])
df.plot <- data.frame(root.sq.mean.diff = root.sq.mean.diff,
cell.type = gsub(";.*", "", names(root.sq.mean.diff)),
scale = gsub(".*;", "", names(root.sq.mean.diff)))
ggplot(df.plot, aes(x = cell.type.and.scale, y = root.sq.mean.diff)) +
geom_bar(stat = "identity") + facet_wrap(~scale)
df.plot
df.plot <- data.frame(root.sq.mean.diff = root.sq.mean.diff,
cell.type = gsub(";.*", "", names(root.sq.mean.diff)),
scale = gsub(".*;", "", names(root.sq.mean.diff)))
ggplot(df.plot, aes(x = cell.type, y = root.sq.mean.diff)) +
geom_bar(stat = "identity") + facet_wrap(~scale, ncol = 1)
df.plot <- data.frame(root.sq.mean.diff = root.sq.mean.diff,
cell.type = gsub(";.*", "", names(root.sq.mean.diff)),
scale = gsub(".*;", "", names(root.sq.mean.diff)))
ggplot(df.plot, aes(x = cell.type, y = root.sq.mean.diff)) +
geom_bar(stat = "identity") + facet_wrap(~scale, ncol = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.plot <- data.frame(root.sq.mean.diff = root.sq.mean.diff,
cell.type = gsub(";.*", "", names(root.sq.mean.diff)),
scale = gsub(".*;", "", names(root.sq.mean.diff)))
ggplot(df.plot, aes(x = cell.type, y = root.sq.mean.diff)) +
geom_bar(stat = "identity") + facet_wrap(~scale, ncol = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Root of mean difference squared")
mean.differences
rmse.all.types.scaled <- sqrt(mean.differences[grepl("scaled", names(mean.differences))]^2)
rmse.all.types.scaled <- sqrt(mean.differences[
grepl("scaled", names(mean.differences))]^2)
rmse.all.types.scaled
rmse.all.types.scaled <- sqrt(mean.differences[
grepl(";scaled", names(mean.differences))]^2)
rmse.all.types.scaled
mean.differences[grepl(";scaled", names(mean.differences))]
rmse.cell.types <- function(df, var1="mean", var2="true.prop.mean.flow.cyto"){
mean.differences.all.types <- df[,var1]-df[,var2]
mean.squared.diffs.all.types <- (mean.differences.all.types^2)/length(mean.differences.all.types)
return(
sqrt(mean.squared.diffs.all.types)
)
}
rmse.cell.types(df.wide[df.wide$type=="scaled",])
rmse.cell.types(df.wide[df.wide$type=="unscaled",])
rmse.cell.types <- function(df, var1="mean", var2="true.prop.mean.flow.cyto"){
mean.differences.all.types <- df[,var1]-df[,var2]
mean.squared.diffs.all.types <-
sum(mean.differences.all.types^2)/length(mean.differences.all.types)
return(
sqrt(mean.squared.diffs.all.types)
)
}
rmse.cell.types(df.wide[df.wide$type=="scaled",])
rmse.cell.types(df.wide[df.wide$type=="unscaled",])
rmse.cell.types <- function(df, var1="mean", var2="true.prop.mean.flow.cyto"){
mean.differences.all.types <- df[,var1]-df[,var2]
mean.squared.diffs.all.types <-
sum(mean.differences.all.types^2)/length(mean.differences.all.types)
return(
sqrt(mean.squared.diffs.all.types)
)
}
message("Scaled RMSE across cell types:")
rmse.cell.types(df.wide[df.wide$type=="scaled",])
message("Unscaled RMSE across cell types:")
rmse.cell.types(df.wide[df.wide$type=="unscaled",])
