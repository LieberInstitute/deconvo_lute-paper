error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_commentary-paper")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
setwd("C:/Users/User/Documents/GitHub")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
# year
csv$year <- gsub(".* ", "", csv$citation)
# set all tissues
csv$tissues <- paste0(csv$tissues, ";all_tissues")
# format tissues
unique.tissues <- strsplit(csv$tissues, ";") %>% unlist() %>% unique()
tx.filter <- c("")
unique.tissues <- unique.tissues[!unique.tissues %in% tx.filter]
tx.counts.list <- lapply(unique.tissues, function(tx){
nrow(csv[grepl(paste0("(^|;)", tx, "(;|$)"), csv[,3]),])
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
# get plot data
plot.data <- tx.counts.table
plot.data$references <- as.numeric(plot.data$references)
ref.order <- order(plot.data$references) %>% rev()
ref.levels <- plot.data$tx[ref.order]
plot.data$tx <- factor(plot.data$tx, levels = ref.levels)
plot.data <- plot.data[seq(15),]
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
seq.year <- seq(min(csv$year), max(csv$year), 1)
ref.all.vector <- c()
df.cumul <- lapply(seq.year, function(year.iter){
year.filter <- csv$year <= year.iter
csvf <- csv[year.filter,]
tx.counts.list <- lapply(unique.tissues, function(tx){
tx.filter <- grepl(paste0("(^|;)", tx, "(;|$)"), csvf[,3])
csvf[tx.filter,] %>% nrow()
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
tx.counts.table$year <- year.iter
tx.counts.table
})
df.cumul <- do.call(rbind, df.cumul) %>% as.data.frame()
tx.filter <- c("all_tissues", "tumor", "brain", "immune_cell", "blood", "pancreas")
df.cumul <- df.cumul[df.cumul$tx %in% tx.filter,]
# convert all
df.cumul$year <- as.integer(df.cumul$year)
df.cumul$Tissue <- df.cumul$tx
# save new plot
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
df.cumul
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
dev.off()
dev.off()
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
knitr::opts_chunk$set(echo = TRUE)
library(ComplexHeatmap)
library(circlize)
heatmapTable<-matrix(sample(10,4),nrow=2)
colnames(heatmapTable)<-c("a","b")
heatmapTopAnno<-HeatmapAnnotation(
label1=c("a","b"),
col=list(label1=c("a"="red","b"="blue")),
gp=gpar(col="black")
)
# without annotations
Heatmap(heatmapTable)
# With annotations
Heatmap(heatmapTable,top_annotation=heatmapTopAnno)
libv <- c("ComplexHeatmap")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
df <- data.frame(
expressionScale=c("tpm", "log2_tpm_plusone", "tpm", "log2_tpm_plusone"),
heatmapRescale=rep("Z", 4),
cellSizeScaleFactor=rep("sum",4)
)
knitr::kable(df, align = "c")
# check z transformation
globalMean <- mean(refTpm)
globalSD <- sd(refTpm)
zRefTpm <- refTpm-globalMean/globalSD
zRefTpm[1,1]==refTpm[1,1]-globalMean/globalSD
identical(zRefTpm, scale(refTpm, center=TRUE, scale=FALSE))
identical(zRefTpm, scale(refTpm, center=TRUE, scale=TRUE))
identical(zRefTpm, scale(refTpm, center=FALSE, scale=TRUE))
heatmapTall <- scale(refTpm)
mapTable <- mapTableImmuneCells("abis17")
markerTable <- markerTableFromList(listMarkers)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
identical(zRefTpm, scale(refTpm))
identical(zRefTpm, scale(refTpm,scale=F))
head(scale(refTpm))
head(zRefTpm)
# check object dimensions
dim(heatmapTall)
head(heatmapTall)
head(markerTable)
intersect(unique(markerTable$cellType), colnames(heatmapTall))
length(intersect(unique(markerTable$cellType), colnames(heatmapTall)))
mapTable
head(rownames(heatmapTall))
head(markerTable$markerName)
length(intersect(rownames(heatmapTall), markerTable$markerName))
length(intersect(rownames(heatmapTall), markerTable$markerName))
identical(rownames(heatmapTall), markerTable$markerName)
newAnnotationHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z")
newAnnotationHeatmapList$heatmap
Heatmap(heatmapTall)
# column labels from 1 lookup
columnLabelVector <- sapply(colnames(heatmapTall), function(typeLabel){
mapTable[mapTable[,1]==typeLabel,2]})
# row labels from 2 lookups
rowLabelVector <- sapply(rownames(heatmapTall), function(markerLabel){
typeLabel <- markerTable[
markerTable[,"markerName"]==markerLabel,"cellType"]
filterMapTable <- mapTable[,"cellType"]==typeLabel
mapTable[filterMapTable,"color"]
})
# make annotations
topAnnotation<-HeatmapAnnotation(
typeLabel=colnames(heatmapTall),
col=list(typeLabel=columnLabelVector)
)
#leftAnnotation<-rowAnnotation(
#  markerTypeLabel=rownames(heatmapTall),
#  col=list(markerTypeLabel=rowLabelVector)
#)
# match heatmap and marker table
markerTable <- markerTable[
order(match(markerTable$marker, rownames(heatmapTall))),]
identical(rownames(heatmapTall), markerTable$marker)
leftAnnotation<-rowAnnotation(
markerTypeLabel=markerTable[,"cellType"],
col=list(markerTypeLabel=columnLabelVector),
show_legend=FALSE
)
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
heatmapTitle="Z"
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
leftAnnotation
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
dev.off()
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
dim(mapTable)
dim(markerTable)
dim(heatmapTall)
heatmapTall <- scale(refTpm)
mapTable <- mapTableImmuneCells("abis17")
markerTable <- markerTableFromList(listMarkers)
dim(mapTable)
dim(markerTable)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
heatmapTall <- heatmapTallHarmonized
markerTable <- markerTableHarmonized
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
dim(heatmapTall)
# column labels from 1 lookup
columnLabelVector <- sapply(colnames(heatmapTall), function(typeLabel){
mapTable[mapTable[,1]==typeLabel,2]})
# row labels from 2 lookups
rowLabelVector <- sapply(rownames(heatmapTall), function(markerLabel){
typeLabel <- markerTable[
markerTable[,"markerName"]==markerLabel,"cellType"]
filterMapTable <- mapTable[,"cellType"]==typeLabel
mapTable[filterMapTable,"color"]
})
# make annotations
topAnnotation<-HeatmapAnnotation(
typeLabel=colnames(heatmapTall),
col=list(typeLabel=columnLabelVector)
)
#leftAnnotation<-rowAnnotation(
#  markerTypeLabel=rownames(heatmapTall),
#  col=list(markerTypeLabel=rowLabelVector)
#)
# match heatmap and marker table
markerTable <- markerTable[
order(match(markerTable$marker, rownames(heatmapTall))),]
identical(rownames(heatmapTall), markerTable$marker)
leftAnnotation<-rowAnnotation(
markerTypeLabel=markerTable[,"cellType"],
col=list(markerTypeLabel=columnLabelVector),
show_legend=FALSE
)
Heatmap(
heatmapTall,
top_annotation=topAnnotation,
left_annotation=leftAnnotation,
name=heatmapTitle
)
Heatmap(heatmapTall)
head(reftpm)
head(refTpm)
plotScatter <- refTpm
ggplot(plotScatter, aes(x = Monocytes.C, y = NK)) + geom_point()
libv <- c("ComplexHeatmap")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
plotScatter <- refTpm
ggplot(plotScatter, aes(x = Monocytes.C, y = NK)) + geom_point()
libv <- c("ComplexHeatmap", "ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
plotScatter <- refTpm
ggplot(plotScatter, aes(x = Monocytes.C, y = NK)) + geom_point()
class(plotScatter)
libv <- c("ComplexHeatmap", "ggplot2", "dplyr")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
plotScatter <- refTpm %>% as.data.frame()
ggplot(plotScatter, aes(x = Monocytes.C, y = NK)) + geom_point()
plotScatter <- refTpm %>% as.data.frame()
ggplot(plotScatter, aes(x = Monocytes.C, y = NK)) + geom_point() + geom_abline(slope = 1, intercept = 0)
dim(refTpm)
dim(refTpmLog2Transformed)
dim(refTpmTransformed)
identical(rownames(refTpm), rownames(refTpmTransformed))
# checks
dim(refTpm)
dim(refTpmTransformed)
identical(rownames(refTpm), rownames(refTpmTransformed))
identical(colnames(refTpm), colnames(refTpmTransformed))
plotScatter <- data.frame(untransformed = refTpm[,1],
transformed = refTpmTransformed[,1],
cellType = rep(colnames(refTpm)[1], nrow(refTpm)))
ggplot(plotScatter, aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0)
head(melt(refTpm))
library(reshape1)
library(reshape2)
head(melt(refTpm))
libv <- c("ComplexHeatmap", "ggplot2", "dplyr", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
refTpmMelt <- melt(refTpm)
refTpmTransformedMelt <- melt(refTpmTransformed)
identical(refTpmMelt$Var1, refTpmTransformedMelt$Var1)
identical(refTpmMelt$Var1, refTpmTransformedMelt$Var1)
identical(refTpmMelt$Var2, refTpmTransformedMelt$Var2)
head(refTpmMelt)
ggplot(plotScatter, aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0)
plotScatter <- data.frame(untransformed = refTpmMelt[,3],
transformed = refTpmTransformedMelt[,3],
cellType = refTpmMelt[,2],
markerName = refTpmMelt[,1])
ggplot(plotScatter, aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0)
ggplot(plotScatter, aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0) + facet(~cellType)
ggplot(plotScatter, aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0) + facet_wrap(~cellType)
ggplot(plotScatter[!plotScatter$cellType %in% c("Plasmablasts")],
aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0) + facet_wrap(~cellType)
ggplot(plotScatter[!plotScatter$cellType %in% c("Plasmablasts"),],
aes(x = untransformed, y = transformed)) + geom_point() +
geom_abline(slope = 1, intercept = 0) + facet_wrap(~cellType)
dim(refTpm)
200*17
dim(refTpmFilter)
