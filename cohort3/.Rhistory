names(qc$prop.qc)
rownames(qc$prop.qc)
dim(qc$prop.qc)
qc$sc.eset.qc
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq", z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq", y.file.name = "MIX3cl__bulkESET.rds")
knitr::kable(df.term)
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
file.path(data.path, paste0(dataset, "_bulkESET.rds"))
data.bulk
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "MIX3cl__bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, "MIX3cl__bulkESET.rds"))
data.bulk
attributes(data.bulk)
phenoData(data.bulk)
as.data.frame(phenoData(data.bulk))
data.bulk@phenoData
data.bulk@phenoData@data
data.bulk@phenoData@varMetadata
data.bulk@phenoData
as.data.frame(data.bulk@phenoData)
data.bulk
experimentData(data.bulk)
ExpressionSet
?ExpressionSet
phenoData(data.bulk)
phenoData(data.bulk)$pdata
dim(data.bulk)
data.sc
colData(data.cs)
colData(data.sc)
phenoData(data.sc)
attributes(phenoData(data.sc))
phenoData(data.sc)@data
head(phenoData(data.sc)@data)
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq",
z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq",
y.file.name = "MIX3cl__bulkESET.rds",
p.true = "6:3:1",
p.true.celltypes = "hbc;MCF7;hf")
knitr::kable(df.term)
library(lute)
?lute
# get example bulk data
y <- get_decon_example_data()$y
# get example sce
sce <- random_sce()[seq(10),]
# get framework results
experiment.results <- lute(sce=sce, y=y, typemarker.algorithm=NULL)
experiment.results
error <- 5
error <- 5
error.vector <- rep(5, 5)
error.vector
error.vector^2
error.vector.sq <- error.vector^2
error.vector
error.vector.sq
sqrt(mean(error.vector.sq))
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 5
sqrt(mean(mean(error.vector)^2)) #
sqrt(mean(error.vector)^2)
mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_commentary-paper")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
setwd("C:/Users/User/Documents/GitHub")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
# year
csv$year <- gsub(".* ", "", csv$citation)
# set all tissues
csv$tissues <- paste0(csv$tissues, ";all_tissues")
# format tissues
unique.tissues <- strsplit(csv$tissues, ";") %>% unlist() %>% unique()
tx.filter <- c("")
unique.tissues <- unique.tissues[!unique.tissues %in% tx.filter]
tx.counts.list <- lapply(unique.tissues, function(tx){
nrow(csv[grepl(paste0("(^|;)", tx, "(;|$)"), csv[,3]),])
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
# get plot data
plot.data <- tx.counts.table
plot.data$references <- as.numeric(plot.data$references)
ref.order <- order(plot.data$references) %>% rev()
ref.levels <- plot.data$tx[ref.order]
plot.data$tx <- factor(plot.data$tx, levels = ref.levels)
plot.data <- plot.data[seq(15),]
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
seq.year <- seq(min(csv$year), max(csv$year), 1)
ref.all.vector <- c()
df.cumul <- lapply(seq.year, function(year.iter){
year.filter <- csv$year <= year.iter
csvf <- csv[year.filter,]
tx.counts.list <- lapply(unique.tissues, function(tx){
tx.filter <- grepl(paste0("(^|;)", tx, "(;|$)"), csvf[,3])
csvf[tx.filter,] %>% nrow()
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
tx.counts.table$year <- year.iter
tx.counts.table
})
df.cumul <- do.call(rbind, df.cumul) %>% as.data.frame()
tx.filter <- c("all_tissues", "tumor", "brain", "immune_cell", "blood", "pancreas")
df.cumul <- df.cumul[df.cumul$tx %in% tx.filter,]
# convert all
df.cumul$year <- as.integer(df.cumul$year)
df.cumul$Tissue <- df.cumul$tx
# save new plot
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
df.cumul
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
dev.off()
dev.off()
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
load("./env/05_summaries/01_run_scipt.Rdata")
load("./env/05_summaries/01_run_scipt.RData")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# param
markersPerType <- 10
# load
load("./env/05_summaries/01_run_scipt.RData")
load("./env/05_summaries/01_run_script.RData")
class(refTpm[,1])
class(z[,1])
refTpm <- experimentData$z
refTpm <- as.matrix(refTpm)
# transform
cellSizes<-apply(as.matrix(refTpm),2,sum)
refTpmTransformed <- lute:::.zstransform(refTpm, cellSizes)
# log2 TPM + 1 heatmap data
refTpmLog2 <- as.data.frame(t(apply(refTpm,1,function(ci){
log2(ci+1)
})))
colnames(refTpmLog2) <- colnames(refTpm)
rownames(refTpmLog2) <- rownames(refTpm)
# transform
cellSizesLog2Tpm<-apply(as.matrix(refTpmLog2),2,sum)
refTpmLog2Transformed <- lute:::.zstransform(refTpmLog2, cellSizesLog2Tpm)
# filter markers
# TEST: does listMarkers change with TPM vs log2TPM+1?
listMarkers <-lapply(
colnames(refTpm), function(cellType){
cellTypeTrue<-colnames(refTpm)==cellType
cellTypeFalse<-!colnames(refTpm)==cellType
tpmTrue<-refTpm[,cellTypeTrue]
tpmFalse<-apply(refTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(refTpm)
# tables for heatmaps
refTpmFilter<-refTpm[unlist(listMarkers),]
refTpmTransformedFilter<-refTpmTransformed[unlist(listMarkers),]
refTpmLog2Filter <- refTpmLog2[unlist(listMarkers),]
refTpmLog2TransformedFilter <- refTpmLog2Transformed[unlist(listMarkers),]
# heatmaps
Heatmap(refTpm)
Heatmap(scale(refTpm))
# save
save.image(file="./env/04_transform/01_transform_script.RData")
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Gets heatmap data before and after cell type scale factor transformations.
#
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# param
markersPerType <- 10
# load
load("./env/05_summaries/01_run_script.RData")
# format
#refTpm <- refTpm[!duplicated(refTpm[,1]),]
#for(c in seq(ncol(refTpm))){refTpm[,c] <- as.numeric(refTpm[,c])}
# TPM heatmap data
refTpm <- experimentData$z
refTpm <- as.matrix(refTpm)
# transform
cellSizes<-apply(as.matrix(refTpm),2,sum)
refTpmTransformed <- lute:::.zstransform(refTpm, cellSizes)
# log2 TPM + 1 heatmap data
refTpmLog2 <- as.data.frame(t(apply(refTpm,1,function(ci){
log2(ci+1)
})))
colnames(refTpmLog2) <- colnames(refTpm)
rownames(refTpmLog2) <- rownames(refTpm)
# transform
cellSizesLog2Tpm<-apply(as.matrix(refTpmLog2),2,sum)
refTpmLog2Transformed <- lute:::.zstransform(refTpmLog2, cellSizesLog2Tpm)
# filter markers
# TEST: does listMarkers change with TPM vs log2TPM+1?
listMarkers <-lapply(
colnames(refTpm), function(cellType){
cellTypeTrue<-colnames(refTpm)==cellType
cellTypeFalse<-!colnames(refTpm)==cellType
tpmTrue<-refTpm[,cellTypeTrue]
tpmFalse<-apply(refTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(refTpm)
# tables for heatmaps
refTpmFilter<-refTpm[unlist(listMarkers),]
refTpmTransformedFilter<-refTpmTransformed[unlist(listMarkers),]
refTpmLog2Filter <- refTpmLog2[unlist(listMarkers),]
refTpmLog2TransformedFilter <- refTpmLog2Transformed[unlist(listMarkers),]
# heatmaps
Heatmap(refTpm)
Heatmap(scale(refTpm))
# save
save.image(file="./env/04_transform/01_transform_script.RData")
save.image(file="./env/04_transform/01_run_script.RData")
save.image(file="./env/06_top10markers/01_run_script.RData")
#!/usr/bin/env R
# Author: Sean Maden
#
# Gets heatmap data for top 10 markers per cell type in ABIS-seq reference.
#
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# param
markersPerType <- 10
# load
load("./env/05_summaries/01_run_script.RData")
# format
#refTpm <- refTpm[!duplicated(refTpm[,1]),]
#for(c in seq(ncol(refTpm))){refTpm[,c] <- as.numeric(refTpm[,c])}
# TPM heatmap data
refTpm <- experimentData$z
refTpm <- as.matrix(refTpm)
# transform
cellSizes<-apply(as.matrix(refTpm),2,sum)
refTpmTransformed <- lute:::.zstransform(refTpm, cellSizes)
# log2 TPM + 1 heatmap data
refTpmLog2 <- as.data.frame(t(apply(refTpm,1,function(ci){
log2(ci+1)
})))
colnames(refTpmLog2) <- colnames(refTpm)
rownames(refTpmLog2) <- rownames(refTpm)
# transform
cellSizesLog2Tpm<-apply(as.matrix(refTpmLog2),2,sum)
refTpmLog2Transformed <- lute:::.zstransform(refTpmLog2, cellSizesLog2Tpm)
# filter markers
# TEST: does listMarkers change with TPM vs log2TPM+1?
listMarkers <-lapply(
colnames(refTpm), function(cellType){
cellTypeTrue<-colnames(refTpm)==cellType
cellTypeFalse<-!colnames(refTpm)==cellType
tpmTrue<-refTpm[,cellTypeTrue]
tpmFalse<-apply(refTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(refTpm)
# tables for heatmaps
refTpmFilter<-refTpm[unlist(listMarkers),]
refTpmTransformedFilter<-refTpmTransformed[unlist(listMarkers),]
refTpmLog2Filter <- refTpmLog2[unlist(listMarkers),]
refTpmLog2TransformedFilter <- refTpmLog2Transformed[unlist(listMarkers),]
# heatmaps
Heatmap(refTpm)
Heatmap(scale(refTpm))
# save
save.image(file="./env/06_top10markers/01_run_script.RData")
libv <- c("ComplexHeatmap", "ggplot2", "dplyr", "reshape2")
sapply(libv, library, character.only = TRUE)
dim(z)
