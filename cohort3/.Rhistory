sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
packageVersion("lute")
?memory.limit
?install_github
library(devtools)
?install_github
packageVersion(lute)
packageVersion("lute")
packageVersion("lute")
devtools::install_github("metamaden/lute")
?install_version
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files()
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files("./scdc/data")
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
?load
setwd("..")
data <- readRDS("./scdc/data/baron.rds")
dim(data)
data
data
dim(data)
metadata(data)
attributes(data)
phenoData(data)
colData(data)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data/baron.rds"
setwd("..")
list.files(data.path)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data"
setwd("..")
list.files(data.path)
setwd("..")
data <- readRDS(file.path(data.path, "baron.rds"))
qc <- readRDS(file.path(data.path, "qc_baron.rds"))
qc
class(qc)
names(qc)
data
dim(data)
names(qc)
qc$prop.qc
class(qc$prop.qc)
names("qc_baron.rds")
names(qc$prop.qc)
rownames(qc$prop.qc)
dim(qc$prop.qc)
qc$sc.eset.qc
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq", z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq", y.file.name = "MIX3cl__bulkESET.rds")
knitr::kable(df.term)
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
file.path(data.path, paste0(dataset, "_bulkESET.rds"))
data.bulk
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "MIX3cl__bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, "MIX3cl__bulkESET.rds"))
data.bulk
attributes(data.bulk)
phenoData(data.bulk)
as.data.frame(phenoData(data.bulk))
data.bulk@phenoData
data.bulk@phenoData@data
data.bulk@phenoData@varMetadata
data.bulk@phenoData
as.data.frame(data.bulk@phenoData)
data.bulk
experimentData(data.bulk)
ExpressionSet
?ExpressionSet
phenoData(data.bulk)
phenoData(data.bulk)$pdata
dim(data.bulk)
data.sc
colData(data.cs)
colData(data.sc)
phenoData(data.sc)
attributes(phenoData(data.sc))
phenoData(data.sc)@data
head(phenoData(data.sc)@data)
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq",
z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq",
y.file.name = "MIX3cl__bulkESET.rds",
p.true = "6:3:1",
p.true.celltypes = "hbc;MCF7;hf")
knitr::kable(df.term)
library(lute)
?lute
# get example bulk data
y <- get_decon_example_data()$y
# get example sce
sce <- random_sce()[seq(10),]
# get framework results
experiment.results <- lute(sce=sce, y=y, typemarker.algorithm=NULL)
experiment.results
error <- 5
error <- 5
error.vector <- rep(5, 5)
error.vector
error.vector^2
error.vector.sq <- error.vector^2
error.vector
error.vector.sq
sqrt(mean(error.vector.sq))
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 5
sqrt(mean(mean(error.vector)^2)) #
sqrt(mean(error.vector)^2)
mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
load("~/GitHub/deconvo_method-paper/cohort3/env/03_k5/01_run_script.RData")
dim(df.map)
head(df.map)
dim(bulkExpression)
density(hist(bulkExpression))
density(hist(bulkExpression[1,]))
density(hist(bulkExpression[,1]))
plot(density(bulkExpression[,1]))
plot(density(bulkExpression[1,]))
dim(bulkExpression)
dim(bulkExpression[1,])
plot(density(bulkExpression[1,]))
plot(density(zref[1,]))
class(zref)
plot(density(zref[1,]))
dim(zre)
dim(zref)
plot(density(zref[1,]))
plot(density(as.numeric(zref[1,])))
plot(density(as.numeric(zref[2,])))
plot(density(as.numeric(zref[3,])))
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
load("./env/03_k5/01_run_script.RData")
knitr::opts_chunk$set(echo = TRUE)
load("./env/03_k5/01_run_script.Rdata")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
dim(zref)
plot(density(zref[,1]))
zref
plot(density(zref[,1]))
dfplot <- reshape2::melt(zref)
head(dfplot)
dfplot <- reshape2::melt(zref)
ggplot(zref, aes(x = variable, y = value)) + geom_density()
dfplot <- reshape2::melt(zref)
ggplot(dfplot, aes(x = variable, y = value)) + geom_density()
libraryVector <- c("ggplot2", "reshape2")
sapply(libraryVector, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
dfplot <- reshape2::melt(zref)
ggplot(dfplot, aes(x = variable, y = value)) + geom_density()
dfplot <- reshape2::melt(zref)
ggplot(dfplot, aes(x = variable, y = value)) + geom_density() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(zref)
summary(zref)
summary(zref)
summary(zref)
summary(scale(zref))
summary(log2(zref))
summary(log2(zref+1))
summary(scale(zref))
summary(scale(log2(zref+1)))
dfplot <- reshape2::melt(zref)
ggplot(dfplot,
aes(x = variable, y = value)) +
geom_density() +
theme(axis.text.x =
element_text(
angle = 45, hjust = 1))
tpmZref <- zref
tpmZref <- zref
log2TpmZref <- log2(zref+1)
zscoreTpm <- scale(zref)
zscoreLog2TpmZref <- scale(log2TpmZref)
libraryVector <- c("ggplot2", "reshape2")
sapply(libraryVector, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
tpmZref <- zref
log2TpmZref <- log2(zref+1)
zscoreTpm <- scale(zref)
zscoreLog2TpmZref <- scale(log2TpmZref)
summary(tpmZref)
summary(log2TpmZref)
summary(zscoreTpm)
summary(zscoreLog2TpmZref)
dfplot <- reshape2::melt(zref)
ggplot(
dfplot, aes(x = variable, y = value)) +
geom_density() +
theme(
axis.text.x =
element_text(angle = 45, hjust = 1))
densityPlot(zref)
densityPlot <- function(dfplot){
ggplot(
dfplot, aes(x = variable, y = value)) +
geom_density() +
theme(
axis.text.x =
element_text(angle = 45, hjust = 1))
}
densityPlot(zref)
densityPlot <- function(dfplot){
dfplot <- melt(dfplot)
ggplot(
dfplot, aes(x = variable, y = value)) +
geom_density() +
theme(
axis.text.x =
element_text(angle = 45, hjust = 1))
}
densityPlot(zref)
densityPlot(zref)
densityPlot(zref)
densityPlot(log2TpmZref)
densityPlot(zscoreTpm)
zscoreTpm
zscoreTpm
dim(zref)
summary(zref[,1])
dim(log2TpmZref[,1])
dim(zref)
head(zref)
log2TpmZref <- t(apply(tpmZref, 2, function(cellName){log2(cellName+1)}))
dim(log2TpmZref)
log2TpmZref <- apply(tpmZref, 2, function(cellName){log2(cellName+1)})
dim(log2TpmZref)
head(log2TpmZref <- apply(tpmZref, 2, function(cellName){log2(cellName+1)}))
head(log2TpmZref)
class(log2TpmZref)
class(zref)
libraryVector <- c("ggplot2", "reshape2", "dplyr")
sapply(libraryVector, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.RData")
tpmZref <- zref
log2TpmZref <-
apply(tpmZref, 2, function(cellName){log2(cellName+1)}) %>% as.data.frame()
class(log2TpmZref)
class(zref)
class(scale(zref))
dim(log2TpmZref)
log2TpmZref
scale(log2TpmZref)
scale(log2TpmZref) %>% as.data.frame()
class(scale(log2TpmZref) %>% as.data.frame())
tpmZref <- zref
log2TpmZref <-
apply(tpmZref, 2, function(cellName){log2(cellName+1)}) %>% as.data.frame()
zscoreTpm <- scale(zref) %>% as.data.frame()
zscoreLog2TpmZref <- scale(log2TpmZref) %>% as.data.frame()
dim(zscoreLog2TpmZref)
head(zscoreLog2TpmZref)
summary(tpmZref)
summary(log2TpmZref)
summary(zscoreTpm)
summary(zscoreLog2TpmZref)
densityPlot <- function(dfplot){
dfplot <- melt(dfplot)
ggplot(
dfplot, aes(x = variable, y = value)) +
geom_density() +
theme(
axis.text.x =
element_text(angle = 45, hjust = 1))
}
densityPlot(zref)
densityPlot(log2TpmZref)
densityPlot(zscoreTpm)
densityPlot(zscoreLog2TpmZref)
class(melt(dfplot))
class(melt(dfplot)[,1])
class(melt(dfplot)[,2])
densityPlot <- function(dfplot){
dfplot <- melt(dfplot)
dfplot[,2] <- as.numeric(dfplot[,2])
ggplot(
dfplot, aes(x = variable, y = value)) +
geom_density() +
theme(
axis.text.x =
element_text(angle = 45, hjust = 1))
}
densityPlot(zref)
densityPlot(log2TpmZref)
densityPlot(zscoreTpm)
densityPlot(zscoreLog2TpmZref)
cellTypes
cellTypes <- colnames(dfplot)
cellTypes
dfplot <- zref
cellTypes <- colnames(dfplot)
library(DeconvoBuddies)
?get_mean_ratio
cellTypes
cellType = cellTypes[1]
cellType
dfPlotDifference <- dfplot[,!colnames(dfplot)==cellType]
t(apply(dfPlotDifference,1,mean))
class(dfPlotDifference)
dim(dfPlotDifference)
apply(dfPlotDifference,1,mean)
apply(dfPlotDifference,2,mean)
cellType
mean(dfPlot[,cellType])
dfPlot[,cellType]
apply(dfplot, 2, mean)
dfMeanAllTypes <-apply(dfplot, 2, mean)
dfMeanAllTypes
markersVector <- rownames(dfplot)
dfMeanAllTypes <- apply(dfplot, 2, mean)
dfMeanAllTypes
markersVector
markersVector
markerType=markersVector[1]
markerType
marker <- markersVector[1]
marker
markersVector
dfMeanAllTypes
markersVector
dim(dfMeanAllTypes)
dfMeanAllTypes
