quantileVector <- quantile(dfPlot$size)
lowSizeMax <- quantileVector[2]
highSizeMin <- quantileVector[4]
dfPlot$sizeCategory <- ifelse(dfPlot$size <= lowSizeMax, "low",
ifelse(dfPlot$size >= highSizeMin, "high", "medium"))
dfCellSizeInfo <- dfPlot
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot2, plot3, nrow=1)
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot2, plot3, nrow=2,ncol=2)
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot1, plot2, plot3, nrow=2,ncol=2)
?grid.arrange
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot2, plot3,
layout_matrix=matrix(c(1,1,2,3),nrow=2),
nrow=2,ncol=2)
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot2, plot3,
layout_matrix=matrix(c(1,2,1,3),nrow=2),
nrow=2,ncol=2)
mapTable <- mapTableImmuneCells("abis17")
markerTable <- markerTableFromList(listMarkers)
# map size category
markerTable$sizeCategory <- "NA"
for(type in markerTable$cellType){
markerTable[markerTable$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
mapTable <- mapTableImmuneCells("abis17")
markerTable <- markerTableFromList(listMarkers)
# map size category
markerTable$sizeCategory <- "NA"
for(type in markerTable$cellType){
markerTable[markerTable$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
head(markerTable)
plot1 <- ggplot(markerTable, aes(x = sizeCategory)) + geom_bar(stat="count")
plot1
dfExpression <- reshape2::melt(refTpmLog2Filter)
head(dfExpression)
dfExpression <- reshape2::melt(refTpmLog2Filter)
# map size category
dfExpression$sizeCategory <- "NA"
for(type in markerTable$cellType){
markerTable[markerTable$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
dfExpression <- reshape2::melt(refTpmLog2Filter)
colnames(dfExpression) <- c("cellType", "expression")
# map size category
dfExpression$sizeCategory <- "NA"
for(type in dfExpression$cellType){
dfExpression[dfExpression$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
head(dfExpression)
plot1 <-
ggplot(dfExpression, aes(x = sizeCategory, y = expression)) +
geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot2 <-
ggplot(dfExpression, aes(x = sizeCategory, y = expression)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
grid.arrange(plot1, plot2, nrow = 2)
head(dfExpression)
class(refTpmLog2Filter)
dfExpression <- refTpmLog2Filter %>% as.matrix() %>% melt()
colnames(dfExpression) <- c("cellType", "expression")
# map size category
dfExpression$sizeCategory <- "NA"
for(type in dfExpression$cellType){
dfExpression[dfExpression$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
head(dfExpression)
dfExpression <- refTpmLog2Filter %>% as.matrix() %>% melt()
head(dfExpression)
dfExpression <- refTpmLog2Filter %>% as.matrix() %>% melt()
head(dfExpression)
dfExpression <- refTpmLog2Filter %>% as.matrix() %>% melt()
colnames(dfExpression) <- c("markerName", "cellType", "expression")
# map size category
dfExpression$sizeCategory <- "NA"
for(type in dfExpression$cellType){
dfExpression[dfExpression$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
refTpmLog2Filter[1,seq(4)]
rownames(refTpmLog2Filter)
rownames(refTpmLog2Filter)[1:2]
?group_by
head(dfExpression)
dfExpression %>% group_by(sizeCategory)
head(dfExpression %>% group_by(sizeCategory))
dim(dfExpression %>% group_by(sizeCategory))
dim(dfExpression)
dim(dfExpression %>% group_by(sizeCategory, markerName))
dim(dfExpression %>% group_by(sizeCategory, markerName)) %>% summarize()
dim(dfExpression %>% group_by(sizeCategory, markerName)) %>% summarise()
dim(dfExpression %>% group_by(sizeCategory, markerName)) %>% summarise(n=n())
?aggregate
dfExpression %>% group_by(sizeCategory) %>% summarise(mean = mean())
dfExpression %>% group_by(sizeCategory) %>% summarize(mean = mean())
dfExpression %>% group_by(sizeCategory) %>% summarise(mean = mean(expression))
dfExpression %>% group_by(sizeCategory, markerName) %>% summarise(mean = mean(expression))
dfExpression %>% group_by(sizeCategory, markerName) %>%
summarise(mean = mean(expression), var = vra(expression))
dfExpression %>% group_by(sizeCategory, markerName) %>%
summarise(mean = mean(expression), var = var(expression))
ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(sizeCategory)
dfMeanVarByGroup <- dfExpression %>% group_by(sizeCategory, markerName) %>%
summarise(mean = mean(expression), var = var(expression))
ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) + geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(sizeCategory)
head(dfMeanVarByGroup)
ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(sizeCategory)
ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot1 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot1 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var, color = sizeCategory)) +
geom_smooth() + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
plot1 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(dfMeanVarByGroup, aes(x = mean,  y = var, color = sizeCategory)) +
geom_smooth(method = "lm") + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
dfMeanVarByGroup <- dfExpression %>% group_by(sizeCategory, markerName) %>%
summarise(mean = mean(expression), var = var(expression))
dfMeanVarByGroup$log_mean <- log(dfMeanVarByGroup$mean)
dfMeanVarByGroup$log_var <- log(dfMeanVarByGroup$var)
plot1 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_smooth(method = "lm") + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
plot1 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_smooth() + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
plot1 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~sizeCategory)
plot2 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_smooth(method="glm") + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
largeHeatmapUntransformed <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
largeHeatmapUntransformed <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
# plot
largeHeatmapUntransformed$heatmap
dim(heatmapData)
table(markerTable[markerTable$sizeCategory=="high",]$markerName)
unique(markerTable[markerTable$sizeCategory=="high",]$markerName)
dim(markerTable)
head(markerTable)
dim(markerTable)
table(markerFilter)
table(markerTable$sizeCategory)
dim(heatmapTall)
?Heatmap
libv <- c("ComplexHeatmap", "ggplot2", "dplyr", "reshape2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")s
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
libv <- c("ComplexHeatmap", "ggplot2", "dplyr", "reshape2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
# plot
highSizeMarkersHeatmapList$heatmap
highSizeMarkersHeatmapList$heatmap
Heatmap(heatmapTall)
dim(heatmapTall)
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
# plot
highSizeMarkersHeatmapList$heatmap
libv <- c("ComplexHeatmap", "ggplot2", "dplyr", "reshape2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/04_transform/01_transform_script.RData")
source("./notebooks/04_transform/00_param.R")
dfPlot <- data.frame(size = as.numeric(cellSizes), cellType=names(cellSizes))
dfPlot$log2_size <- log2(dfPlot$size)
dfPlot$cellType <- factor(dfPlot$cellType, levels = dfPlot$cellType[order(dfPlot$size)])
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot2 <- ggplot(dfPlot, aes(x = cellType, y = log2_size)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
grid.arrange(plot1, plot2, ncol = 1)
plot1 <- ggplot(dfPlot, aes(x = 1, y = size)) + geom_violin() +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot2 <- ggplot(dfPlot, aes(x = 1, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
grid.arrange(plot1, plot2, nrow=1)
quantileVector <- quantile(dfPlot$size)
lowSizeMax <- quantileVector[2]
highSizeMin <- quantileVector[4]
dfPlot$sizeCategory <- ifelse(dfPlot$size <= lowSizeMax, "low",
ifelse(dfPlot$size >= highSizeMin, "high", "medium"))
dfCellSizeInfo <- dfPlot
# barplot coloring by category
plot1 <- ggplot(dfPlot, aes(x = cellType, y = size, fill = sizeCategory)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# violin plots by category
plot2 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) + geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot3 <-
ggplot(dfPlot, aes(x = sizeCategory, y = size)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
plot3
grid.arrange(plot1, plot2, plot3,
layout_matrix=matrix(c(1,2,1,3),nrow=2),
nrow=2,ncol=2)
mapTable <- mapTableImmuneCells("abis17")
markerTable <- markerTableFromList(listMarkers)
# map size category
markerTable$sizeCategory <- "NA"
for(type in markerTable$cellType){
markerTable[markerTable$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
plot1 <- ggplot(markerTable, aes(x = sizeCategory)) + geom_bar(stat="count")
plot1
dfExpression <- refTpmLog2Filter %>% as.matrix() %>% melt()
colnames(dfExpression) <- c("markerName", "cellType", "expression")
# map size category
dfExpression$sizeCategory <- "NA"
for(type in dfExpression$cellType){
dfExpression[dfExpression$cellType==type,]$sizeCategory<-
dfPlot[dfPlot$cellType==type,]$sizeCategory}
plot1 <-
ggplot(dfExpression, aes(x = sizeCategory, y = expression)) +
geom_violin(draw_quantiles=0.5) +
theme(axis.text.x = element_text(angle = 45,hjust=1))
# jitterbox
plot2 <-
ggplot(dfExpression, aes(x = sizeCategory, y = expression)) +
geom_jitter() + geom_boxplot(alpha = 0, color = "cyan") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
plot1
plot2
grid.arrange(plot1, plot2, nrow = 2)
dfMeanVarByGroup <- dfExpression %>% group_by(sizeCategory, markerName) %>%
summarise(mean = mean(expression), var = var(expression))
dfMeanVarByGroup$log_mean <- log(dfMeanVarByGroup$mean)
dfMeanVarByGroup$log_var <- log(dfMeanVarByGroup$var)
plot1 <- ggplot(dfMeanVarByGroup, aes(x = log_mean,  y = log_var)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~sizeCategory)
plot2 <- ggplot(
dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot3 <- ggplot(
dfMeanVarByGroup, aes(x = log_mean,  y = log_var, color = sizeCategory)) +
geom_smooth(method="glm") + geom_abline(slope = 1, intercept = 0)
plot1
plot2
plot3
# large cell sizes
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Untransformed")
# plot
highSizeMarkersHeatmapList$heatmap
head(markerTable$cellType)
head(markerTable)
table(markerTable$sizeCategory)
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="high",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
highSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "High cell size markers")
# plot
highSizeMarkersHeatmapList$heatmap
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="medium",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
mediumSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Medium cell size markers")
# plot
mediumSizeMarkersHeatmapList$heatmap
# untransformed
heatmapDataAll <- refTpmLog2Filter
markerFilter <- rownames(heatmapDataAll) %in%
markerTable[markerTable$sizeCategory=="low",]$markerName
heatmapData <- heatmapDataAll[markerFilter,]
# get heatmap
heatmapTall <- scale(heatmapData)
listMarkersHarmonize <- markersHarmonize(heatmapTall, markerTable)
heatmapTallHarmonized <- listMarkersHarmonize[["heatmapTall"]]
markerTableHarmonized <- listMarkersHarmonize[["markerTable"]]
lowSizeMarkersHeatmapList <- annotationHeatmapList(
heatmapTallHarmonized, mapTable, markerTableHarmonized, "Z", "Low cell size markers")
# plot
lowSizeMarkersHeatmapList$heatmap
heatmap1 <- highSizeMarkersHeatmapList$heatmap
heatmap2 <- mediumSizeMarkersHeatmapList$heatmap
heatmap3 <- lowSizeMarkersHeatmapList$heatmap
# heatmap1 + heatmap2 + heatmap3
ht_list = heatmap1 %v% heatmap2 %v% heatmap3
draw(ht_list)
?draw
