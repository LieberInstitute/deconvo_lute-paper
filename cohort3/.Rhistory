proportionChange, biasChange, errorChange)
)
dfpNew$type <- facetValue
return(dfpNew)
})) |> as.data.frame()
dfp2$Change <- ifelse(dfp2$value > 0, "Increase", "Decrease")
plot2 <- ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold"))
plot2
cellScaleFactorsHigh
cellScaleFactorsMidHigh
cellScaleFactorsLow
cellScaleFactorsMidLow
# set cell scale factors to change
cellScaleFactorNewHigh <- 0.95
cellScaleFactorNewMidHigh <- 0.75
cellScaleFactorNewMidLow <- 0.25
cellScaleFactorNewLow <- 0.05
# get changes for each iteration
changeNull <- 0
changeHigh <- cellScaleFactorNewHigh-cellScaleFactorStart
changeMidHigh <- cellScaleFactorNewMidHigh-cellScaleFactorStart
changeMidLow <- cellScaleFactorNewMidLow-cellScaleFactorStart
changeLow <- cellScaleFactorNewLow-cellScaleFactorStart
labelHigh <- paste0("Increase\n(cellScaleFactor = ",cellScaleFactorNewHigh,")")
labelMidHigh <- paste0("Moderate Inc.\n(cellScaleFactor = ",cellScaleFactorNewMidHigh,")")
labelMidLow <- paste0("Moderate Dec.\n(cellScaleFactor = ",cellScaleFactorNewMidLow,")")
labelLow <- paste0("Decrease\n(cellScaleFactor = ",cellScaleFactorNewLow,")")
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
#-----------------------
# get simulation results
#-----------------------
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
cellScaleFactorsLow
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
cellScaleFactorsLow
cellScaleFactorsMidLow
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
#-----------------------
# get simulation results
#-----------------------
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
predictedProportionsStart <- newParam@predictionsTable[[1]]
predictedProportionsNull <- newParamNullScales@predictionsTable[[1]]
predictedProportionsHigh <- newParamHigh@predictionsTable[[1]]
predictedProportionsMidHigh <- newParamMidHigh@predictionsTable[[1]]
predictedProportionsMidLow <- newParamMidLow@predictionsTable[[1]]
predictedProportionsLow <- newParamLow@predictionsTable[[1]]
biasStart <- trueProportionValue-predictedProportionsStart
biasNull <- trueProportionValue-predictedProportionsNull
biasHigh <- trueProportionValue-predictedProportionsHigh
biasMidHigh <- trueProportionValue-predictedProportionsMidHigh
biasMidLow <- trueProportionValue-predictedProportionsMidLow
biasLow <- trueProportionValue-predictedProportionsLow
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
errorHigh <- abs(biasHigh)
errorMidHigh <- abs(biasMidHigh)
errorMidLow <- abs(biasMidLow)
errorLow <- abs(biasLow)
facetVector <- c(labelHigh, labelMidHigh, labelMidLow, labelLow)
newScalesVector <- c(cellScaleFactorNewHigh, cellScaleFactorNewMidHigh,
cellScaleFactorNewMidLow, cellScaleFactorNewLow)
proportionsVector <- c(predictedProportionsHigh, predictedProportionsMidHigh,
predictedProportionsMidLow, predictedProportionsLow)
biasVector <- c(biasHigh, biasMidHigh, biasMidLow, biasLow)
errorVector <- c(errorHigh, errorMidHigh, errorMidLow, errorLow)
dfp2 <- do.call(rbind, lapply(seq(4), function(index){
facetValue <- facetVector[index]
newScalesValue <- newScalesVector[index]
predictedProportion <- proportionsVector[index]
biasValue <- biasVector[index]
errorValue <- errorVector[index]
cellScaleFactorChange <- newScalesValue-cellScaleFactorStart
proportionChange <- predictedProportion-predictedProportionsStart
biasChange <- biasValue-biasStart
errorChange <- errorValue-errorStart
markerExpressionChange <-
(markerExpression*newScalesValue)-markerExpression
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$type <- facetValue
return(dfpNew)
})) |> as.data.frame()
dfp2$Change <- ifelse(dfp2$value > 0, "Increase", "Decrease")
plot2 <- ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold"))
plot2
libv <- c("ggplot2", "reshape2", "gridExtra", "lute")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change and point value examples for change in cellScaleFactor.
#
#
#
#-----------
# set params
#-----------
# set starting params (conditions for example)
cellScaleFactorStart <- 10
cellScaleFactorOffTypeValue <- 3 # this doesn't change for demonstration
trueProportionValue <- 0.8
markerExpression <- 5
# set cell scale factors to change
cellScaleFactorNewHigh <- 0.95
cellScaleFactorNewMidHigh <- 0.75
cellScaleFactorNewMidLow <- 0.25
cellScaleFactorNewLow <- 0.05
# get changes for each iteration
changeNull <- 0
changeHigh <- cellScaleFactorNewHigh-cellScaleFactorStart
changeMidHigh <- cellScaleFactorNewMidHigh-cellScaleFactorStart
changeMidLow <- cellScaleFactorNewMidLow-cellScaleFactorStart
changeLow <- cellScaleFactorNewLow-cellScaleFactorStart
labelHigh <- paste0("Increase\n(cellScaleFactor = ",cellScaleFactorNewHigh,")")
labelMidHigh <- paste0("Moderate Inc.\n(cellScaleFactor = ",cellScaleFactorNewMidHigh,")")
labelMidLow <- paste0("Moderate Dec.\n(cellScaleFactor = ",cellScaleFactorNewMidLow,")")
labelLow <- paste0("Decrease\n(cellScaleFactor = ",cellScaleFactorNewLow,")")
#-----------------------
# get simulation results
#-----------------------
# get expression matrices
zrefExample <- matrix(c(markerExpression, 0, 0, markerExpression), nrow = 2)
colnames(zrefExample) <- c("type1", "type2")
bulkExpressionExample <- matrix(c(0.5,0.5), ncol = 1)
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
predictedProportionsStart <- newParam@predictionsTable[[1]]
predictedProportionsNull <- newParamNullScales@predictionsTable[[1]]
predictedProportionsHigh <- newParamHigh@predictionsTable[[1]]
predictedProportionsMidHigh <- newParamMidHigh@predictionsTable[[1]]
predictedProportionsMidLow <- newParamMidLow@predictionsTable[[1]]
predictedProportionsLow <- newParamLow@predictionsTable[[1]]
biasStart <- trueProportionValue-predictedProportionsStart
biasNull <- trueProportionValue-predictedProportionsNull
biasHigh <- trueProportionValue-predictedProportionsHigh
biasMidHigh <- trueProportionValue-predictedProportionsMidHigh
biasMidLow <- trueProportionValue-predictedProportionsMidLow
biasLow <- trueProportionValue-predictedProportionsLow
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
errorHigh <- abs(biasHigh)
errorMidHigh <- abs(biasMidHigh)
errorMidLow <- abs(biasMidLow)
errorLow <- abs(biasLow)
facetVector <- c(labelHigh, labelMidHigh, labelMidLow, labelLow)
newScalesVector <- c(cellScaleFactorNewHigh, cellScaleFactorNewMidHigh,
cellScaleFactorNewMidLow, cellScaleFactorNewLow)
proportionsVector <- c(predictedProportionsHigh, predictedProportionsMidHigh,
predictedProportionsMidLow, predictedProportionsLow)
biasVector <- c(biasHigh, biasMidHigh, biasMidLow, biasLow)
errorVector <- c(errorHigh, errorMidHigh, errorMidLow, errorLow)
dfp2 <- do.call(rbind, lapply(seq(4), function(index){
facetValue <- facetVector[index]
newScalesValue <- newScalesVector[index]
predictedProportion <- proportionsVector[index]
biasValue <- biasVector[index]
errorValue <- errorVector[index]
cellScaleFactorChange <- newScalesValue-cellScaleFactorStart
proportionChange <- predictedProportion-predictedProportionsStart
biasChange <- biasValue-biasStart
errorChange <- errorValue-errorStart
markerExpressionChange <-
(markerExpression*newScalesValue)-markerExpression
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$type <- facetValue
return(dfpNew)
})) |> as.data.frame()
dfp2$Change <- ifelse(dfp2$value > 0, "Increase", "Decrease")
plot2 <- ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold"))
plot2
cellScaleFactorChange
dfp2
log(-9)
ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold")) +
ylim(-1,1)
dfp2
head(dfp2)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/08_improvement/01_run_script.RData")
load("./env/08_improvement/02_simulation_script.RData")
knitr::opts_chunk$set(echo = FALSE)
libv <- c("lute", "ggplot2", "gridExtra", "reshape2", "ggforce")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/08_improvement/01_run_script.RData")
load("./env/08_improvement/02_simulation_script.RData")
knitr::opts_chunk$set(echo = FALSE)
dfPlot <- dfPseudobulkA
plot1 <- ggplot(dfPseudobulkA, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True")
plot2 <- ggplot(dfPseudobulkA, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition) + xlim(0, 0.5) + ylim(0, 0.5) +
ylab("Predicted") + xlab("True")
plot3 <- ggplot(dfPseudobulkA, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition) + xlim(0, 1) + ylim(0, 1) +
ylab("Predicted") + xlab("True")
plot1
plot2
plot3
# multiplot
textSize <- 30
plot1 <-
plot1 + xlab("") + ylab("") + ggtitle("Zoom1") +
theme(text = element_text(size=textSize),
axis.text.x = element_text(angle=45,hjust=1))
plot2 <-
plot2 + xlab("") + ylab("Predicted") + ggtitle("Zoom2") +
theme(text = element_text(size=textSize),
axis.text.x = element_text(angle=45,hjust=1))
plot3 <-
plot3 + xlab("") + ylab("True") + ggtitle("Zoom3") +
theme(text = element_text(size=textSize),
axis.text.x = element_text(angle=45,hjust=1))
grid.arrange(plot1, plot2, plot3, ncol = 1, top = "Plasmablasts")
dfPlot$condition
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True")
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True")
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, vjust = 1))
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
jpeg("./figures/04_transform/supplemental_figure2a.jpg", width = 10, height = 10, units = "in", res = 400)
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
jpeg("./figures/04_transform/supplemental_figure2a.jpg",
width = 10, height = 10, units = "in", res = 400)
dev.off()
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 10, height = 10, units = "in", res = 400)
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 10, height = 10, units = "in", res = 400)
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 10, height = 10, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 4, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 3, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 2.8, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 2.5, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
dfPlot$condition2 <-
factor(dfPlot$condition2, levels = c("scale", "noscale"))
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 2.5, units = "in", res = 400)
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "scale", "noscale")
dfPlot$condition2 <-
factor(dfPlot$condition2, levels = c("scale", "noscale"))
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 2.5, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
jpeg("figures/04_transform/supplemental_figure2b.jpg",
width = 4, height = 2.5, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 1) + ylim(0, 1) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
dfPlot <- dfPseudobulkA
dfPlot$condition2 <-
ifelse(dfPlot$condition=="scaled", "withscale", "noscale")
dfPlot$condition2 <-
factor(dfPlot$condition2, levels = c("noscale", "withscale"))
# zoom level 1, axis maximum 0.5
jpeg("figures/04_transform/supplemental_figure2a.jpg",
width = 4, height = 2.5, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 0.15) + ylim(0, 0.15) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# zoom level 2, axis maximum 1
jpeg("figures/04_transform/supplemental_figure2b.jpg",
width = 4, height = 2.5, units = "in", res = 400)
ggplot(dfPlot, aes(x = true.plasmablasts, y = Plasmablasts)) +
geom_point(size = 4, alpha = 0.5) + theme_bw() +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~condition2) + xlim(0, 1) + ylim(0, 1) +
ylab("Predicted") + xlab("True") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
