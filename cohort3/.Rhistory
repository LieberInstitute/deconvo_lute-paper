# get example bulk data
y <- get_decon_example_data()$y
# get example sce
sce <- random_sce()[seq(10),]
# get framework results
experiment.results <- lute(sce=sce, y=y, typemarker.algorithm=NULL)
experiment.results
error <- 5
error <- 5
error.vector <- rep(5, 5)
error.vector
error.vector^2
error.vector.sq <- error.vector^2
error.vector
error.vector.sq
sqrt(mean(error.vector.sq))
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 5
sqrt(mean(mean(error.vector)^2)) #
sqrt(mean(error.vector)^2)
mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Desktop/abisseq_analysis")
csvPath<-"./data/monaco_et_al_2019/abisseq_rnaseq_cell_types_references_k17.csv"
z<-read.csv(csvPath)
list.files("./data/monaco_et_al2019")
list.files("./data/")
file.files(data/monaco_et_al_2019/)
list.files("data/monaco_et_al_2019/")
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
z<-read.csv(csvPath)
z
head(z)
dim(z)
load("C:/Users/User/Desktop/abisseq_analysis/outputs/01_tpm_summaries/se_tpm_s13.rda")
dim(newSummarizedExperiment)
colnames(newSummarizedExperiment)
unique(newSummarizedExperiment$sample.id)
unique(newSummarizedExperiment$source.id)
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
cellSizes<-apply(z,2,sum)
cellSizes
z
class(z)
cellSizes<-apply(as.matrix(z),2,sum)
libv <- c("dplyr")
sapply(libv, library, character.only=T)
zTpm<-read.csv(csvPath)
cellSizes<-apply(as.matrix(z),2,sum)
cellSizes
apply(as.matrix(z),2,sum)
as.matrix(z)
apply(as.matrix(zTpm),2,sum)
class(zTpm)
zTpm<-read.csv(csvPath) %>% as.matrix()
class(zTpm)
head(zTpm)
zTpm<-read.csv(csvPath) %>% as.matrix() %>% as.numeric()
class(zTpm)
head(zTpm)
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
cellSizes<-apply(as.matrix(zTpm),2,sum)
cellSizes
as.matrix(zTpm)
head(as.matrix(zTpm))
zTpm<-read.csv(csvPath)
head(zTpm)
class(zTpm[,1])
zTpm<-read.csv(csvPath)
rownames(zTpm) <- zTpm[,1]
head(zTpm)
zTpm<-read.csv(csvPath)
rownames(zTpm) <- zTpm[,1]
head(ztpm)
head(zTpm)
zTpm<-read.csv(csvPath)
rownames(zTpm) <- zTpm[,1]
zTpm<-read.csv(csvPath)
rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[unique(zTpm[,1]),]
dim(zTpm)
libv <- c("dplyr")
sapply(libv, library, character.only=T)
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
zTpm <- zTpm[unique(zTpm[,1]),]
rownames(zTpm) <- paste0("symbol:",zTpm[,1])
libv <- c("dplyr")
sapply(libv, library, character.only=T)
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
zTpm <- zTpm[!duplicated(zTpm[,1]),]
rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
dim(zTpm)
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
head(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
cellSizes
library(lute)
BiocManager::install("lute")
libv <- c("dplyr", "lute")
sapply(libv, library, character.only=T)
BiocManager::install("lute")
BiocManager::install("lute")
zTpm
head(zTpm)
library(lute)
?lute:::z_matrix_from_sce
?nnlsParma
?nnlsParam
nnlsParam(NULL,zTpm,cellSizes)
nnlsParam(matrix(),zTpm,cellSizes)
zTpm <- as.matrix(zTpm)
nnlsParam(matrix(),zTpm,cellSizes)
param <- nnlsParam(matrix(),zTpm,cellSizes)
param@referenceExpression
paramUntransform <- nnlsParam(matrix(),zTpm,NULL)
paramUntransform <- nnlsParam(matrix(),zTpm,rep(1,ncol(zTpm)))
head(paramUntransform@referenceExpression)
paramUntransform <- nnlsParam(matrix(),zTpm,rep(1,ncol(zTpm)))
paramTransform <- nnlsParam(matrix(),zTpm,cellSizes)
head(paramTransform@referenceExpression)
head(paramUntransform@referenceExpression)
cellSizes
paramTransform@returnInfo
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <- read.csv("./data/zref_abisseq.csv")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <-
read.csv("./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv") #read.csv("./data/zref_abisseq.csv")
ptrue <-
read.csv("./data/monaco_et_al_2019/manuscript/flow_cytometry_true_cell_type_proportions") #read.csv("./data/ptrue_abis.csv")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <-
read.csv("./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv") #read.csv("./data/zref_abisseq.csv")
ptrue <-
read.csv("./data/monaco_et_al_2019/manuscript/flow_cytometry_true_cell_type_proportions.csv") #read.csv("./data/ptrue_abis.csv")
load("./env/01_tpm_summaries/01_read_script.RData")
#--------------
# format inputs
#--------------
# zref
zref <- zref[!zref[,1]=="12:00 AM",]
rownames(zref) <- zref[,1]
zref <- zref[,c(2:ncol(zref))]
# se
rownames(se) <- rowData(se)$gene_symbol
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <-
read.csv("./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv") #read.csv("./data/zref_abisseq.csv")
ptrue <-
read.csv("./data/monaco_et_al_2019/manuscript/flow_cytometry_true_cell_type_proportions.csv") #read.csv("./data/ptrue_abis.csv")
load("./outputs/01_tpm_summaries/se_tpm_s13.rda")
#--------------
# format inputs
#--------------
# zref
zref <- zref[!zref[,1]=="12:00 AM",]
rownames(zref) <- zref[,1]
zref <- zref[,c(2:ncol(zref))]
# se
rownames(se) <- rowData(se)$gene_symbol
dim(se)
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
zref <-
read.csv("./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv") #read.csv("./data/zref_abisseq.csv")
ptrue <-
read.csv("./data/monaco_et_al_2019/manuscript/flow_cytometry_true_cell_type_proportions.csv") #read.csv("./data/ptrue_abis.csv")
se <- get(load("./outputs/01_tpm_summaries/se_tpm_s13.rda"))
#--------------
# format inputs
#--------------
# zref
zref <- zref[!zref[,1]=="12:00 AM",]
rownames(zref) <- zref[,1]
zref <- zref[,c(2:ncol(zref))]
# se
rownames(se) <- rowData(se)$gene_symbol
filter.rows <- !(duplicated(rownames(se))|is.na(rownames(se)))
se <- se[filter.rows,]
# ptrue
df.proportions <- ptrue
df.proportions <- df.proportions[c(3:nrow(df.proportions)),]
colnames(df.proportions) <- c("cell.type",
"flow.cyto.mean",
"flow.cyto.sd",
"mrna.yield.mean",
"mrna.yield.sd")
for(c in c(2:5)){df.proportions[,c] <- as.numeric(df.proportions[,c])}
# format cell type names: "T gd non Vd2"
df.proportions[df.proportions$cell.type=="T gd non-Vd2",]$cell.type <- "T gd non Vd2"
# get collapsed cell type ids
list.cell.type.names <- list("T CD8 Memory", "Monocytes NC I")
list.cell.types.vectors <- list(
c("T CD8 CM", "T CD8 EM"), c("Monocytes NC", "Monocytes I")
)
for(index in seq(list.cell.type.names)){
new.cell.type.name <- list.cell.type.names[[index]]
cell.types.vector <- list.cell.types.vectors[[index]]
new.row <- apply(df.proportions[df.proportions$cell.type %in% cell.types.vector,c(2:5)],2,mean)
new.row <- c(new.cell.type.name, new.row)
df.proportions <- as.data.frame(rbind(df.proportions, new.row))
for(c in c(2:5)){df.proportions[,c] <- as.numeric(df.proportions[,c])}
# drop old ids
df.proportions <- df.proportions[!df.proportions$cell.type %in% cell.types.vector,]
}
#-----------------------
# get cell scale factors
#-----------------------
# marker library size
s.vector <- colSums(zref)
#------------
# run deconvo
#------------
result.unscaled <- lute(
z = as.matrix(zref),
y = as.matrix(assays(se)[["tpm"]]),
assay.name = 'tpm',
typemarker.algorithm = NULL
)
names(assays(se))
?llute
?lute
result.unscaled <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["tpm"]]),
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
result.scaled <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["tpm"]]),
cellScaleFactor = s.vector,
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
names(assays(se))
# log2 tpm + 1
resultUnscaledLog2Tpm <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["log2_tpm_plus_one"]]),
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
resultScaledLog2Tpm <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["log2_tpm_plus_one"]]),
cellScaleFactor = s.vector,
assayName = 'tpm',
typemarkerAlg
resultScaledTpm
resultScaledTpm
resultUnscaledTpm
# tpm
resultUnscaledTpm <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["tpm"]]),
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
resultUnscaledTpm
names(resultUnscaledTpm)
resultUnscaledTpm[[1]]
resultUnscaledTpm <- lute(
referenceExpression = as.matrix(zref),
bulkExpression = as.matrix(assays(se)[["tpm"]]),
assayName = 'tpm',
typemarkerAlgorithm = NULL,
returnInfo = TRUE
)
resultUnscaledTpm[[1]]@
resultUnscaledTpm[[1]]@
""
resultUnscaledTpm[[1]]
resultUnscaledTpm[[1]]$result.info$DZQV_Th1
?lute:::z_matrix_from_sce
deconvolution()
deconvolution
.zstransform
lute:::.zstransform()
lute:::.zstransform
?lute:::..zstransform
?lute:::.zstransform
lute::.zstransform
lute:::.zstransform
lute:::.zstransform(zTpm, cellSizes)
gc()
libv <- c("dplyr", "lute")
sapply(libv, library, character.only=T)
csvPath<-"./data/monaco_et_al_2019/manuscript/abisseq_rnaseq_cell_types_references_k17.csv"
zTpm<-read.csv(csvPath)
zTpm <- zTpm[!duplicated(zTpm[,1]),]
rownames(zTpm) <- paste0("symbol:",zTpm[,1])
zTpm <- zTpm[,seq(2,ncol(zTpm))]
for(c in seq(ncol(zTpm))){zTpm[,c] <- as.numeric(zTpm[,c])}
zTpm <- as.matrix(zTpm)
cellSizes<-apply(as.matrix(zTpm),2,sum)
lute:::.zstransform(zTpm, cellSizes)
head(ztpm)
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
head(zTpmTransformed)
libv <- c("dplyr", "lute", "ComplexHeatmap")
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
Heatmap(zTpmTransformed)
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
zTpmTransformed <- lute:::.zstransform(zTpm, cellSizes)
Heatmap(zTpmTransformed)
Heatmap(zTpm)
save.image(file="./env/04_transform/01_transform_script.RData")
save.image(file="./env/04_transform/01_transform_script.RData")
?save.image
save.image(file="./env/04_transform/01_transform_script.RData")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
save.image(file="./env/04_transform/01_transform_script.RData")
