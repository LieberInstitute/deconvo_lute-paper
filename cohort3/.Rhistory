error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_commentary-paper")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
setwd("C:/Users/User/Documents/GitHub")
library(ggplot2)
library(dplyr)
library(scales)
#----------
# load data
#----------
csv.name <- "table-s1_tissue-references.csv"
csv.path <- file.path("deconvo_commentary-paper", "data", csv.name)
csv <- read.csv(csv.path)
# year
csv$year <- gsub(".* ", "", csv$citation)
# set all tissues
csv$tissues <- paste0(csv$tissues, ";all_tissues")
# format tissues
unique.tissues <- strsplit(csv$tissues, ";") %>% unlist() %>% unique()
tx.filter <- c("")
unique.tissues <- unique.tissues[!unique.tissues %in% tx.filter]
tx.counts.list <- lapply(unique.tissues, function(tx){
nrow(csv[grepl(paste0("(^|;)", tx, "(;|$)"), csv[,3]),])
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
# get plot data
plot.data <- tx.counts.table
plot.data$references <- as.numeric(plot.data$references)
ref.order <- order(plot.data$references) %>% rev()
ref.levels <- plot.data$tx[ref.order]
plot.data$tx <- factor(plot.data$tx, levels = ref.levels)
plot.data <- plot.data[seq(15),]
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
seq.year <- seq(min(csv$year), max(csv$year), 1)
ref.all.vector <- c()
df.cumul <- lapply(seq.year, function(year.iter){
year.filter <- csv$year <= year.iter
csvf <- csv[year.filter,]
tx.counts.list <- lapply(unique.tissues, function(tx){
tx.filter <- grepl(paste0("(^|;)", tx, "(;|$)"), csvf[,3])
csvf[tx.filter,] %>% nrow()
})
tx.counts.table <- do.call(rbind, tx.counts.list) %>% as.data.frame()
colnames(tx.counts.table) <- "references"
tx.counts.table$tx <- unique.tissues
tx.counts.table$year <- year.iter
tx.counts.table
})
df.cumul <- do.call(rbind, df.cumul) %>% as.data.frame()
tx.filter <- c("all_tissues", "tumor", "brain", "immune_cell", "blood", "pancreas")
df.cumul <- df.cumul[df.cumul$tx %in% tx.filter,]
# convert all
df.cumul$year <- as.integer(df.cumul$year)
df.cumul$Tissue <- df.cumul$tx
# save new plot
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
ggplot(df.cumul, aes(x = year, y = references,
color = "gray", shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
df.cumul
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
dev.off()
dev.off()
ggplot(df.cumul,
aes(x = year, y = references, color = "gray",
shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
jpeg("lineplot_cumulative-refs-by-tissue.jpg", width = 5, height = 2.5,
units = "in", res = 600)
ggplot(df.cumul,
aes(
x = year, y = references, shape = Tissue, lty = Tissue)) + theme_bw() +
geom_point(size = 2) + geom_line(linewidth = 0.5) +
scale_x_continuous(breaks=pretty_breaks()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Year") + ylab("Cumulative literature\nreferences")
dev.off()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/05_summaries/01_run_script.RData")
y <- experimentData$y.table
z <- experimentData$z
ptrue <- experimentData$p.true
data <- z
cellTypes <- colnames(data)
cellTypes
length(unique(cellTypes))
cellTypeVector <- colnames(z)
cellTypeVector
isTcellString <- "^T .*|^T\\..*"
isBcellString <- "^B .*|^B\\..*"
isTcell <- grepl(isTcellString, cellTypeVector)
isBcell <- grepl(isBcellString, cellTypeVector)
isOther <- !(isTcell|isBcell)
isTcell
length(which(isTcell))/length(isTcell)
totalCell <- length(cellTypeVector)
cellCategorySummaries <- function(cellTypeVector){
totalCell <- length(cellTypeVector)
isTcellString <- "^T .*|^T\\..*"
isBcellString <- "^B .*|^B\\..*"
isTcell <- grepl(isTcellString, cellTypeVector)
isBcell <- grepl(isBcellString, cellTypeVector)
isOther <- !(isTcell|isBcell)
numTcell <- length(which(isTcell))
numBcell <- length(which(isBcell))
numOther <- length(which(isOther))
fractionTcell <- numTcell/totalCell
fractionBcell <- numBcell/totalCell
fractionOther <- numOther/totalCell
tCellLabels <- paste0(cellTypeVector,collapse=";")
bCellLabels <- paste0(cellTypeVector,collapse=";")
otherCellLabels <- paste0(cellTypeVector,collapse=";")
dfSummary <- data.frame(
typeCount = c(numTcell, numBcell, numOther),
typeFraction = c(fractionTcell, fractionBcell, fractionOther),
typeLabels = c(tCellLabels, bCellLabels, otherCellLabels)
)
return(dfSummary)
}
cellCategorySummaries(cellTypeVector)
cellCategorySummaries <- function(cellTypeVector){
totalCell <- length(cellTypeVector)
isTcellString <- "^T .*|^T\\..*"
isBcellString <- "^B .*|^B\\..*"
isTcell <- grepl(isTcellString, cellTypeVector)
isBcell <- grepl(isBcellString, cellTypeVector)
isOther <- !(isTcell|isBcell)
numTcell <- length(which(isTcell))
numBcell <- length(which(isBcell))
numOther <- length(which(isOther))
fractionTcell <- numTcell/totalCell
fractionBcell <- numBcell/totalCell
fractionOther <- numOther/totalCell
tCellLabels <- paste0(cellTypeVector[isTcell],collapse=";")
bCellLabels <- paste0(cellTypeVector[isBcell],collapse=";")
otherCellLabels <- paste0(cellTypeVector[isOther],collapse=";")
dfSummary <- data.frame(
typeCount = c(numTcell, numBcell, numOther),
typeFraction = c(fractionTcell, fractionBcell, fractionOther),
typeLabels = c(tCellLabels, bCellLabels, otherCellLabels)
)
return(dfSummary)
}
cellCategorySummaries(cellTypeVector)
cellCategorySummaries <- function(cellTypeVector){
totalCell <- length(cellTypeVector)
isTcellString <- "^T .*|^T\\..*"
isBcellString <- "^B .*|^B\\..*"
isTcell <- grepl(isTcellString, cellTypeVector)
isBcell <- grepl(isBcellString, cellTypeVector)
isOther <- !(isTcell|isBcell)
numTcell <- length(which(isTcell))
numBcell <- length(which(isBcell))
numOther <- length(which(isOther))
fractionTcell <- numTcell/totalCell
fractionBcell <- numBcell/totalCell
fractionOther <- numOther/totalCell
tCellLabels <- paste0(cellTypeVector[isTcell],collapse=";")
bCellLabels <- paste0(cellTypeVector[isBcell],collapse=";")
otherCellLabels <- paste0(cellTypeVector[isOther],collapse=";")
dfSummary <- data.frame(
type = c("T-cell", "B-cell", "Other (not T- or B-cell)"),
typeCount = c(numTcell, numBcell, numOther),
typeFraction = c(fractionTcell, fractionBcell, fractionOther),
typeLabels = c(tCellLabels, bCellLabels, otherCellLabels)
)
rownames(dfSummary)
return(dfSummary)
}
cellCategorySummaries(cellTypeVector)
```{r}
zCellTypes <- colnames(z)
zSummaries <- cellCategorySummaries(zCellTypes)
zSummaries
pCellTypes <- colnames(ptrue)
pSummaries <- cellCategorySummaries(pCellTypes)
pSummaries
yCellTypes <- colnames(y)
ySummaries <- cellCategorySummaries(yCellTypes)
ySummaries
allSummaries <- rbind(
zSummaries, rbind(pSummaries, ySummaries)
) |> as.data.frame()
allSummaries
ySummaries
dim(y)
head(y)
dim(z)
dim(ptrue)
head(allSummarie)
head(allSummaries)
allSummaries <- rbind(
zSummaries, rbind(pSummaries, ySummaries)
) |> as.data.frame()
allSummaries <- allSummaries[,seq(1:3)]
head(allSummaries)
allSummaries <- rbind(
zSummaries, rbind(pSummaries, ySummaries)
) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3), rep("y", 3)
)
allSummaries <- allSummaries[,seq(1:3)]
allSummaries
head(colnames(y))
dim(y)
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
allSummaries <- allSummaries[,seq(1:3)]
allSummaries
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
allSummaries <- allSummaries[,seq(1:3)]
allSummaries
allSummaries
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
allSummaries
allSummaries <- rbind(
zSummaries, rbind(pSummaries, ySummaries)
) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3), rep("y", 3)
)
allSummaries <- allSummaries[,seq(1:3)]
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
allSummaries
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
knitr::kable(allSummaries, align = "c")
colData(experimentData$y.se)
#!/usr/bin/env R
# Author: Sean Maden
#
# Summarize dataset elements.
#
# * "GSE107011_Processed_data_TPM.txt", GEO record.
#
#
#
#
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
source("./source/00_read_experiment_data.R")
experimentData <- getExperimentData()
#!/usr/bin/env R
# Author: Sean Maden
#
# Summarize dataset elements.
#
# * "GSE107011_Processed_data_TPM.txt", GEO record.
#
#
#
#
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
source("./source/00_read_experiment_data.R")
experimentData <- getExperimentData()
save.image("./env/05_summaries/01_run_script.RData")
head(colData(experimentData$y.se))
colData(ySe)
gc()
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/05_summaries/01_run_script.RData")
source("./source/00_cell_type_management.R")
y <- experimentData$y.table
z <- experimentData$z
ptrue <- experimentData$p.true
data <- z
cellTypes <- colnames(data)
cellTypes
length(unique(cellTypes))
data <- ptrue
cellTypes <- colnames(ptrue)
cellTypes
length(unique(cellTypes))
data <- z
cellTypes <- colnames(data)
cellTypes
length(unique(cellTypes))
zCellTypes <- colnames(z)
zSummaries <- cellCategorySummaries(zCellTypes)
zSummaries
pCellTypes <- colnames(ptrue)
pSummaries <- cellCategorySummaries(pCellTypes)
pSummaries
yCellTypes <- unique(experimentData$y.se)
ySummaries <- cellCategorySummaries(yCellTypes)
ySummaries
allSummaries <- rbind(
zSummaries, rbind(pSummaries, ySummaries)
) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3), rep("y", 3)
)
knitr::kable(allSummaries, align = "c")
allSummaries <- rbind(zSummaries, pSummaries) |> as.data.frame()
allSummaries$data <- c(
rep("Z", 3), rep("p", 3)
)
knitr::kable(allSummaries, align = "c")
gc()
y <- experimentData$y.table
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/05_summaries/01_run_script.RData")
source("./source/00_cell_type_management.R")
y <- experimentData$y.table
z <- experimentData$z
ptrue <- experimentData$p.true
data <- z
cellTypes <- colnames(data)
cellTypes
length(unique(cellTypes))
data <- ptrue
cellTypes <- colnames(ptrue)
cellTypes
length(unique(cellTypes))
dim(ptrue)
