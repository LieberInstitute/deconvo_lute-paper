cell.type = df.rmse.scaled$cell.type,
rmse.scaled = df.rmse.scaled$rmse,
rmse.unscaled = df.rmse.unscaled$rmse,
pearson.r.scaled = df.rmse.scaled$pearson.r,
pearson.r.unscaled = df.rmse.unscaled$pearson.r,
pearson.pval.scaled = df.rmse.scaled$pearson.pval,
pearson.pval.unscaled = df.rmse.unscaled$pearson.pval
)
# append cell sizes
df.rmse.wide$s.cell.size <- df.rmse.tall$s.cell.size <- "NA"
for(cell.type in df.rmse.wide$cell.type){
cell.size.iter <- df.tall[df.tall$cell.type==cell.type,]$s.cell.size[1]
df.rmse.wide[df.rmse.wide$cell.type==cell.type,]$s.cell.size <-
df.rmse.tall[df.rmse.tall$cell.type==cell.type,]$s.cell.size <-
cell.size.iter
}
# format
for(c in c(2:4)){
df.rmse.wide[,c] <- as.numeric(df.rmse.wide[,c])}
for(c in c(2,4)){
df.rmse.tall[,c] <- as.numeric(df.rmse.tall[,c])}
#-----
# save
#-----
save.image("./env/02_abisseq/03_rmse_script.RData")
knitr::kable(df.rmse.wide)
df.rmse.wide
knitr::kable(df.rmse.wide)
ggplot(df.rmse.wide, aes(x = rmse.unscaled, y = rmse.scaled,
color = cell.type, size = s.cell.size)) + geom_point() +
geom_abline(slope = 1, intercept = 0)
ggplot(df.rmse.wide, aes(x = rmse.unscaled, y = rmse.scaled,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
head(df.rmse.wide)
ggplot(df.rmse.wide, aes(x = pearson.r.unscaled, y = pearson.r.scaled,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
colnames(df.rmse.wide)
colnames(df.rmse.tall)
c(2:4,6)
# format
for(c in c(2:8)){
df.rmse.wide[,c] <- as.numeric(df.rmse.wide[,c])}
for(c in c(2:4,6)){
df.rmse.tall[,c] <- as.numeric(df.rmse.tall[,c])}
ggplot(df.rmse.wide, aes(x = pearson.r.unscaled, y = pearson.r.scaled,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
ggplot(df.rmse.wide, aes(x = rmse.unscaled, y = rmse.scaled,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
head(df.rmse.tall)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled=df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled=df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) + geom_vline(xinter = 0)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled=df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled=df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled=df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
xlab("RMSE difference (Scaled - Unscaled)") +
ylab("Pearson R difference (Scaled - Unscaled)")
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Append FC proportions and get RMSE by sample for S13 PBMC samples.
#
libv <- c("lute", "SummarizedExperiment")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
load("./env/02_abisseq/01_abisseq_script.RData")
load("./env/02_abisseq/02_proportions_s13_script.Rdata")
df1 <- df.plot.tall.s13
df2 <- fc.proportions
#-------------------------------------------------------------
# get fc proportions as fractions of reference cells available
#-------------------------------------------------------------
# subset cells
vector.available.cells <- colnames(df1)[1:15]
df2 <- df2[,c(1,which(colnames(df2) %in% vector.available.cells))]
# convert to fractions
total.proportions <- rowSums(df2[,c(2:ncol(df2))])
df2[,c(2:ncol(df2))] <- t(
apply(
df2[,c(2:ncol(df2))], 1, function(ri){
ri/sum(ri)}))
# check
rowSums(df2[,c(2:ncol(df2))])==1
#---------------------------------------
# append true proportions to predictions
#---------------------------------------
# differentiate cell column names
colnames(df1)[1:15] <- paste0(colnames(df1)[1:15],".nnls.pred")
colnames(df2)[2:ncol(df2)] <- paste0(colnames(df2)[2:ncol(df2)], ".fc.true")
# format sample ids
df1$sample.id.format <- gsub("_.*", "", df1$sample.id)
df2$sample.id.format <- gsub("_.*", "", df2$Sample.Name)
intersecting.sample.id <- intersect(df2$sample.id.format, df1$sample.id.format)
# merge
df3 <- merge(df1, df2, by = "sample.id.format")
# spot checks
cell.type.iter.df1 <- colnames(df1)[1]
cell.type.iter.df2 <- colnames(df2)[2]
sample.id.iter <- intersecting.sample.id[1]
df1[df1$sample.id.format==sample.id.iter,
cell.type.iter.df1]
df2[df2$sample.id.format==sample.id.iter,
cell.type.iter.df2]
df3[df3$sample.id.format==sample.id.iter,
cell.type.iter.df1]
df3[df3$sample.id.format==sample.id.iter,
cell.type.iter.df2]
#---------------
# calculate RMSE
#---------------
# get bias, error, rmse, correlations
df.rmse.scaled <- df.rmse.unscaled <- data.frame(cell.type = vector.available.cells)
df.rmse.scaled$rmse <- df.rmse.unscaled$rmse <-
df.rmse.scaled$pearson.r <- df.rmse.unscaled$pearson.r <-
df.rmse.scaled$pearson.pval <- df.rmse.unscaled$pearson.pval<- "NA"
for(cell.type in vector.available.cells){
message(cell.type)
vector.pred <- df3[,grepl(cell.type, colnames(df3)) & grepl("nnls.pred", colnames(df3))]
vector.true <- df3[,grepl(cell.type, colnames(df3)) & grepl("fc.true", colnames(df3))]
df3[,ncol(df3)+1] <- vector.pred-vector.true
colnames(df3)[ncol(df3)] <- paste0(cell.type,".bias.pred.true")
df3[,ncol(df3)+1] <- abs(vector.pred-vector.true)
colnames(df3)[ncol(df3)] <- paste0(cell.type,".error.pred.true")
# append rmse
df.rmse.scaled[df.rmse.scaled==cell.type,]$rmse <- sqrt(
mean(
df3[
df3$type=="scaled",paste0(cell.type,".error.pred.true")]^2))
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$rmse <- sqrt(
mean(
df3[
df3$type=="unscaled", paste0(cell.type,".error.pred.true")]^2))
# append correlation results
cor.test.scaled <- cor.test(vector.pred[df3$type=="scaled"],
vector.true[df3$type=="scaled"],
method="pearson")
cor.test.unscaled <- cor.test(vector.pred[df3$type=="unscaled"],
vector.true[df3$type=="unscaled"],
method="pearson")
df.rmse.scaled[df.rmse.scaled==cell.type,]$pearson.r <-
round(cor.test.scaled$estimate,4)
df.rmse.scaled[df.rmse.scaled==cell.type,]$pearson.pval <-
round(cor.test.scaled$p.value,4)
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$pearson.r <-
round(cor.test.unscaled$estimate,4)
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$pearson.pval <-
round(cor.test.unscaled$p.value,4)
}
df.rmse.scaled$type <- "scaled"
df.rmse.unscaled$type <- "unscaled"
# df.rmse final tables
df.rmse.tall <- as.data.frame(
rbind(df.rmse.scaled, df.rmse.unscaled))
df.rmse.wide <- data.frame(
cell.type = df.rmse.scaled$cell.type,
rmse.scaled = df.rmse.scaled$rmse,
rmse.unscaled = df.rmse.unscaled$rmse,
pearson.r.scaled = df.rmse.scaled$pearson.r,
pearson.r.unscaled = df.rmse.unscaled$pearson.r,
pearson.pval.scaled = df.rmse.scaled$pearson.pval,
pearson.pval.unscaled = df.rmse.unscaled$pearson.pval
)
# append cell sizes
df.rmse.wide$s.cell.size <- df.rmse.tall$s.cell.size <- "NA"
for(cell.type in df.rmse.wide$cell.type){
cell.size.iter <- df.tall[df.tall$cell.type==cell.type,]$s.cell.size[1]
df.rmse.wide[df.rmse.wide$cell.type==cell.type,]$s.cell.size <-
df.rmse.tall[df.rmse.tall$cell.type==cell.type,]$s.cell.size <-
cell.size.iter
}
# format
for(c in c(2:8)){
df.rmse.wide[,c] <- as.numeric(df.rmse.wide[,c])}
for(c in c(2:4,6)){
df.rmse.tall[,c] <- as.numeric(df.rmse.tall[,c])}
#-----
# save
#-----
save.image("./env/02_abisseq/03_rmse_script.RData")
?format
#!/usr/bin/env R
# Author: Sean Maden
#
# Append FC proportions and get RMSE by sample for S13 PBMC samples.
#
libv <- c("lute", "SummarizedExperiment")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
load("./env/02_abisseq/01_abisseq_script.RData")
load("./env/02_abisseq/02_proportions_s13_script.Rdata")
df1 <- df.plot.tall.s13
df2 <- fc.proportions
#-------------------------------------------------------------
# get fc proportions as fractions of reference cells available
#-------------------------------------------------------------
# subset cells
vector.available.cells <- colnames(df1)[1:15]
df2 <- df2[,c(1,which(colnames(df2) %in% vector.available.cells))]
# convert to fractions
total.proportions <- rowSums(df2[,c(2:ncol(df2))])
df2[,c(2:ncol(df2))] <- t(
apply(
df2[,c(2:ncol(df2))], 1, function(ri){
ri/sum(ri)}))
# check
rowSums(df2[,c(2:ncol(df2))])==1
#---------------------------------------
# append true proportions to predictions
#---------------------------------------
# differentiate cell column names
colnames(df1)[1:15] <- paste0(colnames(df1)[1:15],".nnls.pred")
colnames(df2)[2:ncol(df2)] <- paste0(colnames(df2)[2:ncol(df2)], ".fc.true")
# format sample ids
df1$sample.id.format <- gsub("_.*", "", df1$sample.id)
df2$sample.id.format <- gsub("_.*", "", df2$Sample.Name)
intersecting.sample.id <- intersect(df2$sample.id.format, df1$sample.id.format)
# merge
df3 <- merge(df1, df2, by = "sample.id.format")
# spot checks
cell.type.iter.df1 <- colnames(df1)[1]
cell.type.iter.df2 <- colnames(df2)[2]
sample.id.iter <- intersecting.sample.id[1]
df1[df1$sample.id.format==sample.id.iter,
cell.type.iter.df1]
df2[df2$sample.id.format==sample.id.iter,
cell.type.iter.df2]
df3[df3$sample.id.format==sample.id.iter,
cell.type.iter.df1]
df3[df3$sample.id.format==sample.id.iter,
cell.type.iter.df2]
#---------------
# calculate RMSE
#---------------
num.digits.round <- 3
# get bias, error, rmse, correlations
df.rmse.scaled <- df.rmse.unscaled <- data.frame(cell.type = vector.available.cells)
df.rmse.scaled$rmse <- df.rmse.unscaled$rmse <-
df.rmse.scaled$pearson.r <- df.rmse.unscaled$pearson.r <-
df.rmse.scaled$pearson.pval <- df.rmse.unscaled$pearson.pval<- "NA"
for(cell.type in vector.available.cells){
message(cell.type)
vector.pred <- df3[,grepl(cell.type, colnames(df3)) & grepl("nnls.pred", colnames(df3))]
vector.true <- df3[,grepl(cell.type, colnames(df3)) & grepl("fc.true", colnames(df3))]
df3[,ncol(df3)+1] <- vector.pred-vector.true
colnames(df3)[ncol(df3)] <- paste0(cell.type,".bias.pred.true")
df3[,ncol(df3)+1] <- abs(vector.pred-vector.true)
colnames(df3)[ncol(df3)] <- paste0(cell.type,".error.pred.true")
# append rmse
df.rmse.scaled[df.rmse.scaled==cell.type,]$rmse <- round(
sqrt(
mean(
df3[
df3$type=="scaled",paste0(cell.type,".error.pred.true")]^2)),
num.digits.round)
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$rmse <- round(
sqrt(
mean(
df3[
df3$type=="unscaled", paste0(cell.type,".error.pred.true")]^2)),
num.digits.round)
# append correlation results
cor.test.scaled <- cor.test(vector.pred[df3$type=="scaled"],
vector.true[df3$type=="scaled"],
method="pearson")
cor.test.unscaled <- cor.test(vector.pred[df3$type=="unscaled"],
vector.true[df3$type=="unscaled"],
method="pearson")
df.rmse.scaled[df.rmse.scaled==cell.type,]$pearson.r <-
round(cor.test.scaled$estimate, num.digits.round)
df.rmse.scaled[df.rmse.scaled==cell.type,]$pearson.pval <-
round(cor.test.scaled$p.value, num.digits.round)
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$pearson.r <-
round(cor.test.unscaled$estimate, num.digits.round)
df.rmse.unscaled[df.rmse.unscaled==cell.type,]$pearson.pval <-
round(cor.test.unscaled$p.value, num.digits.round)
}
df.rmse.scaled$type <- "scaled"
df.rmse.unscaled$type <- "unscaled"
# df.rmse final tables
df.rmse.tall <- as.data.frame(
rbind(df.rmse.scaled, df.rmse.unscaled))
df.rmse.wide <- data.frame(
cell.type = df.rmse.scaled$cell.type,
rmse.scaled = df.rmse.scaled$rmse,
rmse.unscaled = df.rmse.unscaled$rmse,
pearson.r.scaled = df.rmse.scaled$pearson.r,
pearson.r.unscaled = df.rmse.unscaled$pearson.r,
pearson.pval.scaled = df.rmse.scaled$pearson.pval,
pearson.pval.unscaled = df.rmse.unscaled$pearson.pval
)
# append cell sizes
df.rmse.wide$s.cell.size <- df.rmse.tall$s.cell.size <- "NA"
for(cell.type in df.rmse.wide$cell.type){
cell.size.iter <- format(
df.tall[df.tall$cell.type==cell.type,]$s.cell.size[1],
scientific = TRUE, digits = num.digits.round)
df.rmse.wide[df.rmse.wide$cell.type==cell.type,]$s.cell.size <-
df.rmse.tall[df.rmse.tall$cell.type==cell.type,]$s.cell.size <-
cell.size.iter
}
# format
for(c in c(2:8)){
df.rmse.wide[,c] <- as.numeric(df.rmse.wide[,c])}
for(c in c(2:4,6)){
df.rmse.tall[,c] <- as.numeric(df.rmse.tall[,c])}
#-----
# save
#-----
save.image("./env/02_abisseq/03_rmse_script.RData")
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled-df.rmse.wide$rmse.unscaled
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
ggplot(df.rmse.wide, aes(x = rmse.diff, y = pearson.r.diff,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
xlab("RMSE difference (Scaled - Unscaled)") +
ylab("Pearson R difference (Scaled - Unscaled)")
head(df3)
head(d2)
head(df)
head(df2)
?melt
libv <- c("ggplot2", "gridExtra", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/02_abisseq/03_rmse_script.RData")
?melt
head(df2)
df.plot <- melt(df2, value = sample.id.format)
head(df.plot)
df.plot <- melt(df2, value = sample.id.format)
ggplot(df.plot, aes(x = sample.id.format, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "stack")
df.plot <- melt(df2, value = sample.id.format)
ggplot(df.plot, aes(x = sample.id.format, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.plot <- melt(df2, value = sample.id.format)
colnames(df.plot) <- c("sample.name", "sample.id", "cell.type", "proportion")
ggplot(df.plot, aes(x = sample.id.format, y = proportion, fill = cell.type)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.plot <- melt(df2, value = sample.id.format)
colnames(df.plot) <- c("sample.name", "sample.id", "cell.type", "proportion")
ggplot(df.plot, aes(x = sample.id, y = proportion, fill = cell.type)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df.rmse.wide, aes(x = rmse.unscaled, y = rmse.scaled,
color = cell.type, size = s.cell.size)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
head(df.rmse.wide)
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled-df.rmse.wide$rmse.unscaled
ggplot(df.rmse.wide, aes(x = cell.type, y = rmse.diff)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled-df.rmse.wide$rmse.unscaled
df.rmse.wide$rmse.diff.direction <- ifelse(df.rmse.wide$rmse.diff>0, "red", "blue")
ggplot(df.rmse.wide, aes(x = cell.type, y = rmse.diff, fill = rmse.diff.direction)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled-df.rmse.wide$rmse.unscaled
df.rmse.wide$rmse.diff.direction <- ifelse(df.rmse.wide$rmse.diff>0, "red", "blue")
ggplot(df.rmse.wide,
aes(x = cell.type, y = rmse.diff, fill = rmse.diff.direction)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
df.rmse.wide$rmse.diff = df.rmse.wide$rmse.scaled-df.rmse.wide$rmse.unscaled
df.rmse.wide$rmse.diff.direction <- ifelse(df.rmse.wide$rmse.diff>0, "red", "blue")
ggplot(df.rmse.wide,
aes(x = cell.type, y = rmse.diff, fill = rmse.diff.direction)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
ylab("RMSE difference (Scaled - Unscaled)")
df.rmse.wide$pearson.r.diff = df.rmse.wide$pearson.r.scaled-df.rmse.wide$pearson.r.unscaled
df.rmse.wide$pearson.r.diff.direction <- ifelse(df.rmse.wide$pearson.r.diff>0, "red", "blue")
ggplot(df.rmse.wide,
aes(x = cell.type, y = pearson.r.diff, fill = pearson.r.diff.direction)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
ylab("Pearson R difference (Scaled - Unscaled)")
unique(df3$sample.id.format)
df2$sample.id.format[!df2$sample.id.format %in% df3$sample.id.format]
df1$sample.id.format[!df1$sample.id.format %in% df3$sample.id.format]
unique(df2$sample.id.format[!df2$sample.id.format %in% df3$sample.id.format])
unique(df1$sample.id.format[!df1$sample.id.format %in% df3$sample.id.format])
length(unique(df1$sample.id.format[!df1$sample.id.format %in% df3$sample.id.format]))
length(
unique(
df1$sample.id.format[!df1$sample.id.format %in% df3$sample.id.format]))
unique(df3$sample.id.format)
length(unique(df3$sample.id.format))
df.plot <- melt(df2, value = sample.id.format)
df.plot <- df.plot[df.plot$sample.id %in% df3$sample.id.format,]
colnames(df.plot) <- c("sample.name", "sample.id", "cell.type", "proportion")
ggplot(df.plot, aes(x = sample.id, y = proportion, fill = cell.type)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df.plot <- melt(df2, value = sample.id.format)
colnames(df.plot) <- c("sample.name", "sample.id", "cell.type", "proportion")
ggplot(df.plot, aes(x = sample.id, y = proportion, fill = cell.type)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("All F.C. proportions samples")
df.plot <- melt(df2, value = sample.id.format)
df.plot <- df.plot[df.plot$sample.id %in% df3$sample.id.format,]
colnames(df.plot) <- c("sample.name", "sample.id", "cell.type", "proportion")
ggplot(df.plot, aes(x = sample.id, y = proportion, fill = cell.type)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("S13 samples with predictions and F.C. proportions\n(RMSE samples)")
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
gc()
monaco.data <- get(load("./data/02_abisseq/csf_table.rda"))
load("./env/02_abisseq/01_abisseq_script.RData")
head(df.tall)
colnames(df.tall)
df.tall[,c(10,11)]
monaco.data
monaco.data <- monaco.data[grepl("Monaco", monaco.data$citation.s.),]
monaco.data
df.size
df.size <- df.tall[,c(10,11)]
df.size
monaco.data$cell_type
monaco.data$cell_type
df.size$cell.type
barplot(monaco.data$scale.factor.value)
View(prop.scaled)
monaco.data <- monaco.data[grepl("Monaco", monaco.data$citation.s.),]
vector.ref.size <- monaco.data$scale.factor.value
names(vector.ref.size) <- monaco.data$cell_type
monaco.data
vector.ref.size
df.size$cell.type
df.size <- df.tall[,c(10,11)]
df.size$s.cell.size.ref <- "NA"
df.size[grepl("T\\.CD4\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["T cells CD4"]
df.size[grepl("T\\.CD8\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["T cells CD8"]
df.size[grepl("B\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["B cells"]
df.size[grepl("Monocytes", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Monocytes"]
df.size[grepl("Neutrophils\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Neutrophils"]
df.size[grepl("NK", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["NK cells"]
df.size[grepl("Plasma\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Plasma cells"]
vector.ref.size["Plasma cells"]
grepl("Plasma\\..*", df.size$cell.type)
# map values
df.size <- df.tall[,c(10,11)]
df.size$s.cell.size.ref <- "NA"
df.size[grepl("T\\.CD4\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["T cells CD4"]
df.size[grepl("T\\.CD8\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["T cells CD8"]
df.size[grepl("B\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["B cells"]
df.size[grepl("Monocytes", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Monocytes"]
df.size[grepl("Neutrophils\\..*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Neutrophils"]
df.size[grepl("NK", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["NK cells"]
df.size[grepl("Plasma.*", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Plasma cells"]
df.size[grepl(".*DCs", df.size$cell.type),]$s.cell.size.ref <-
vector.ref.size["Dendritic cells"]
df.size
cor.test(df.size$s.cell.size.log, df.size$s.cell.size.ref)
class(df.size$s.cell.size.ref)
df.size$s.cell.size.ref <- as.numeric(df.size$s.cell.size.ref)
cor.test(df.size$s.cell.size.log, df.size$s.cell.size.ref)
