geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2b_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "figs1d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
new.plot <- ggplot(dfp.tall, aes(x = type, y = neuron.abs.error)) +
geom_jitter(alpha = 0.5, size = 3) +
geom_boxplot(color = "cyan", alpha = 0) +
theme_bw() +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1c_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 2, units = "in", res = 400)
new.plot
dev.off()
setwd("..")
setwd("..")
new.plot.name <- "figs1c_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k3_mrb_script.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "figs1d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
setwd("..")
setwd("..")
new.plot.name <- "fig2d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1f_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 4.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/02_k3.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2c_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 6, height = 3, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1e_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/01_k2.RData")
head(dfp.ct)
dim(dfp.ct)
summary(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
summary(dfp.ct$abs.error.noscale)
sd(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
sd(dfp.ct$abs.error.withscale)
head(dfp.ct)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
identical(dfp.tall$glial.abs.error)
identical(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
plot(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k2_mrb_script.RData")
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
packageVersion("lute")
?memory.limit
?install_github
library(devtools)
?install_github
packageVersion(lute)
packageVersion("lute")
packageVersion("lute")
devtools::install_github("metamaden/lute")
?install_version
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files()
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
list.files("./scdc/data")
#data <- get(load("./scdc/data/baron.rds"))
setwd("..")
data <- get(load("./scdc/data/baron.rds"))
?load
setwd("..")
data <- readRDS("./scdc/data/baron.rds")
dim(data)
data
data
dim(data)
metadata(data)
attributes(data)
phenoData(data)
colData(data)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data/baron.rds"
setwd("..")
list.files(data.path)
knitr::opts_chunk$set(echo = TRUE)
data.path <- "./scdc/data"
setwd("..")
list.files(data.path)
setwd("..")
data <- readRDS(file.path(data.path, "baron.rds"))
qc <- readRDS(file.path(data.path, "qc_baron.rds"))
qc
class(qc)
names(qc)
data
dim(data)
names(qc)
qc$prop.qc
class(qc$prop.qc)
names("qc_baron.rds")
names(qc$prop.qc)
rownames(qc$prop.qc)
dim(qc$prop.qc)
qc$sc.eset.qc
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq", z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq", y.file.name = "MIX3cl__bulkESET.rds")
knitr::kable(df.term)
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
file.path(data.path, paste0(dataset, "_bulkESET.rds"))
data.bulk
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESEt.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "_bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, paste0(dataset, "MIX3cl__bulkESET.rds")))
setwd("..")
dataset <- "MIX3cl"
data.sc <- readRDS(file.path(data.path, paste0(dataset, "_scESET.rds")))
data.bulk <- readRDS(file.path(data.path, "MIX3cl__bulkESET.rds"))
data.bulk
attributes(data.bulk)
phenoData(data.bulk)
as.data.frame(phenoData(data.bulk))
data.bulk@phenoData
data.bulk@phenoData@data
data.bulk@phenoData@varMetadata
data.bulk@phenoData
as.data.frame(data.bulk@phenoData)
data.bulk
experimentData(data.bulk)
ExpressionSet
?ExpressionSet
phenoData(data.bulk)
phenoData(data.bulk)$pdata
dim(data.bulk)
data.sc
colData(data.cs)
colData(data.sc)
phenoData(data.sc)
attributes(phenoData(data.sc))
phenoData(data.sc)@data
head(phenoData(data.sc)@data)
df.term <- data.frame(set.name = "3 cell lines",
z.term = "scRNAseq",
z.file.name = "MIX3cl_scESET.rds",
y.term = "bulk RNAseq",
y.file.name = "MIX3cl__bulkESET.rds",
p.true = "6:3:1",
p.true.celltypes = "hbc;MCF7;hf")
knitr::kable(df.term)
library(lute)
?lute
# get example bulk data
y <- get_decon_example_data()$y
# get example sce
sce <- random_sce()[seq(10),]
# get framework results
experiment.results <- lute(sce=sce, y=y, typemarker.algorithm=NULL)
experiment.results
error <- 5
error <- 5
error.vector <- rep(5, 5)
error.vector
error.vector^2
error.vector.sq <- error.vector^2
error.vector
error.vector.sq
sqrt(mean(error.vector.sq))
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 5
sqrt(mean(mean(error.vector)^2)) #
sqrt(mean(error.vector)^2)
mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
error.vector <- seq(10)
error.vector.sq <- error.vector^2
error.vector.sq
# [1] 25 25 25 25 25
sqrt(mean(error.vector.sq)) # 6.204837
mean.error <- mean(error.vector)
mean.error
# [1] 5.5
sqrt(mean(error.vector)^2) # [1] 5.5
sqrt(mean(mean.error)^2) # [1] 5.5
sqrt(mean(mean.error^2)) # [1] 5.5
load("~/GitHub/cellScaleFactors/vignettes/cellScaleFactors.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cellScaleFactors")
# load
library(cellScaleFactors)
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat
hub
rmdat
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
hub
libv <- c("AnnotationHub", "ExperimentHub")
sapply(libv, library, character.only = T)
# connect to the hubs
cache.path <- tools::R_user_dir("cellScaleFactors")
setExperimentHubOption("CACHE", cache.path)
hub <- ExperimentHub::ExperimentHub()
# query for the cell scale factors table
# rmdat <- AnnotationHub::query(hub, "cellScaleFactors") # query the hubs
rmdat <- query(hub, c("cellScaleFactors"))
rmdat
`ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
``
;''
`
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
load("~/GitHub/cellScaleFactors_data/csf_table.rda")
View(csf.table)
?sum
sum(c(1,2))
class(sum(c(1,2)))
summation <- function(n)
)
summation <- function(n){}
summation <- function(n){return(sum(c(n[1],n[2]))}
summation <- function(n){return(sum(c(n[1],n[2])))}
summation
summation(4)
summation <- function(n){return(sum(c(as.numeric(n[1]),as.numeric(n[2]))))}
summation(4)
n
summation(13)
sum(1,3)
13[1]
13[0:1]
13[0]
as.chacter(13)[1]
class(13)
value <- as.integer(13)
value[1]
value[[1]]
value[0:1]
value[0:2]
value <- list(value)
value
as.character(13)
as.character(13)[1]
as.character(13)[1][1]
strsplit(13,1)
strsplit(13,0,1)
?strsplit
strsplit(0:3)
strsplit("13")
strsplit("13","")
unlist(strsplit("13",""))
unlist(strsplit("13",""))[1]
unlist(strsplit("13",""))[2]
value1 <- unlist(strsplit("13",""))[1]
value2 <- unlist(strsplit("13",""))[2]
value1
value2
sum(as.numeric(value1), as.numeric(value2))
listComponents <- strsplit(value1, "")
listComponents <- strsplit(value1, "")
listComponents
value1=20
listComponents
listComponents <- strsplit(value1, "")
listComponents <- strsplit(inputObject, "")
inputObject = 12
listComponents <- strsplit(inputObject, "")
inputObject
inputObject <- as.integer(12)
inputObject
strsplit(inputObject, "")
listComponents <- strsplit(as.character(inputObject), "")
listComponents
listComponents[1]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]]))
listComponents[[1]]
listComponents[[1]][1]
as.numeric(listComponents[[1]][1]))
as.numeric(listComponents[[1]][1])
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value1
listComponents
listComponents[[1]][1]
listComponents[[1]][2]
listComponents <- strsplit(as.character(inputObject), "")
value1 <- as.numeric(listComponents[[1]][1])
value2 <- as.numeric(listComponents[[1]][2])
value1
value2
value1+value2
value1+value2
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
library(ComplexHeatmap)
?Heatmap
libv <- c("ggplot2", "ComplexHeatmap", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./env/03_k5/01_run_script.Rdata")
# heatmap scale label
# heatmaps are TPM zscore
heatmap.label <- "Z"
hmRefOriginal <- Heatmap(
scale(zref), show_row_names = FALSE, name = heatmap.label)
hmRefOriginal
