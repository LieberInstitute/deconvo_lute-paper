plot()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort3")
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
source("./source/00_read_experiment_data.R")
experimentData <- getExperimentData()
#--------------------------------------------
# flow cytometry "true" proportions summaries
#--------------------------------------------
# plasmablasts
proportionsPlasmablast <-
experimentData$p.true["Plasmablasts",] |> as.numeric() |> summary()
# Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
# 0.0007014 0.0014741 0.0020032 0.0031640 0.0049517 0.0077615
# non-plasmablasts
proportionsNonplasmablastsCombined <-
summary(1-as.numeric(experimentData$p.true["Plasmablasts",]))
proportionsNonplasmablastsCombined
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.9922  0.9950  0.9980  0.9968  0.9985  0.9993
# range of non-plasmablast cell composition
proportionsNonplasmablastsAlltypes <- experimentData$p.true
proportionsNonplasmablastsAlltypes <-
pTrue[!rownames(pTrue)=="Plasmablasts",] |> unlist() |> as.numeric() |> summary()
experimentData$p.true
proportionsNonplasmablastsAlltypes <-
proportionsNonplasmablastsAlltypes[
!rownames(proportionsNonplasmablastsAlltypes)=="Plasmablasts",] |> unlist() |> as.numeric() |> summary()
proportionsNonplasmablastsAlltypes
#!/usr/bin/env R
# Author: Sean Maden
#
# Summarize dataset elements.
#
# * "GSE107011_Processed_data_TPM.txt", GEO record.
#
#
#
#
libv <- c("SummarizedExperiment", "biomaRt")
sapply(libv, library, character.only = TRUE)
source("./source/00_read_experiment_data.R")
experimentData <- getExperimentData()
#--------------------------------------------
# flow cytometry "true" proportions summaries
#--------------------------------------------
# plasmablasts
proportionsPlasmablast <-
experimentData$p.true["Plasmablasts",] |> as.numeric() |> summary()
# Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
# 0.0007014 0.0014741 0.0020032 0.0031640 0.0049517 0.0077615
# non-plasmablasts
proportionsNonplasmablastsCombined <-
summary(1-as.numeric(experimentData$p.true["Plasmablasts",]))
proportionsNonplasmablastsCombined
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.9922  0.9950  0.9980  0.9968  0.9985  0.9993
# range of non-plasmablast cell composition
proportionsNonplasmablastsAlltypes <- experimentData$p.true
proportionsNonplasmablastsAlltypes <-
proportionsNonplasmablastsAlltypes[
!rownames(proportionsNonplasmablastsAlltypes)=="Plasmablasts",] |> unlist() |> as.numeric() |> summary()
proportionsNonplasmablastsAlltypes
# Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
# 0.001049 0.015634 0.036024 0.062302 0.088761 0.275502
proportionsTable <- rbind(proportionsPlasmablast,
rbind(proportionsNonplasmablastsCombined,
proportionsNonplasmablastsAlltypes)) |>
as.data.frame()
rownames(proportionsTable) <-
c("plasmablast", "nonplasmablast", "nonplasmablast_unbinned")
#-----
# save
#-----
# output proportions table
save(proportionsTable,
file = "./outputs/08_improvements/cellProportionsTable.rda")
data.table::fwrite(
proportionsTable,"./outputs/08_improvements/cellProportionsTable.csv")
save.image("./env/01_pseudobulk/01_read_script.RData")
#!/usr/bin/env R
# Author: Sean Maden
#
# Gets heatmap data for top 10 markers per cell type in ABIS-seq reference.
#
libv <- c("dplyr", "lute", "ComplexHeatmap")
sapply(libv, library, character.only=T)
# param
markersPerType <- 10
# load
load("./env/01_pseudobulk/01_read_script.RData")
# format
#refTpm <- refTpm[!duplicated(refTpm[,1]),]
#for(c in seq(ncol(refTpm))){refTpm[,c] <- as.numeric(refTpm[,c])}
# TPM heatmap data
refTpm <- experimentData$z
refTpm <- as.matrix(refTpm)
# transform
cellSizes<-apply(as.matrix(refTpm),2,sum)
refTpmTransformed <- lute:::.zstransform(refTpm, cellSizes)
# log2 TPM + 1 heatmap data
refTpmLog2 <- as.data.frame(t(apply(refTpm,1,function(ci){
log2(ci+1)
})))
colnames(refTpmLog2) <- colnames(refTpm)
rownames(refTpmLog2) <- rownames(refTpm)
# transform
cellSizesLog2Tpm<-apply(as.matrix(refTpmLog2),2,sum)
refTpmLog2Transformed <- lute:::.zstransform(refTpmLog2, cellSizesLog2Tpm)
# filter markers
# TEST: does listMarkers change with TPM vs log2TPM+1?
listMarkers <-lapply(
colnames(refTpm), function(cellType){
cellTypeTrue<-colnames(refTpm)==cellType
cellTypeFalse<-!colnames(refTpm)==cellType
tpmTrue<-refTpm[,cellTypeTrue]
tpmFalse<-apply(refTpm[,cellTypeFalse],1,median)
tpmDiff<-tpmTrue-tpmFalse
tpmAbsDiff<-abs(tpmDiff)
tpmAbsDiffOrdered<-tpmAbsDiff[rev(order(tpmAbsDiff))]
return(names(tpmAbsDiffOrdered[seq(markersPerType)]))
}
)
names(listMarkers)<-colnames(refTpm)
# tables for heatmaps
refTpmFilter<-refTpm[unlist(listMarkers),]
refTpmTransformedFilter<-refTpmTransformed[unlist(listMarkers),]
refTpmLog2Filter <- refTpmLog2[unlist(listMarkers),]
refTpmLog2TransformedFilter <- refTpmLog2Transformed[unlist(listMarkers),]
# heatmaps
Heatmap(refTpm)
Heatmap(scale(refTpm))
# save
save.image(file="./env/01_pseudobulk/02_markers_script.RData")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs deconvolution with the ABIS-seq signature matrix reference.
#
#
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
# load
# 01_run_script
# contains experiment data, cell size scale factors
load("./env/01_pseudobulk/01_read_script.RData")
source("./source/00_read_experiment_data.R")
#--------------
# format inputs
#--------------
# cell type reference
referenceExpression <- as.matrix(experimentData[["z"]])
# get y/bulk expression -- only PBMC
bulkExpression <- as.matrix(experimentData[["y.table"]])
bulkExpression <- bulkExpression[,grepl("PBMC", colnames(bulkExpression))]
dim(bulkExpression)
bulkSummarizedExperiment <- experimentData[["y.se"]]
bulkSummarizedExperiment <-
bulkSummarizedExperiment[,grepl("PBMC", colnames(bulkSummarizedExperiment))]
dim(bulkSummarizedExperiment)
# format sample ids
# check colnames on table and se data
identical(colnames(bulkSummarizedExperiment), colnames(bulkExpression))
# replace underscore characters
colnames(bulkExpression) <- gsub("_.*", "", colnames(bulkExpression))
colnames(bulkSummarizedExperiment) <-
gsub("_.*", "", colnames(bulkSummarizedExperiment))
# replace x characters
colnames(bulkExpression) <- gsub("^X", "", colnames(bulkExpression))
colnames(bulkExpression)
# compare fc proportions ids
fcProportionsIds <- colnames(experimentData$p.true)
length(intersect(colnames(bulkExpression),fcProportionsIds))
# set new sampleids as colnames
colnames(bulkSummarizedExperiment) <- colnames(bulkExpression)
# subset on overlapping ids
sampleIdOverlap <- intersect(colnames(bulkSummarizedExperiment), fcProportionsIds)
bulkSummarizedExperiment <- bulkSummarizedExperiment[,sampleIdOverlap]
bulkExpression <- bulkExpression[,sampleIdOverlap]
# filter genes
# map symbols
bulkSummarizedExperimentNew <- yMapMarkers(bulkSummarizedExperiment)
save(bulkSummarizedExperimentNew, file = "./outputs/08_improvements/bulkWithGeneSymbols.rda")
# filter duplicates
filterDuplicatedGenes <- duplicated(
rowData(bulkSummarizedExperimentNew)$gene_symbol)
bulkSummarizedExperimentNew <-
bulkSummarizedExperimentNew[!filterDuplicatedGenes]
# filter markers overlaps
rownames(bulkSummarizedExperimentNew) <-
rowData(bulkSummarizedExperimentNew)$gene_symbol
markersOverlaps <-
rownames(bulkSummarizedExperimentNew) %in% rownames(referenceExpression)
bulkSummarizedExperimentNew <-
bulkSummarizedExperimentNew[markersOverlaps,]
# inspect
dim(bulkSummarizedExperimentNew)
length(intersect(
rownames(bulkSummarizedExperimentNew), rownames(referenceExpression)))
bulkExpressionNew <- as.matrix(assays(bulkSummarizedExperimentNew)[["tpm"]])
#------------
# run deconvo
#------------
result.unscaled <- lute(
referenceExpression = referenceExpression,
bulkExpression = bulkExpressionNew,
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
result.scaled <- lute(
referenceExpression = referenceExpression,
bulkExpression = bulkExpressionNew,
cellScaleFactors = cellSizes,
assayName = 'tpm',
typemarkerAlgorithm = NULL
)
#------------------
# make df.plot.tall
#------------------
prop.unscaled <- result.unscaled[["deconvolutionResults"]]@predictionsTable
prop.scaled <- result.scaled[["deconvolutionResults"]]@predictionsTable
# get common cell type id mappings
map.vector1 <- gsub("\\.", " ", colnames(prop.scaled))
map.vector2 <- gsub("\\.", " ", colnames(prop.unscaled)) # df.proportions$cell.type
common.id <- intersect(map.vector1, map.vector2)
df.map <- data.frame(
p.true.id = common.id, map.vector2 = common.id)
# filter common ids
filter.columns <- gsub("\\.", " ", colnames(prop.scaled)) %in% df.map[,1]
prop.scaled <- prop.scaled[,filter.columns]
prop.unscaled <- prop.unscaled[,filter.columns]
# bind results
prop.unscaled$sample.id <- rownames(prop.unscaled)
prop.unscaled$type <- "unscaled"
prop.scaled$sample.id <- rownames(prop.scaled)
prop.scaled$type <- "scaled"
# get plot data
# get tall table (SAMPLES X CELL_TYPE)
dfPlotTall <- rbind(prop.scaled, prop.unscaled) %>% as.data.frame()
# get wide table (CELL_TYPE X SAMPLES)
dfPlotTranspose <- t(dfPlotTall) %>% as.data.frame()
# append proportions
dfProportions <- experimentData[["p.true"]]
# check samples overlap
length(intersect(colnames(dfProportions), dfPlotTall$sample.id))
samplesKeep <- intersect(colnames(dfProportions), unique(dfPlotTall$sample.id))
# get very tall plot of sample X proportion
dfPlotTallTall <- reshape2::melt(dfPlotTall)
colnames(dfPlotTallTall) <-
c("sample.id", "condition", "cellType", "proportion")
trueProportionVarname <- "trueProportion"
dfPlotTallTall[,ncol(dfPlotTallTall)+1] <- "NA"
colnames(dfPlotTallTall)[ncol(dfPlotTallTall)] <- trueProportionVarname
for(cellType in rownames(dfProportions)){
for(sample.id in unique(dfPlotTallTall$sample.id)){
filterTallTall <-
dfPlotTallTall[,"sample.id"]==sample.id &
dfPlotTallTall[,"cellType"]==cellType
dfPlotTallTall[filterTallTall, trueProportionVarname] <-
dfProportions[cellType, sample.id]
}
}
# filter samples
filterSamples <- dfPlotTallTall$sample.id %in% samplesKeep
dfPlotTallTall <- dfPlotTallTall[filterSamples,]
dfPlotTallTall$trueProportion <- as.numeric(dfPlotTallTall$trueProportion)
#-----------------
# save environment
#-----------------
save.image("./env/01_pseudobulk/03_deconvolve.RData")
#!/usr/bin/env R
# Author: Sean Maden
#
# Pseudobulk simulation using data from ABIS-seq and flow cytometry (FC) true
# proportions, and cell sizes from library sizes (column sums) of ABIS-seq reference.
#
#
#
#
#
libv <- c("lute", "dplyr")
sapply(libv, library, character.only = TRUE)
# load
# contains experiment data, cell size scale factors
load("./env/01_pseudobulk/01_read_script.RData")
#-----------------
# run simulation A
#-----------------
# note: cell expression randomized
bulkExpression <- bulkSummarizedExperimentNew
ptrue <- experimentData$p.true
cellLabelLarge <- "Plasmablasts"
cellLabelNotLarge <- "Non-plasmablast"
totalCells <- 10000
numberGenes <- nrow(refTpmFilter)
globalExpressionMean <- mean(refTpmFilter)
cellScaleFactors <- c(cellSizes[cellLabelLarge],
median(cellSizes[!names(cellSizes)==cellLabelLarge]))
names(cellScaleFactors) <- c(cellLabelLarge, cellLabelNotLarge)
listPseudoBulk <- lapply(seq(ncol(ptrue)), function(index){
message(index)
sampleId <- colnames(ptrue)[index]
sampleExpressionMean <- assays(bulkExpression[,sampleId])[["tpm"]][,1] %>%
mean()
isLargeCell <- rownames(ptrue)==cellLabelLarge
# cell labels from fractions
fractLargeCell <- ptrue[isLargeCell,index]
totalLargeCells <- round(fractLargeCell*totalCells, 0) + 2
totalNotLargeCells <- round(totalCells-totalLargeCells, 0)
newCellLabels <- c(rep(cellLabelLarge, totalLargeCells),
rep(cellLabelNotLarge, totalNotLargeCells))
# fraction vector
#pFractionVector <- c(fractLargeCell, 1-fractLargeCell)
#names(pFractionVector) <- c(cellLabelLarge, cellLabelNotLarge)
pFractionVector <- c(totalLargeCells/totalCells, totalNotLargeCells/totalCells)
names(pFractionVector) <- c(cellLabelLarge, cellLabelNotLarge)
# randomize sce data
scePseudo <- randomSingleCellExperiment(
numberGenes = numberGenes,
numberCells = totalCells,
numberType = 2,
fractionTypes = pFractionVector,
expressionMean = sampleExpressionMean
)
scePseudo[,scePseudo$celltype=="type1"]$celltype <- cellLabelLarge
scePseudo[,scePseudo$celltype=="type2"]$celltype <- cellLabelNotLarge
yPseudo <-
lute::ypb_from_sce(
scePseudo, cellScaleFactors = cellScaleFactors) |> as.matrix()
referencePseudo <- referenceFromSingleCellExperiment(scePseudo)
unscaled <- lute(
referenceExpression = referencePseudo,
bulkExpression = yPseudo,
typemarkerAlgorithm = NULL
)
scaled <- lute(
referenceExpression = referencePseudo,
bulkExpression = yPseudo,
cellScaleFactors = cellScaleFactors,
typemarkerAlgorithm = NULL
)
dfScaled <- scaled$deconvolutionResults@predictionsTable |> as.data.frame()
dfUnscaled <- unscaled$deconvolutionResults@predictionsTable |> as.data.frame()
dfScaled$condition <- "scaled"
dfUnscaled$condition <- "unscaled"
dfResult <- rbind(dfScaled, dfUnscaled) |> as.data.frame()
dfResult$true.plasmablasts <- pFractionVector[["Plasmablasts"]]
dfResult$true.not.plasmablasts <- pFractionVector[["Non-plasmablast"]]
dfResult$sample.id <- colnames(ptrue)[index]
return(dfResult)
})
dfPseudobulk <- dfPseudobulkA <-
do.call(rbind, lapply(listPseudoBulk, function(item){item}))
# save
save.image("env/08_improvement/02_simulation_script.RData")
#-----------------
# run simulation B
#-----------------
# notes:
# cell expression taken from the cell type reference
# save
save.image("env/01_pseudobulk/04_simulation.RData")
#!/usr/bin/env R
# Author: Sean Maden
#
# RMSE and nuclei proportions from pseudobulks.
#
#
#------
# load
#------
load("env/01_pseudobulk/04_simulation.RData")
df.k2 <- dfPseudobulk
colnames(df.k2) <- c("non.pred", "plasma.pred",
"condition", "plasma.true", "non.true", "sample.id")
#------
# rmse
#------
rmseType <- function(df, type){
errorVector <- unlist(lapply(type, function(ti){
catchTrue <- grepl(ti,colnames(df))&grepl("\\.true$",colnames(df))
catchPred <- grepl(ti,colnames(df))&grepl("\\.pred$",colnames(df))
df[,catchTrue]-df[,catchPred]
})) |> as.numeric()
return(
sqrt(mean(errorVector^2))
)
}
rmsePlasmaK2 <- rmseType(df.k2, "plasma") # 0.03796989
rmseNonK2 <- rmseType(df.k2, "non") # 0.03796989
rmseAllK2 <- rmseType(df.k2, c("plasma", "non")) # 0.03796989
#-------------
# proportions
#-------------
summary(df.k2$plasma.true)
# Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
# 0.000900 0.001700 0.002200 0.003367 0.005175 0.008000
summary(df.k2$non.true)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.9920  0.9948  0.9978  0.9966  0.9983  0.9991
#-------------------
# nuclei per sample
#-------------------
mrna.yield <-
read.table("./data/monaco_et_al_2019/shared/mRNAyield_PBMC.txt", header = T)
as.numeric(mrna.yield$Cell_no.) |>
median() |> format(scientific = T)
#----------------------
# fold size difference
#----------------------
as.numeric(cellSizes["Plasmablasts"])/
as.numeric(mean(cellSizes[!names(cellSizes)=="Plasmablasts"]))
# 15.31991
libv <- c("ggplot2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/01_read_script.RData")
cellSizes
dfPlot <- data.frame(cellType = names(cellsizes), size = as.numeric(cellsizes))
cellSizes
dfPlot <- data.frame(cellType = names(cellSizes), size = as.numeric(cellSizes))
dfPlot$cellType <- factor(dfPlot$cellType, levels = dfPlot$cellType[rev(order(dfPlot$size))])
ggplot(dfPlot, aes(x = cellType, y = size)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gc()
gc()
gc()
libv <- c("ggplot2", "gridExtra")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd("..")
setwd("..")
load("./env/01_pseudobulk/01_read_script.RData")
experimentData
