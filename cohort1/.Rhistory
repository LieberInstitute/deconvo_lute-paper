geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
list.filter.result1$new.plot2
barplots.filter1$new.plot2
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "fill") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
filter.plot1 <- list.filter.result1$new.plot2
barplot1 <- barplots.filter1$new.plot2
grid.arrange(filter.plot1, barplot1, ncol = 1)
grid.arrange(filter.plot1, barplot1, ncol = 1)
grid.arrange(filter.plot1, barplot1, ncol = 2)
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "fill") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
filter.plot1 <- list.filter.result1$new.plot2
barplot1 <- barplots.filter1$new.plot2 + ggtitle("")
grid.arrange(filter.plot1, barplot1, ncol = 2)
list.results <- lapply(seq(5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results[[1]]
paste0("grid.arrange(list.filter.plots[[",seq(5),"]])")
paste0("grid.arrange(list.results[[",seq(5),"]][[1]],list.results[[",seq(5),"]][[2]])")
eval.str <- paste0("list.results[[",seq(5),"]][[1]],list.results[[",seq(5),"]][[2]])", collapse = ",")
eval.str
eval.str <- paste0(
"list.results[[",seq(5),
"]][[1]],list.results[[",seq(5),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
list.results <- lapply(seq(2), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, decile.filter)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)),
"]][[1]],list.results[[",seq(length(list.results)),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)),
"]][[1]],list.results[[",seq(length(list.results)),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]],",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot1 <- list.filter.result$new.plot1
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot1
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]],",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
eval.str
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]]",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]]",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
# Helper functions
exclude_coordinates <- function(dfp, exclusion.decile = 1){
xrange <- max(dfp$xmax)-min(dfp$xmin)
yrange <- max(dfp$ymax)-min(dfp$ymin)
xrange.q <- quantile(seq(0, xrange, 1),
probs = seq(0, 1, 0.1))[[1+exclusion.decile]]
yrange.q <- quantile(seq(0, yrange, 1),
probs = seq(0, 1, 0.1))[[1+exclusion.decile]]
xint.low.q <- min(dfp$xmin)+xrange.q
xint.high.q <- max(dfp$xmax)-xrange.q
yint.low.q <- min(dfp$ymin)+yrange.q
yint.high.q <- max(dfp$ymax)-yrange.q
# get filtered dfp
filter.xcoord <- dfp$xmin > xint.low.q & dfp$xmax < xint.high.q
filter.ycoord <- dfp$ymin > yint.low.q & dfp$ymax < yint.high.q
dfp.filter <- dfp[filter.xcoord & filter.ycoord,]
# draw full plot with axis intercept lines indicating exclusions
new.plot1 <- ggplot(dfp,
(aes
(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax))) +
geom_rect(alpha = 0.5) + theme_bw() +
geom_hline(yintercept = yint.low.q) + geom_hline(yintercept = yint.high.q) +
geom_vline(xintercept = xint.low.q) + geom_vline(xintercept = xint.high.q) +
ggtitle(paste0("Quantile = ", 10*exclusion.decile, "%"))
# highlight excluded points
dfp$excluded <- ifelse(
dfp$point.index.id %in% dfp.filter$point.index.id, FALSE, TRUE)
new.plot2 <- ggplot(dfp,
(aes
(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
color = excluded))) +
geom_rect(alpha = 0.5) + theme_bw() +
geom_hline(yintercept = yint.low.q) + geom_hline(yintercept = yint.high.q) +
geom_vline(xintercept = xint.low.q) + geom_vline(xintercept = xint.high.q) +
ggtitle(paste0("Quantile = ", 10*exclusion.decile, "%"))
# return
lr <- list(new.plot1 = new.plot1,
new.plot2 = new.plot2,
dfp.filter = dfp.filter)
return(lr)
}
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "stacked") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
setwd("C:/Users/User/Documents/GitHub/scib")
setwd("C:/Users/User/Documents/GitHub/scib-reproducibility")
list.files(recursive = T)
barplot(unique.extensions.vector)
list.files.results.vector <- list.files(recursive = T)
list.files.results.vector
?list.files
files.results.vector.extensions <- gsub("\\.", "", list.files.results.vector)
files.results.vector.extensions
files.results.vector.extensions <- gsub(".*\\.", "", list.files.results.vector)
unique(files.results.vector.extensions)
unique.file.extensions.vector <- unique(files.results.vector.extensions)
table(unique.file.extensions.vector)
table(files.results.vector.extensions)
barplot(files.results.vector.extensions)
files.results.vector.extensions
?barplot
barplot(table(files.results.vector.extensions))
barplot(table(files.results.vector.extensions)[1:5])
barplot(table(files.results.vector.extensions)[5:10])
?prop.table
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
# this could be better as pipes, e.g. table() %>% prop.table()
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
load("~/GitHub/scib-reproducibility/README.md")
gc()
setwd("C:/Users/User/Documents/GitHub")
setwd("C:/Users/User/Documents/GitHub")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
library(recountmethylation)
BiocManager::install("recountmethylation")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
?BiocManager
BiocManager::version()
library(basilisk)
?basilisk
basilisk
basiliskRun()
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
proc
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
gc()
setwd("..")
setwd("..")
setwd("..")
list.files()
setwd("..")
setwd("..")
list.files()
getwd()
folder <- gsub(".*\\/", "", getwd())
folder
setwd("..")
folder <- gsub(".*\\/", "", getwd())
setwd("..")
# list.files()
source("scripts", "")
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
source("scripts", "")
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
source("scripts", subfolder)
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
scripts
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper")
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
source("scripts", subfolder)
scripts.path
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
source(scripts.path)
scripts.path
scripts
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
scripts
script.path
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
scripts
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
source(scripts.path)
scripts
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- list.files(scripts.path)
sapply(scripts, source)
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
gc()
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
source("./scripts/02_pseudobulk/00_param.R")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
source("./scripts/02_pseudobulk/00_param.R")
sapply(libv, library, character.only = T)
list.sce.markers <- get(load(sce.markers.list.path))
list.files("scripts")
list.files("scripts", "02_pseudobulk")
list.files(file.path("scripts", "02_pseudobulk"))
list.files(file.path("scripts", "02_pseudobulk"))
source(file.path("scripts", "02_pseudobulk", "00_param.R"))
gc()
source(file.path("scripts", "02_pseudobulk", "00_param.R"))
sapply(libv, library, character.only = T)
list.sce.markers <- get(load(sce.markers.list.path))
#!/usr/bin/env R
#
# Test independent pseudobulk from DLPFC cohort1 snRNAseq data.
#
source(file.path("scripts", "02_pseudobulk", "00_param.R"))
sapply(libv, library, character.only = T)
list.sce.markers <- get(load(sce.markers.list.path))
#!/usr/bin/env R
#
# Test independent pseudobulk from DLPFC cohort1 snRNAseq data.
#
source(file.path("scripts", "02_pseudobulk", "00_param.R"))
sapply(libv, library, character.only = T)
list.sce.markers <- get(load(sce.markers.list.path))
sce.k2 <- list.sce.markers$k2
# get experiment results tables
dfp.tall <- get_ypb_experiment_series(sce.k2, sample.id.variable = "Sample",
celltype.variable = "k2", assay.name = "logcounts",
s.vector = c("glial" = 3, "neuron" = 10),
algorithm.name = "nnls", return.dimensions = "tall")
dfp.wide <- get_ypb_experiment_series(sce.k2, sample.id.variable = "Sample",
celltype.variable = "k2", assay.name = "logcounts",
s.vector = c("glial" = 3, "neuron" = 10),
algorithm.name = "nnls", return.dimensions = "wide")
gc()
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
