geom_text(aes(label = percent), vjust = 0) +
theme_bw()
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "fill") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
list.filter.result1$new.plot2
barplots.filter1$new.plot2
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "fill") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
filter.plot1 <- list.filter.result1$new.plot2
barplot1 <- barplots.filter1$new.plot2
grid.arrange(filter.plot1, barplot1, ncol = 1)
grid.arrange(filter.plot1, barplot1, ncol = 1)
grid.arrange(filter.plot1, barplot1, ncol = 2)
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "fill") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
filter.plot1 <- list.filter.result1$new.plot2
barplot1 <- barplots.filter1$new.plot2 + ggtitle("")
grid.arrange(filter.plot1, barplot1, ncol = 2)
list.results <- lapply(seq(5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results[[1]]
paste0("grid.arrange(list.filter.plots[[",seq(5),"]])")
paste0("grid.arrange(list.results[[",seq(5),"]][[1]],list.results[[",seq(5),"]][[2]])")
eval.str <- paste0("list.results[[",seq(5),"]][[1]],list.results[[",seq(5),"]][[2]])", collapse = ",")
eval.str
eval.str <- paste0(
"list.results[[",seq(5),
"]][[1]],list.results[[",seq(5),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
list.results <- lapply(seq(2), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, 1)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result1 <- exclude_coordinates(dfp, decile.filter)
barplots.filter1 <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result1$new.plot2
new.barplot <- barplots.filter1$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
list.results <- lapply(c(1,2,5), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result1$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)),
"]][[1]],list.results[[",seq(length(list.results)),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)),
"]][[1]],list.results[[",seq(length(list.results)),
"]][[2]]", collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = 2)")
eval(parse(text = eval.str))
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]],",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot1 <- list.filter.result$new.plot1
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot1
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]],",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
eval.str
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]]",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
eval.str <- paste0(
"list.results[[",seq(length(list.results)), "]][[1]],",
"list.results[[",seq(length(list.results)), "]][[2]],",
"list.results[[",seq(length(list.results)), "]][[3]]",
collapse = ",")
eval.str <- paste0("grid.arrange(", eval.str, ", ncol = length(list.results[[1]]))")
eval(parse(text = eval.str))
# Helper functions
exclude_coordinates <- function(dfp, exclusion.decile = 1){
xrange <- max(dfp$xmax)-min(dfp$xmin)
yrange <- max(dfp$ymax)-min(dfp$ymin)
xrange.q <- quantile(seq(0, xrange, 1),
probs = seq(0, 1, 0.1))[[1+exclusion.decile]]
yrange.q <- quantile(seq(0, yrange, 1),
probs = seq(0, 1, 0.1))[[1+exclusion.decile]]
xint.low.q <- min(dfp$xmin)+xrange.q
xint.high.q <- max(dfp$xmax)-xrange.q
yint.low.q <- min(dfp$ymin)+yrange.q
yint.high.q <- max(dfp$ymax)-yrange.q
# get filtered dfp
filter.xcoord <- dfp$xmin > xint.low.q & dfp$xmax < xint.high.q
filter.ycoord <- dfp$ymin > yint.low.q & dfp$ymax < yint.high.q
dfp.filter <- dfp[filter.xcoord & filter.ycoord,]
# draw full plot with axis intercept lines indicating exclusions
new.plot1 <- ggplot(dfp,
(aes
(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax))) +
geom_rect(alpha = 0.5) + theme_bw() +
geom_hline(yintercept = yint.low.q) + geom_hline(yintercept = yint.high.q) +
geom_vline(xintercept = xint.low.q) + geom_vline(xintercept = xint.high.q) +
ggtitle(paste0("Quantile = ", 10*exclusion.decile, "%"))
# highlight excluded points
dfp$excluded <- ifelse(
dfp$point.index.id %in% dfp.filter$point.index.id, FALSE, TRUE)
new.plot2 <- ggplot(dfp,
(aes
(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
color = excluded))) +
geom_rect(alpha = 0.5) + theme_bw() +
geom_hline(yintercept = yint.low.q) + geom_hline(yintercept = yint.high.q) +
geom_vline(xintercept = xint.low.q) + geom_vline(xintercept = xint.high.q) +
ggtitle(paste0("Quantile = ", 10*exclusion.decile, "%"))
# return
lr <- list(new.plot1 = new.plot1,
new.plot2 = new.plot2,
dfp.filter = dfp.filter)
return(lr)
}
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "stacked") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
setwd("C:/Users/User/Documents/GitHub/scib")
setwd("C:/Users/User/Documents/GitHub/scib-reproducibility")
list.files(recursive = T)
barplot(unique.extensions.vector)
list.files.results.vector <- list.files(recursive = T)
list.files.results.vector
?list.files
files.results.vector.extensions <- gsub("\\.", "", list.files.results.vector)
files.results.vector.extensions
files.results.vector.extensions <- gsub(".*\\.", "", list.files.results.vector)
unique(files.results.vector.extensions)
unique.file.extensions.vector <- unique(files.results.vector.extensions)
table(unique.file.extensions.vector)
table(files.results.vector.extensions)
barplot(files.results.vector.extensions)
files.results.vector.extensions
?barplot
barplot(table(files.results.vector.extensions))
barplot(table(files.results.vector.extensions)[1:5])
barplot(table(files.results.vector.extensions)[5:10])
?prop.table
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
# this could be better as pipes, e.g. table() %>% prop.table()
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
load("~/GitHub/scib-reproducibility/README.md")
gc()
setwd("C:/Users/User/Documents/GitHub")
setwd("C:/Users/User/Documents/GitHub")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
library(recountmethylation)
BiocManager::install("recountmethylation")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
?BiocManager
BiocManager::version()
library(basilisk)
?basilisk
basilisk
basiliskRun()
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
proc
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
gc()
if (!requireNamespace("AzureStor", quietly = TRUE))
install.packages("AzureStor")
library("AzureStor")
sas <- "sp=racwl&st=2023-09-15T12:09:46Z&se=2023-09-29T20:09:46Z&spr=https&sv=2022-11-02&sr=c&sig=zOoG6Bx3rapm0uCpasqlkXfAK%2BorckQyaVed9HFHiH4%3D"
url <- "https://bioconductorhubs.blob.core.windows.net"
ep <- storage_endpoint(url, sas = sas)
container <- storage_container(ep, "staginghub")
libv <- c("ggplot2", "dplyr")
sapply(libv, library, character.only = T)
knitr::opts_chunk$set(echo = TRUE)
subfolder <- gsub(".*\\/", "", getwd())
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "12_soptimize_yvary-zsame_dlpfc-cohort1", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# postprocess df.res
df.res$glial.group.label <- as.character(df.res$s.glial)
df.res$neuron.group.label <- as.character(df.res$s.neuron)
# df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",ifelse(,,ifelse(,,ifelse())))
df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",
ifelse(df.res$maximum.error, "max",
ifelse(df.res$minimum.decile.error, "min.dec",
ifelse(df.res$maximum.decile.error, "max.dec", "mid"))))
df.res$all.highlight.sizes <- ifelse(df.res$minimum.error|df.res$maximum.error, "min/max", "min.dec/max.dec/mid")
# set standard column labels
df.res$cell.compartment.id <- df.res$library.preparation
df.res$library.preparation.id <- gsub(".*_", "", df.res$cell.compartment)
df.res$block.id <- df.res$sample.id.brnum
df.res$experiment.id <- paste0(df.res$cell.compartment.id,"_",df.res$library.preparation.id)
df.res$sample.experiment <- paste0(df.res$sample.id,"_",df.res$experiment.id)
df.res$block.experiment <- paste0(df.res$block.id,"_",df.res$experiment.id)
df.res$sample.compartment <- paste0(df.res$sample.id,"_",df.res$cell.compartment.id)
# set plot parameters
highlight.color.low <- "red"
highlight.color.high <- "blue"
background.color.highlights <- "gray"
# helper functions
text.to.make.new.dfp <- function(variable.name="sample.id", value.index=1, dfp.index=1){
text.vector1 <- paste0("id.to.get <- df.res[,'",variable.name,"'][",value.index,"]")
text.vector2 <- paste0("filter.variable.vector <- df.res[,'",variable.name,"']==id.to.get")
text.vector3 <- paste0("dfp",dfp.index," <- df.res[filter.variable.vector,]")
text.vector.list <- as.list(c(text.vector1, text.vector2, text.vector3))
return(paste0(text.vector.list, collapse = ";"))
}
# viz wrapper functions
source("deconvo_plots.R")
# dataset summaries function(s)
source("dataset_summaries.R")
## Get plot data for `[BLOCK_ID]-[EXPERIMENT_CONDITION]`
# Gets the first ID in the "sample-region-compartment-library" designation, saves as `dfp1`.
dfp1 <- parse(text=text.to.make.new.dfp("block.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[EXPERIMENT_CONDITION]` "sample-compartment-library" as
dfp2 <- parse(text=text.to.make.new.dfp("sample.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[COMPARTMENT]`
dfp3 <- parse(text=text.to.make.new.dfp("sample.compartment")) %>% eval()
## Get plot data for `[SAMPLE]`
dfp4 <- parse(text=text.to.make.new.dfp("sample.id")) %>% eval()
list.summaries.dfp1 <- get_data_summaries(dfp1, "block.experiment")
list.summaries.dfp2 <- get_data_summaries(dfp2, "sample.experiment")
list.summaries.dfp3 <- get_data_summaries(dfp3, "sample.compartment")
list.summaries.dfp4 <- get_data_summaries(dfp4, "sample.id")
list.summaries.dfp1
list.summaries.dfp2
list.summaries.dfp3
list.summaries.dfp4
list.plots.dfp1 <- deconvo_plots_list(dfp1, "anatomic.region")
list.plots.dfp1$heatmaps$heatmap6
list.plots.dfp2 <- deconvo_plots_list(dfp2, "anatomic.region")
list.plots.dfp2$heatmaps$heatmap6
list.plots.dfp3.byregion <- deconvo_plots_list(dfp3, "anatomic.region")
list.plots.dfp3.bylibraryprep <- deconvo_plots_list(dfp3, "library.preparation.id")
list.plots.dfp3.byregion$heatmaps$heatmap6
list.plots.dfp3.bylibraryprep$heatmaps$heatmap6
facet.variable.vector <- c("anatomic.region", "library.preparation.id", "cell.compartment")
results.list.dfp4 <- lapply(facet.variable.vector, function(facet.variable){
deconvo_plots_list(dfp4, facet.variable)
})
names(results.list.dfp4) <- facet.variable.vector
unpack_plot_type(results.list.dfp4, "heatmap1", "heatmaps")
unpack_plot_type(results.list.dfp4, "heatmap6", "heatmaps")
unpack_plot_type(results.list.dfp4, "lp1", "lineplots")
unpack_plot_type(results.list.dfp4, "lp2", "lineplots")
gc()
knitr::opts_chunk$set(echo = TRUE)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result-pseudobulk_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
df.res$abs.bias.neuron <- abs(df.res$bias.neuron.true.pred)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
knitr::opts_chunk$set(echo = TRUE)
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./outputs/06_estimate/list_results_train_plot.rda")
dfp.tall <- list.dfp$dfp.tall
dfp.tall <- dfp.tall[dfp.tall$crossvalidation=="train",]
###
new.plot <- ggplot(dfp.tall, aes(x = dfs.num.steps, y = median)) +
geom_point() + geom_line() + ylab("Median train error neuron") +
xlab("Search step count")
###
new.plot
new.jpg.path <- "./figures/06_estimate/figs_train_error_search.jpg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "figures/06_estimate/figs_train_error_search.jpg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "figures/06_estimate/figs_cv_error.jpg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "figures/06_estimate/figs_cv.jpg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpg(file = new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(file = new.jpg.path, width = 5, height = 4, units = "in", res = 400)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(file = new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(filepath = new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(filepath = new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.jpg.path <- "./figures/06_estimate/figs_cv.jpeg"
jpeg(new.jpg.path, width = 5, height = 4, units = "in", res = 400)
new.plot; dev.off()
?geom_smooth
