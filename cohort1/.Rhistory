markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
}))
indexValue = 1
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
index = 1
cellScaleFactorIndex <- cellScaleFactorVector[index]
cellScaleFactorVector =
c(0.5, 1.5, 2.5, 3.5, 1)
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
labelVector =
c("Decrease", "Slight Decrease",
"Slight Increase", "Increase", "NULL")
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
cellScaleFactorsStart = 2
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
markerExpressionStart = 0.5
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
valuesList
valuesList$deconvoResultsStart
valuesList
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
exampleResult$deconvoResult
exampleResult$plotData
data.frame(
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes
}))
do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes
})) |> as.data.frame()
do.call(rbind, lapply(seq(length(cellScaleFactorVector)), function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
# iterate on simulated "samples" from vectors
# values from variables trueProportionValueVector, bulkExpressionVector
dfSamples <- do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes
})) |> as.data.frame()
dfSamples
})) |> as.data.frame()
do.call(rbind, lapply(seq(length(cellScaleFactorVector)), function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
# iterate on simulated "samples" from vectors
# values from variables trueProportionValueVector, bulkExpressionVector
dfSamples <- do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes$label <- paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes
})) |> as.data.frame()
dfSamples
})) |> as.data.frame()
dfResAll <- do.call(rbind, lapply(seq(length(cellScaleFactorVector)), function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
# iterate on simulated "samples" from vectors
# values from variables trueProportionValueVector, bulkExpressionVector
dfSamples <- do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes$label <- paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes
})) |> as.data.frame()
dfSamples
})) |> as.data.frame()
dfResAll
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point() + geom_abline(slope = 1, intercept = 0)  +
facet_wrap(~label, nrow = 1)
dfResAll <- do.call(rbind,
lapply(seq(length(cellScaleFactorVector)),
function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
# iterate on simulated "samples" from vectors
# values from variables trueProportionValueVector, bulkExpressionVector
dfSamples <- do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes$label <- paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes$type <- labelIndex
dfRes$labelAppend <- paste0("\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes
})) |> as.data.frame()
dfSamples
})) |> as.data.frame()
dfResAll$type <- factor(dfResAll$type,
levels =
c("Decrease", "Slight Decrease", "Slight Increase", "Increase", "NULL"))
dfResAll$labelTitle <- paste0(dfResAll$type, "\n", dfResAll$labelAppend)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point() + geom_abline(slope = 1, intercept = 0)  +
facet_wrap(~label, nrow = 1) + ggtitle(dfResAll$labelTitle)
dfResAll$type <- factor(dfResAll$type,
levels =
c("Decrease", "Slight Decrease", "Slight Increase", "Increase", "NULL"))
dfResAll$labelTitle <- paste0(dfResAll$type, "\n", dfResAll$labelAppend)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point() + geom_abline(slope = 1, intercept = 0)  +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point() + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point() + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0, 1) + ylim(0, 1) +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point(size = 2, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0, 1) + ylim(0, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) +
geom_point(size = 2, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0.5, 1) + ylim(0.5, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) + theme_bw() +
geom_point(size = 2, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0.5, 1) + ylim(0.5, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) + theme_bw() +
geom_point(size = 2.5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0.5, 1) + ylim(0.5, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) + theme_bw() +
geom_point(size = 2.5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0.3, 1) + ylim(0.3, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
multiPanelScatterPlots <- function(cellScaleFactorOffTypeValue = 10,
markerExpressionStart = 0.5,
cellScaleFactorsStart = 2,
trueProportionValueVector = c(0.5, 0.55, 0.6, 0.65, 0.7),
bulkExpressionVector = c(0.7, 0.71, 0.8, 0.81, 0.7),
cellScaleFactorVector =
c(0.5, 1.5, 2.5, 3.5, 1),
labelVector =
c("Decrease", "Slight Decrease",
"Slight Increase", "Increase", "NULL")){
# multiPanelScatterPlots
#
# Get multiple scatter plot panels from vector of changed cell types. Uses
# variable conditions as indicated in variables trueProportionValueVector and
# bulkExpressionVector.
#
# cellScaleFactorOffTypeValue : value of the cell scale factor for cell not
# depicted.
# markerExpressionStart : beginning marker expression for cell type depicted.
# cellScaleFactorsStart : starting value of the cell scale factor for cell type
# depicted.
# trueProportionValueVector : vector of true proportion value across
# simulations.
# bulkExpressionVector : vector of bulk expression values.
# cellScaleFactorVector : vector of second term cell scale factor differences.
# labelVector : vector of character labels for the second term cell scale
# factor value differences.
#
#
#
dfResAll <- do.call(rbind,
lapply(seq(length(cellScaleFactorVector)),
function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
# iterate on simulated "samples" from vectors
# values from variables trueProportionValueVector, bulkExpressionVector
dfSamples <- do.call(rbind,
lapply(
seq(length(trueProportionValueVector)),
function(indexValue){
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValueVector[indexValue],
bulkExpressionValue = bulkExpressionVector[indexValue]
)
exampleResult <- singleValueExample(
valuesList,
paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex))
dfRes <- data.frame(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportion =
trueProportionValueVector[indexValue],
predProportion =
exampleResult$deconvoResult@predictionsTable[1,1]
)
dfRes$label <- paste0(
labelIndex,"\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes$type <- labelIndex
dfRes$labelAppend <- paste0("\ncellScaleFactor = ",
cellScaleFactorIndex)
dfRes
})) |> as.data.frame()
dfSamples
})) |> as.data.frame()
dfResAll$type <- factor(dfResAll$type,
levels =
c("Decrease", "Slight Decrease", "Slight Increase",
"Increase", "NULL"))
dfResAll$labelTitle <- paste0(dfResAll$type, "\n", dfResAll$labelAppend)
ggScatter <-
ggplot(dfResAll, aes(x = trueProportion, y = predProportion)) + theme_bw() +
geom_point(size = 2.5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0)  +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(0.3, 1) + ylim(0.3, 1) + xlab("True") + ylab("Predicted") +
facet_wrap(~type, nrow = 1)
returnList <- list(
dfResult = dfResult,
ggScatter = ggScatter
)
return(returnList)
}
seq(0.5, 0.7, 0.1)
seq(0.5, 0.7, 0.01)
?rnorm
length(seq(0.5, 0.7, 0.01))
trueProportionsVector <- seq(0.5, 0.7, 0.01)
bulkExpressionVector <- rnorm(length(trueProportionsVector), mean = 0.7, sd = 0.05)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
bulkExpressionVector
length(bulkExpressionVector)
trueProportionsVector
#!/usr/bin/env R
libv <- c("ggplot2", "reshape2", "gridExtra", "cowplot")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Gets scatterplots of multiple conditions, varying the true proportions and bulk expressions.
#
#
#
#
#------
# load
#------
source("./scripts/09_example_plots/00_param.R")
load("./env/09_example_plots/01_example_plots_value_changes_script.RData")
#--------------------------------------------------
# multiple panels -- marker expression start is 0.5
#--------------------------------------------------
# get multiple panels
# view facet of multi panel plots
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
trueProportionsVector <- seq(0.5, 0.7, 0.01)
bulkExpressionVector <- rnorm(length(trueProportionsVector), mean = 0.7, sd = 0.05)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
listScatterResult$ggScatter
trueProportionsVector <- seq(0.5, 0.7, 0.025)
bulkExpressionVector <- rnorm(
length(trueProportionsVector), mean = 0.7, sd = 0.05)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
listScatterResult$ggScatter
trueProportionsVector <- seq(0.4, 0.9, 0.035)
bulkExpressionVector <- rnorm(
length(trueProportionsVector), mean = 0.7, sd = 0.05)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
listScatterResult$ggScatter
trueProportionsVector <- seq(0.4, 0.9, 0.035)
bulkExpressionVector <- rnorm(
length(trueProportionsVector), mean = 0.7, sd = 0.09)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
listScatterResult$ggScatter
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10.5, height = 6, units = "in", res = 400)
listScatterResult$ggScatter
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10.5, height = 3.5, units = "in", res = 400)
listScatterResult$ggScatter
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10.5, height = 3, units = "in", res = 400)
listScatterResult$ggScatter
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10.5, height = 2.5, units = "in", res = 400)
listScatterResult$ggScatter
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10, height = 2.5, units = "in", res = 400)
listScatterResult$ggScatter
dev.off()
dim(listScatterResult$dfResult)
table(listScatterResult$dfResult$label)
