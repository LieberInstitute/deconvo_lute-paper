setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
#
# Append data to snRNAseq SingleCellExperiment objects
#
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
mae.path <- "./outputs/01_mae/mae_analysis.rda"
# load snrnaseq filtered nucleus proportions
sn.path <- "./data/snRNA_cell_type_proportions.csv"
sn.proportions <- read.csv(sn.path)
#---------------------------
# true cell proportions list
#---------------------------
sample.id.vector <- unique(sn.proportions$Sample)
# k2
list.df.true.k2 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.neuron <- sum(sn.filter[sn.filter$cell_type %in% c("Excit", "Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.neuron, total.glial))
# props
prop.neuron <- total.neuron/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, neuron = prop.neuron)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k2) <- sample.id.vector
metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]] <- list.df.true.k2
#
# Append data to snRNAseq SingleCellExperiment objects
#
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
mae.path <- "./outputs/01_mae/mae_analysis.rda"
mae <- get(load(mae.path))
# load snrnaseq filtered nucleus proportions
sn.path <- "./data/snRNA_cell_type_proportions.csv"
sn.proportions <- read.csv(sn.path)
#---------------------------
# true cell proportions list
#---------------------------
sample.id.vector <- unique(sn.proportions$Sample)
# k2
list.df.true.k2 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.neuron <- sum(sn.filter[sn.filter$cell_type %in% c("Excit", "Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.neuron, total.glial))
# props
prop.neuron <- total.neuron/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, neuron = prop.neuron)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k2) <- sample.id.vector
metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]] <- list.df.true.k2
names(mae)
#
# Append data to snRNAseq SingleCellExperiment objects
#
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
mae.path <- "./outputs/01_mae/mae_analysis.rda"
mae <- get(load(mae.path))
# load snrnaseq filtered nucleus proportions
sn.path <- "./data/snRNA_cell_type_proportions.csv"
sn.proportions <- read.csv(sn.path)
#---------------------------
# true cell proportions list
#---------------------------
sample.id.vector <- unique(sn.proportions$Sample)
# k2
list.df.true.k2 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.neuron <- sum(sn.filter[sn.filter$cell_type %in% c("Excit", "Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.neuron, total.glial))
# props
prop.neuron <- total.neuron/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, neuron = prop.neuron)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k2) <- sample.id.vector
metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]] <- list.df.true.k2
# k3
list.df.true.k3 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, excit = prop.excit, inhib = prop.inhib)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k3) <- sample.id.vector
metadata(mae[["snrnaseq.k3.all"]])[["list.df.true.k3"]] <- list.df.true.k3
# k4
list.df.true.k4 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.oligo <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo"),]$n_cell_sn)
total.non.oligo.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.oligo, total.non.oligo.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.oligo <- total.oligo/total.cells
prop.non.oligo.glial <- total.non.oligo.glial/total.cells
# return
dfr <- data.frame(oligo = prop.oligo, excit = prop.excit, inhib = prop.inhib,
non.oligo.glial = prop.non.oligo.glial)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k4) <- sample.id.vector
metadata(mae[["snrnaseq.k4.all"]])[["list.df.true.k4"]] <- list.df.true.k4
#------------------
# append cell sizes
#------------------
for(index in seq(3)){
k.variable <- paste0("k", index+1)
sce <- mae[[paste0("snrnaseq.",k.variable,".all")]]
sample.id.vector <- unique(sce[["Sample"]])
df.sizes.all <- do.call(rbind, lapply(sample.id.vector, function(sample.id){
scef <- sce[,sce[["Sample"]]==sample.id]
cell.types <- unique(scef[[k.variable]])
df.sizes <- do.call(rbind, lapply(cell.types, function(cell.type){
counts <- assays(
scef[,scef[[celltype.variable]]==cell.type])[["counts"]]
mean(colSums(counts))
}))
df.sizes <- as.data.frame(df.sizes)
colnames(df.sizes) <- "size"
df.sizes$k4 <- cell.types
df.sizes$sample.id <- sample.id
df.sizes$size.type <- "mean_library_counts"
return(df.sizes)
}))
df.sizes.all <- as.data.frame(df.sizes.all)
df.sizes.all$ktype <- k.variable
assay.name <- paste0("snrnaseq.",k.variable,".all")
metadata(mae[[assay.name]])[["cell.sizes"]] <- df.sizes.all
}
#
# Append data to snRNAseq SingleCellExperiment objects
#
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
mae.path <- "./outputs/01_mae/mae_analysis.rda"
mae <- get(load(mae.path))
# load snrnaseq filtered nucleus proportions
sn.path <- "./data/snRNA_cell_type_proportions.csv"
sn.proportions <- read.csv(sn.path)
#---------------------------
# true cell proportions list
#---------------------------
sample.id.vector <- unique(sn.proportions$Sample)
# k2
list.df.true.k2 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.neuron <- sum(sn.filter[sn.filter$cell_type %in% c("Excit", "Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.neuron, total.glial))
# props
prop.neuron <- total.neuron/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, neuron = prop.neuron)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k2) <- sample.id.vector
metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]] <- list.df.true.k2
# k3
list.df.true.k3 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, excit = prop.excit, inhib = prop.inhib)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k3) <- sample.id.vector
metadata(mae[["snrnaseq.k3.all"]])[["list.df.true.k3"]] <- list.df.true.k3
# k4
list.df.true.k4 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.oligo <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo"),]$n_cell_sn)
total.non.oligo.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.oligo, total.non.oligo.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.oligo <- total.oligo/total.cells
prop.non.oligo.glial <- total.non.oligo.glial/total.cells
# return
dfr <- data.frame(oligo = prop.oligo, excit = prop.excit, inhib = prop.inhib,
non.oligo.glial = prop.non.oligo.glial)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k4) <- sample.id.vector
metadata(mae[["snrnaseq.k4.all"]])[["list.df.true.k4"]] <- list.df.true.k4
#------------------
# append cell sizes
#------------------
for(index in seq(3)){
k.variable <- paste0("k", index+1)
sce <- mae[[paste0("snrnaseq.",k.variable,".all")]]
sample.id.vector <- unique(sce[["Sample"]])
df.sizes.all <- do.call(rbind, lapply(sample.id.vector, function(sample.id){
scef <- sce[,sce[["Sample"]]==sample.id]
cell.types <- unique(scef[[k.variable]])
df.sizes <- do.call(rbind, lapply(cell.types, function(cell.type){
counts <- assays(
scef[,scef[[k.variable]]==cell.type])[["counts"]]
mean(colSums(counts))
}))
df.sizes <- as.data.frame(df.sizes)
colnames(df.sizes) <- "size"
df.sizes$k4 <- cell.types
df.sizes$sample.id <- sample.id
df.sizes$size.type <- "mean_library_counts"
return(df.sizes)
}))
df.sizes.all <- as.data.frame(df.sizes.all)
df.sizes.all$ktype <- k.variable
assay.name <- paste0("snrnaseq.",k.variable,".all")
metadata(mae[[assay.name]])[["cell.sizes"]] <- df.sizes.all
}
#-----
# save
#-----
mae.new.path <- "./outputs/01_mae/mae_analysis_append.rda"
save(mae, file = mae.new.path)
metadata(mae[[1]])[["cell.sizes"]]
gc()
source("./scripts/08_adjustment/00_musicParam-class.R")
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.vector <- unlist(get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda")))
mae <- mae[,colData(mae)$sample.id %in% as.character(sample.id.vector),]
nrow(colData(mae))
samples.exclude <- c("Br2743_mid", "Br6522_mid")
mae <- mae[,!colData(mae)$sample.id %in% samples.exclude,]
nrow(colData(mae))
names(metadata(mae[[1]]))
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/06_estimate/00_param.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
#-----
# load
#-----
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.vector <- unlist(get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda")))
mae <- mae[,colData(mae)$sample.id %in% as.character(sample.id.vector),]
nrow(colData(mae))
samples.exclude <- c("Br2743_mid", "Br6522_mid")
mae <- mae[,!colData(mae)$sample.id %in% samples.exclude,]
nrow(colData(mae))
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(sample.id.vector, mae)
gc()
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 40
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
# params
num.dfs.steps <- 40
#-----
# load
#-----
new.mae.filename <- "mae_analysis_bind.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
# params
num.dfs.steps <- 40
#-----
# load
#-----
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps)
df.res <- as.data.frame(
do.call(rbind, lapply(list.experiment.results, function(item){item$df.res})))
df.res$sample.id <- gsub("_.*", "", rownames(df.res))
list.dfp <- get_dfp_list(df.res)
# save image
rm(mae)
save.image(file = "./env/08_adjustment/02_run_2sample_script.RData")
