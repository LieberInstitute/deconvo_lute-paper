plot()
library(hexSticker)
install.packages("hexSticker")
library(hexSticker)
sticker("./cellScaleFactorsIMAGE.png",
package="cellScaleFactors",
p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="cellScaleFactors.png")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="cellScaleFactors.png")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="cellScaleFactors.png")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.75, s_width=.6,
filename="cellScaleFactors.png")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.75, s_width=.5,
filename="cellScaleFactors.png")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png")
?sticker
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png",)
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png", h_fill="#111111")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png", h_fill="#000000")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png", h_fill="#999999")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png", h_fill="#FCFCFC")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png", h_fill="#FCFCFC",
p_color = "#111111")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png",
h_fill="#FCFCFC", p_color = "#111111", h_color = "#FF8E60")
sticker("./cellScaleFactorsIMAGE.PNG",
package="cellScaleFactors",
p_size=15, s_x=1, s_y=.8, s_width=.5,
filename="cellScaleFactors.png",
h_fill="#FCFCFC", p_color = "#111111", h_color = "#FF674F")
library(MultiAssayExperiment)
MultiAssayExperiment()
new <- MultiAssayExperiment()
metadata(new)
library(SummarizedExeperiment)
library(SummarizedExperiment)
new <- SummarizedExperiment()
metadata(new)
detach(SummarizedExperiment)
library(SingleCellExperiment)
new <- SingleCellExperiment()
metadata(new)
detach(SingleCellExperiment)
library(SpatialExperiment)
new <- SpatialExperiment()
new <- SpatialExperiment()
metadata(new)
install.packages("MultimodalExperiment")
library(MultimodalExperiment)
BiocManager::install("MultimodalExperiment")
library(MultimodalExperiment)
new <- MultimodalExperiment()
metadata(MultimodalExperiment)
detach(SpatialExperiment)
library(MultimodalExperiment)
new <- MultimodalExperiment()
metadata(MultimodalExperiment)
?MultimodalExperiment
library(MultimodalExperiment)
new <- MultimodalExperiment()
metadata(MultimodalExperiment)
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment", "SingleCellExperiment", "SpatialExperiment")
for(libraryName in libraryVector){
eval(parse(text = paste0("library(",libraryName,")")))
new <- MultiAssayExperiment()
metadata(new) # list()
eval(parse(text = paste0("detach(",libraryName,")")))
}
?detach
libraryName
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment", "SingleCellExperiment", "SpatialExperiment")
for(libraryName in libraryVector){
eval(parse(text = paste0("library(",libraryName,")")))
eval(parse(text = paste0("new <- ",libraryName,"()")))
metadata(new) # list()
eval(parse(text = paste0("detach(",libraryName,")")))
}
paste0("new <- ",libraryName,"()")
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment", "SingleCellExperiment", "SpatialExperiment")
for(libraryName in libraryVector){
eval(parse(text = paste0("library(",libraryName,")")))
eval(parse(text = paste0("new <- ",libraryName,"()")))
metadata(new) # list()
eval(parse(text = paste0("detach(",libraryName,")")))
}
?MultiAssayExperiment
new <- MultiAssayExperiment()
new
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment",
"SingleCellExperiment", "SpatialExperiment")
for(libraryName in libraryVector){
eval(parse(text = paste0("library(",libraryName,")")))
eval(parse(text = paste0("new <- ",libraryName,"()")))
metadata(new) # list()
eval(parse(text = paste0("detach(",libraryName,")")))
}
MultiAssayExperiment()
metadata(MultiAssayExperiment())
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment",
"SingleCellExperiment", "SpatialExperiment")
for(libraryName in libraryVector){
eval(parse(text = paste0("library(",libraryName,")")))
eval(parse(text = paste0("new <- ",libraryName,"()")))
metadata(new) # list()
eval(parse(text = paste0("rm(new)")))
eval(parse(text = paste0("detach(",libraryName,")")))
}
new <- MultiAssayExperiment()
?MultiAssayExperiment
library(MultiAssayExperiment)
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment",
"SingleCellExperiment", "SpatialExperiment")
Try something like this to test your candidate data classes:
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment",
"SingleCellExperiment", "SpatialExperiment")
# Try something like this to test your candidate data classes:
testClass <- function(libraryName, functionString){
# libraryName : valid class library
eval(parse(text = paste0(functionString,"(",libraryName,")")))
}
for(libraryName in libraryVector){
testClass(libraryName, "library")
testClass(libraryName, "new <- ")
metadata(new) # list()
testClass(libraryName, "rm")
testClass(libraryName, "detach")
}
libraryVector <-
c("MultiAssayExperiment", "SummarizedExperiment",
"SingleCellExperiment", "SpatialExperiment")
# Try something like this to test your candidate data classes:
testClass <- function(libraryName, functionString){
# libraryName : valid class library
eval(parse(text = paste0(functionString,"(",libraryName,")")))
}
for(libraryName in libraryVector){
testClass(libraryName, "library")
testClass(libraryName, "new <- ")
metadata(new) # list()
testClass("new", "rm")
testClass(libraryName, "detach")
}
testClass(libraryName, "new <- ")
libraryNane
libraryName
new("new", "SummarizedExperiment")
?new
new <- SummarizedExperiment
metadata(new) <- MultiAssayExperiment()
sapply(c("SummarizedExperiment", "MultiAssayExperiment"), library, character.only = T)
sapply(c("SummarizedExperiment", "MultiAssayExperiment"), library, character.only = T)
sapply(c("SummarizedExperiment", "MultiAssayExperiment"), library, character.only = T)
new <- SummarizedExperiment
metadata(new) <- MultiAssayExperiment()
sapply(c("SummarizedExperiment", "MultiAssayExperiment"), library, character.only = T)
new <- SummarizedExperiment()
metadata(new) <- MultiAssayExperiment()
sapply(c("SummarizedExperiment", "MultiAssayExperiment"), library, character.only = T)
new <- SummarizedExperiment()
metadata(new) <- list(MultiAssayExperiment())
new
metadata(new)
library(lute)
cite(lute)
cite("lute")
library(lute)
citation(lute)
citation("lute")
library(recountmethylation)
knitr::opts_chunk$set(echo = TRUE)
libv <- c("minfi", "minfiData", "minfiDataEPIC", "ggplot2")
sapply(libv, library, character.only = TRUE)
BiocManager::install("minfiData")
knitr::opts_chunk$set(echo = TRUE)
libv <- c("minfi", "minfiData", "minfiDataEPIC", "ggplot2")
sapply(libv, library, character.only = TRUE)
BiocManager::install("minfiDataEPIC")
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = name, y = expression)) +
geom_col() +
coord_flip()
df
library(ggplot2)
# make this data set transposed
df <- data.frame(sample.id = c(1,2,3,4),
expression = c(5,4,2,1))
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = name, y = expression)) +
geom_col() +
coord_flip()
?pivot_longer
library(ggplot2)
library(dplyr)
# make this data set transposed
df <- data.frame(sample.id = c(1,2,3,4),
expression = c(5,4,2,1))
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = name, y = expression)) +
geom_col() +
coord_flip()
library(ggplot2)
library(dplyr)
library(tidyverse)
# make this data set transposed
df <- data.frame(sample.id = c(1,2,3,4),
expression = c(5,4,2,1))
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = name, y = expression)) +
geom_col() +
coord_flip()
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = sample.id, y = expression)) +
geom_col() +
coord_flip()
df
df |>
pivot_longer(-sample.id)
df
ggplot(aes(x = sample.id, y = expression))
df |>
pivot_longer(-sample.id) |>
ggplot(aes(x = sample.id, y = value)) +
geom_col() +
coord_flip()
library(scRNAseq)
library(ggplot2)
data <- BaronPancreasData('human')
data$donor
darta
class(data)
dim(data)
?getGeneExpression
head(rowData(data))
rowData(data)
rownames(data)
volcanoPlot(data, "ARID1A")
volcanoPlot <- function(data, gene) {
data <- data |>
FindMarkers(assay = 'RNA',
ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
?scran
library(scran)
?findMarkers
volcanoPlot <- function(data, gene) {
data <- data |>
scran::findMarkers(assay = 'RNA',
ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
?findMarkers
data <- logcounts(data)
?logNormCounts
data <- logNormCounts(data)
volcanoPlot <- function(data, gene) {
data <- data |>
scran::findMarkers(assay = 'RNA',
ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
volcanoPlot <- function(data, gene) {
data <- data |>
scran::findMarkers(ident.1 = 'alpha',
ident.2 = 'beta',
min.pct = 0.25,
logfc.threshold = 0.25)
data <- data |>
filter(gene == gene)
ggplot(data, aes(x = avg_logFC, y = pct.1)) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0.25, linetype = 'dashed') +
labs(x = 'logFC', y = 'pct.1') +
theme_bw()
}
volcanoPlot(data, "ARID1A")
?findMarkers
class(data)
colData(data)
head(colData(data))
data <- data |>
scran::findMarkers(
groups = colData(data)$label)
data
head(data)
class(data)
data <- data |>
filter(gene == gene)
data <- BaronPancreasData('human')
data <- logNormCounts(data)
markerList <- data |>
scran::findMarkers(
groups = colData(data)$label)
dfPlot <- counts(data)["ARID1A",]
dfPlot
class(dfPlot)
markerList <- data |>
scran::findMarkers(
groups = colData(data)$label)
top10 <- markerList |>
head(10)
top10
names(top10)
dim(top10[[1]])
markerList
top10 <- lapply(markerList, function(item){item[seq(10),]})
dim(top10[[1]])
top10[[1]]
top10 <- do.call(rbind, top10) |> as.data.frame()
dfPlot <- markerList[[1]]
head(dfPlot)
names(markerList)
names(markerList)
head(dfPlot)
dfPlot <- markerList[[1]]
dfPlot <- data.frame(
logFC = dfPlot$logFC.beta
)
dfPlot$cellType1 <- "beta"
dfPlot$cellType2 <- "acinar"
head(dfPlot)
head(markerList[[1]])
summary(markerList[[1]]$p.value)
dfPlot <- markerList[[1]]
dfPlot <- markerList[[1]]
dfPlot <- data.frame(
logFC = dfPlot$logFC.beta,
pvalue = dfPlot$p.value,
FDR = dfPlot$FDR
)
dfPlot$cellType1 <- "beta"
dfPlot$cellType2 <- "acinar"
head(dfPlot)
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot
# plot volcano plot
volcanoPlot <- ggplot(dfPlot, aes(x = logFC, y = -log10(pvalue))) +
geom_point() +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 1.3, linetype = 'dashed') +
labs(x = 'logFC (beta/acinar)', y = '-log10(pvalue)') +
theme_bw()
volcanoPlot
library(scRNAseq)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(scran)
dataOriginal <- BaronPancreasData('human')
# preprocess SingleCellExperiment
data <- logNormCounts(dataOriginal)
# filter high mitochondrial expression data
data <- filterCells(data, percent.mito = 0.05)
library(BiocManager)
libv <- c(
"SummarizedExperiment",
"ExperimentSubset",
"SummarizedBenchmark",
"MultiAssayExperiment",
"SingleCellExperiment",
"SpatialExperiment",
"MultiModalExperiment"
)
sapply(libv, function(libStr){BiocManager::install(libStr)})
BiocManager::install("MultimodalExperiment")
library(MultimodalExperiment)
library(lute)
?ypb_from_sce
ypb_from_sce
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("MultiAssayExperiment", "SummarizedExperiment")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load('./env/02_summarize_mae/01_data_summaries_script.RData')
