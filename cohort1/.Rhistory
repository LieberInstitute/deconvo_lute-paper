dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "stacked") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
setwd("C:/Users/User/Documents/GitHub/scib")
setwd("C:/Users/User/Documents/GitHub/scib-reproducibility")
list.files(recursive = T)
barplot(unique.extensions.vector)
list.files.results.vector <- list.files(recursive = T)
list.files.results.vector
?list.files
files.results.vector.extensions <- gsub("\\.", "", list.files.results.vector)
files.results.vector.extensions
files.results.vector.extensions <- gsub(".*\\.", "", list.files.results.vector)
unique(files.results.vector.extensions)
unique.file.extensions.vector <- unique(files.results.vector.extensions)
table(unique.file.extensions.vector)
table(files.results.vector.extensions)
barplot(files.results.vector.extensions)
files.results.vector.extensions
?barplot
barplot(table(files.results.vector.extensions))
barplot(table(files.results.vector.extensions)[1:5])
barplot(table(files.results.vector.extensions)[5:10])
?prop.table
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
# this could be better as pipes, e.g. table() %>% prop.table()
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
load("~/GitHub/scib-reproducibility/README.md")
gc()
setwd("C:/Users/User/Documents/GitHub")
setwd("C:/Users/User/Documents/GitHub")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
library(recountmethylation)
BiocManager::install("recountmethylation")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
?BiocManager
BiocManager::version()
library(basilisk)
?basilisk
basilisk
basiliskRun()
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
proc
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
gc()
if (!requireNamespace("AzureStor", quietly = TRUE))
install.packages("AzureStor")
library("AzureStor")
sas <- "sp=racwl&st=2023-09-15T12:09:46Z&se=2023-09-29T20:09:46Z&spr=https&sv=2022-11-02&sr=c&sig=zOoG6Bx3rapm0uCpasqlkXfAK%2BorckQyaVed9HFHiH4%3D"
url <- "https://bioconductorhubs.blob.core.windows.net"
ep <- storage_endpoint(url, sas = sas)
container <- storage_container(ep, "staginghub")
libv <- c("ggplot2", "dplyr")
sapply(libv, library, character.only = T)
knitr::opts_chunk$set(echo = TRUE)
subfolder <- gsub(".*\\/", "", getwd())
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "12_soptimize_yvary-zsame_dlpfc-cohort1", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# postprocess df.res
df.res$glial.group.label <- as.character(df.res$s.glial)
df.res$neuron.group.label <- as.character(df.res$s.neuron)
# df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",ifelse(,,ifelse(,,ifelse())))
df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",
ifelse(df.res$maximum.error, "max",
ifelse(df.res$minimum.decile.error, "min.dec",
ifelse(df.res$maximum.decile.error, "max.dec", "mid"))))
df.res$all.highlight.sizes <- ifelse(df.res$minimum.error|df.res$maximum.error, "min/max", "min.dec/max.dec/mid")
# set standard column labels
df.res$cell.compartment.id <- df.res$library.preparation
df.res$library.preparation.id <- gsub(".*_", "", df.res$cell.compartment)
df.res$block.id <- df.res$sample.id.brnum
df.res$experiment.id <- paste0(df.res$cell.compartment.id,"_",df.res$library.preparation.id)
df.res$sample.experiment <- paste0(df.res$sample.id,"_",df.res$experiment.id)
df.res$block.experiment <- paste0(df.res$block.id,"_",df.res$experiment.id)
df.res$sample.compartment <- paste0(df.res$sample.id,"_",df.res$cell.compartment.id)
# set plot parameters
highlight.color.low <- "red"
highlight.color.high <- "blue"
background.color.highlights <- "gray"
# helper functions
text.to.make.new.dfp <- function(variable.name="sample.id", value.index=1, dfp.index=1){
text.vector1 <- paste0("id.to.get <- df.res[,'",variable.name,"'][",value.index,"]")
text.vector2 <- paste0("filter.variable.vector <- df.res[,'",variable.name,"']==id.to.get")
text.vector3 <- paste0("dfp",dfp.index," <- df.res[filter.variable.vector,]")
text.vector.list <- as.list(c(text.vector1, text.vector2, text.vector3))
return(paste0(text.vector.list, collapse = ";"))
}
# viz wrapper functions
source("deconvo_plots.R")
# dataset summaries function(s)
source("dataset_summaries.R")
## Get plot data for `[BLOCK_ID]-[EXPERIMENT_CONDITION]`
# Gets the first ID in the "sample-region-compartment-library" designation, saves as `dfp1`.
dfp1 <- parse(text=text.to.make.new.dfp("block.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[EXPERIMENT_CONDITION]` "sample-compartment-library" as
dfp2 <- parse(text=text.to.make.new.dfp("sample.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[COMPARTMENT]`
dfp3 <- parse(text=text.to.make.new.dfp("sample.compartment")) %>% eval()
## Get plot data for `[SAMPLE]`
dfp4 <- parse(text=text.to.make.new.dfp("sample.id")) %>% eval()
list.summaries.dfp1 <- get_data_summaries(dfp1, "block.experiment")
list.summaries.dfp2 <- get_data_summaries(dfp2, "sample.experiment")
list.summaries.dfp3 <- get_data_summaries(dfp3, "sample.compartment")
list.summaries.dfp4 <- get_data_summaries(dfp4, "sample.id")
list.summaries.dfp1
list.summaries.dfp2
list.summaries.dfp3
list.summaries.dfp4
list.plots.dfp1 <- deconvo_plots_list(dfp1, "anatomic.region")
list.plots.dfp1$heatmaps$heatmap6
list.plots.dfp2 <- deconvo_plots_list(dfp2, "anatomic.region")
list.plots.dfp2$heatmaps$heatmap6
list.plots.dfp3.byregion <- deconvo_plots_list(dfp3, "anatomic.region")
list.plots.dfp3.bylibraryprep <- deconvo_plots_list(dfp3, "library.preparation.id")
list.plots.dfp3.byregion$heatmaps$heatmap6
list.plots.dfp3.bylibraryprep$heatmaps$heatmap6
facet.variable.vector <- c("anatomic.region", "library.preparation.id", "cell.compartment")
results.list.dfp4 <- lapply(facet.variable.vector, function(facet.variable){
deconvo_plots_list(dfp4, facet.variable)
})
names(results.list.dfp4) <- facet.variable.vector
unpack_plot_type(results.list.dfp4, "heatmap1", "heatmaps")
unpack_plot_type(results.list.dfp4, "heatmap6", "heatmaps")
unpack_plot_type(results.list.dfp4, "lp1", "lineplots")
unpack_plot_type(results.list.dfp4, "lp2", "lineplots")
gc()
knitr::opts_chunk$set(echo = TRUE)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result-pseudobulk_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
df.res$abs.bias.neuron <- abs(df.res$bias.neuron.true.pred)
setwd("C:/Users/User/Documents/GitHub")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_script.RData")
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
table(df.k2$s.set.label)
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_script.RData")
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg)
new.plot.scatter
colnames(df.k2)
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label)
new.plot.scatter
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label)
new.plot.scatter
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label)
new.plot.scatter
gc()
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_script.RData")
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label)
new.plot.scatter
table(df.k2$bulk.sample.condition)
new.plot.jitter.cond <- ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond
df.k2 <- na.omit(df.k2)
new.plot.jitter.cond <- ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond
levels <- unique(df.k2$bulk.sample.condition)
levels <- levels[order(levels)]
levels
levels[order(gsub(".*_", "", levels))]
gsub(".*_", "", levels)
order(gsub(".*_", "", levels))
levels[order(gsub(".*_", "", levels))]
?as.factor
# format plot data
df.k2 <- na.omit(df.k2)
levels <- unique(df.k2$bulk.sample.condition)
levels <- levels[order(gsub(".*_", "", levels))]
df.k2$bulk.sample.condition <- as.factor(df.k2$bulk.sample.condition, levels = levels)
levels
levels
?factor
df.k2 <- na.omit(df.k2)
levels <- unique(df.k2$bulk.sample.condition)
levels <- levels[order(gsub(".*_", "", levels))]
df.k2$bulk.sample.condition <- factor(df.k2$bulk.sample.condition, levels = levels)
# format plot data
df.k2 <- na.omit(df.k2)
levels <- unique(df.k2$bulk.sample.condition)
levels <- levels[order(gsub(".*_", "", levels))]
df.k2$bulk.sample.condition <- factor(df.k2$bulk.sample.condition, levels = levels)
# plot
new.plot.jitter.cond <- ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond
