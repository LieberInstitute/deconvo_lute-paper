sample.id.halo <- "Sample"
sample.id.bulk <- "batch.id2"
sample.id.sn.proportions <- "Sample"
#-----------------
# helper functions
#-----------------
make_sce_all <- function(sce.train, sce.validate){
# make_sce_all
#
# get combined set of train and validation snRNAseq data
#
#
# rowdata
shared.markers <- intersect(rownames(sce.train), rownames(sce.validate))
sce.train <- sce.train[rownames(sce.train) %in% shared.markers,]
sce.validate <- sce.validate[rownames(sce.validate) %in% shared.markers,]
sce.train <- sce.train[!duplicated(rownames(sce.train)),]
sce.validate <- sce.validate[!duplicated(rownames(sce.validate)),]
sce.train<- sce.train[order(match(rownames(sce.train), shared.markers)),]
sce.validate <- sce.validate[order(match(rownames(sce.validate), shared.markers)),]
# coldata
cd.sce <- colData(sce.train)
cd.sce.validate <- colData(sce.validate)
cn.cd.sce <- colnames(cd.sce)
cn.cd.sce.validate <- colnames(cd.sce.validate)
cd.keep <- intersect(cn.cd.sce, cn.cd.sce.validate)
colData(sce.train) <- cd.sce[,colnames(cd.sce) %in% cd.keep]
colData(sce.validate) <- cd.sce.validate[,colnames(cd.sce.validate) %in% cd.keep]
# assays
assays(sce.train) <- list(counts = assays(sce.train)[["counts"]])
assays(sce.validate) <- list(counts = assays(sce.validate)[["counts"]])
rowData(sce.train) <- rowData(sce.validate)
metadata(sce.train) <- metadata(sce.validate) <- list()
# checks
identical(names(assays(sce.train)), names(assays(sce.validate)))
identical(rowData(sce.train), rowData(sce.validate))
identical(rownames(sce.train), rownames(sce.validate))
identical(colnames(colData(sce.train)), colnames(colData(sce.validate)))
# make sce.all
metadata <- list(train = metadata(sce.train),
validate = metadata(sce.validate))
assays.all <- list(counts = cbind(counts(sce.train), counts(sce.validate)))
sce.all <- SingleCellExperiment(assays = assays.all,
rowData = rowData(sce.train))
colData(sce.all) <- rbind(colData(sce.train), colData(sce.validate))
metadata(sce.all) <- metadata
return(sce.all)
}
#------------------------------------
# snrnaseq: isolate snrnaseq sce data
#------------------------------------
# train
sce1 <- lscef[[1]]
sce2 <- lscef[[2]]
sce3 <- lscef[[3]]
rm(lscef)
# validate
lscef.validate <- list.sce.validate.markers
sce1.validate <- lscef.validate[[1]]
sce2.validate <- lscef.validate[[2]]
sce3.validate <- lscef.validate[[3]]
rm(lscef.validate)
rm(list.sce.validate.markers)
# append cell type category names
celltypevar <- "cellType_broad_hc"
# define marker categories
sce1.validate[["k2"]] <- ifelse(grepl("^Excit.*|^Inhib.*", sce1.validate[[celltypevar]]),
"neuron", "glial")
sce2.validate[["k3"]] <- ifelse(grepl("^Excit.*", sce2.validate[[celltypevar]]), "Excit",
ifelse(grepl("^Inhib.*", sce2.validate[[celltypevar]]),
"Inhib", "glial"))
sce3.validate[["k4"]] <- ifelse(grepl("^Excit.*", sce3.validate[[celltypevar]]), "Excit",
ifelse(grepl("^Inhib.*", sce3.validate[[celltypevar]]), "Inhib",
ifelse(grepl("^Oligo$", sce3.validate[[celltypevar]]), "Oligo",
"non_oligo_glial")))
# all (train + validate)
sce1.all <- make_sce_all(sce1, sce1.validate)
sce2.all <- make_sce_all(sce2, sce2.validate)
sce3.all <- make_sce_all(sce3, sce3.validate)
#-------------------------------------------
# write the sample ids for train, validation
#-------------------------------------------
sample.id.train <- unique(sce1[[sample.id.snrnaseq]])
sample.id.validate <- unique(sce1.validate[[sample.id.snrnaseq]])
list.sample.id.snrnaseq <- list(train = sample.id.train, validation = sample.id.validate)
# save
save(list.sample.id.snrnaseq, file = "outputs/00_preprocess/list_snrnaseq_sampleid.rda")
#--------------------------------------------
# bulk: isolate bulk rnaseq marker expression
#--------------------------------------------
# match counts and rpkm data
rownames(rse.filter) <- rowData(rse.filter)$Symbol
rownames(rse.rpkm) <- rowData(rse.rpkm)$Symbol
rse.rpkm <- rse.rpkm[rownames(rse.rpkm) %in% rownames(rse.filter),]
dim(rse.rpkm)
# match coldata
colnames.counts <- colnames(rse.filter)
colnames.counts.filter <- !grepl("_Cyto|_Nuc", colnames(rse.filter))
colnames.counts[colnames.counts.filter] <- paste0(colnames.counts[colnames.counts.filter],"_Bulk")
colnames(rse.filter) <- colnames.counts
head(colnames(rse.filter))
head(rownames(colData(rse.filter)))
identical(colnames(rse.filter), colnames(rse.rpkm))
colData(rse.rpkm) <- colData(rse.filter)
# filter markers
marker.id.vector <- unique(c(rownames(sce1), rownames(sce2), rownames(sce3)))
rse.filter <- rse.filter[rownames(rse.filter) %in% marker.id.vector,]
rse.rpkm <- rse.rpkm[rownames(rse.rpkm) %in% marker.id.vector,]
#-----------
# pseudobulk
#-----------
# make pseudobulk from sce
# for k2, k3, k4
list.sce.k234 <- list(k2 = sce1.all, k3 = sce2.all, k4 = sce3.all)
list.pb.k234 <- lapply(seq(3), function(index){
sce <- list.sce.k234[[index]]
sample.id.vector <- unique(sce[["Sample"]])
variable.name <- paste0("k", index+1)
# get pseudobulk
ypb <- do.call(cbind, lapply(sample.id.vector, function(sample.id){
scef <- sce[,sce[["Sample"]]==sample.id]
ypb_from_sce(scef, "counts", variable.name)
}))
ypb <- as.matrix(ypb)
colnames(ypb) <- sample.id.vector
bulk.pb <- SummarizedExperiment(assays = SimpleList(list(counts = ypb)))
colnames(bulk.pb) <- sample.id.vector
cd <- DataFrame(data.frame(sample.id = colnames(ypb), batch.id2 = colnames(ypb)))
rownames(cd) <- colnames(ypb)
colData(bulk.pb) <- cd
colnames(bulk.pb)
as(bulk.pb, "RangedSummarizedExperiment")
})
names(list.pb.k234) <- names(list.sce.k234)
#-----------------------------------
# rnascope: make sce with image data
#-----------------------------------
img <- as.data.frame(as.matrix(halo_all))
new.img.colnames <- paste0("cell", seq(nrow(img)))
img.data.colnames <- c("Nucleus_Area", "AKT3_Copies", "Cell_Area",
"DAPI_Nucleus_Intensity", "DAPI_Cytoplasm_Intensity")
img.coldata.colnames <- c("SAMPLE_ID", sample.id.halo, "cell_type", "Slide",
"XMin", "XMax", "YMin", "YMax", "Confidence")
img.list <- lapply(img.data.colnames, function(colname){
new.data <- img[,colname] %>% as.matrix() %>% t()
colnames(new.data) <- new.img.colnames
new.data
})
names(img.list) <- img.data.colnames
sce.img <- SingleCellExperiment(assays = img.list)
img.coldata <- DataFrame(img[,img.coldata.colnames])
rownames(img.coldata) <- new.img.colnames
colData(sce.img) <- img.coldata
rm(halo_all)
gc()
#--------------------
# preprocess rnascope
#--------------------
# filter on nucleus area
max.nucleus.area <- 78
dim(sce.img)
filter.sce <- assays(sce.img)[["Nucleus_Area"]] < max.nucleus.area
sce.img <- sce.img[,filter.sce]
# dim(sce.img)
#--------------------------------------------------
# df.rn: get additional rnascope data.frame objects
#--------------------------------------------------
# update sce.img with klabel categories
# get true proportions from rnascope data
rnascope <- sce.img
cd <- colData(rnascope)
cd$k2 <- cd$k3 <- cd$k4 <- "NA"
# append k label categories
cd$k2 <- ifelse(grepl("Excit|Inhib", cd$cell_type), "neuron",
ifelse(grepl("Endo|Oligo|Micro", cd$cell_type), "glial", "NA"))
cd$k3 <- ifelse(grepl("Excit", cd$cell_type), "Excit",
ifelse(grepl("Inhib", cd$cell_type), "Inhib",
ifelse(grepl("Endo|Oligo|Micro", cd$cell_type), "glial", "NA")))
cd$k4 <- ifelse(grepl("Excit", cd$cell_type), "Excit",
ifelse(grepl("Inhib", cd$cell_type), "Inhib",
ifelse(grepl("Oligo", cd$cell_type), "Oligo",
ifelse(grepl("Micro|Endo", cd$cell_type), "non_oligo_glial", "NA"))))
# reassign coldata to sce.img
colData(sce.img) <- cd
# get data.frames of cell sizes, counts, proportions by klabel category
sample.id.vector <- unique(rnascope$Sample)
# filter na values
rnascope <- sce.img[,!sce.img$k2=="NA"]
# get all kdata
df.rnascope.kdata <- do.call(rbind, lapply(c("k2", "k3", "k4"), function(cell.type.variable){
do.call(rbind, lapply(sample.id.vector, function(sample.id){
rnf <- rnascope[,rnascope$Sample==sample.id]
# proportions
df.prop <- table(rnf[[cell.type.variable]], rnf$Sample) %>% prop.table()
# counts
df.count <- table(rnf[[cell.type.variable]], rnf$Sample)
# sizes
df.size <- aggregate(data.frame(area = as.numeric(assays(rnf)[["Nucleus_Area"]][1,])),
by = list(cell_type = rnf[[cell.type.variable]]), FUN = "median")
# combine and format output
df.iter <- cbind(df.prop, cbind(df.size, df.count))
df.iter <- df.iter[,c(1,2,3,5,8)]
colnames(df.iter) <- c("cell_type", "sample_id", "true_proportion", "cell_size", "cell_count")
df.iter$k.label <- cell.type.variable
df.iter
}))
}))
rownames(df.rnascope.kdata) <- paste0(df.rnascope.kdata$sample_id,";",
df.rnascope.kdata$cell_type, ";",
df.rnascope.kdata$k.label)
# make transpose
df.rnascope.kdata <- t(df.rnascope.kdata)
# save rnascope data objects
save(sce.img, file = "outputs/00_preprocess/sce_img.rda")
save(df.rnascope.kdata, file = "outputs/00_preprocess/df_rnascope_kdata.rda")
#-------------
# mae: coldata
#-------------
# coldata
unique.sample.id.vector <- unique(
c(
sce1[[sample.id.snrnaseq]],
sce1.validate[[sample.id.snrnaseq]],
rse.filter[[sample.id.bulk]], # bulk and rpkm have same sample ids ...
df.rnascope.kdata["sample_id",],
list.sce.k234[["k2"]][["sample.id"]]
)
)
coldata <- DataFrame(
data.frame(
sample.id = unique.sample.id.vector))
#------------------------
# mae: make data mappings/maplist
#------------------------
# snrnaseq
sn.k2.map <- data.frame(colname = colnames(sce1.all), primary = sce1.all[[sample.id.snrnaseq]])
sn.k3.map <- data.frame(colname = colnames(sce2.all), primary = sce2.all[[sample.id.snrnaseq]])
sn.k4.map <- data.frame(colname = colnames(sce3.all), primary = sce3.all[[sample.id.snrnaseq]])
# bulk
bulk.map <- data.frame(colname = colnames(rse.filter),
primary = rse.filter[[sample.id.bulk]])
bulk.rpkm.map <- data.frame(colname = colnames(rse.rpkm),
primary = rse.rpkm[[sample.id.bulk]])
# rnascope data
sce.img.map <- data.frame(colname = colnames(sce.img),
primary = sce.img[[sample.id.halo]])
dfrn.map <- data.frame(colname = colnames(df.rnascope.kdata),
primary = gsub(";.*", "", colnames(df.rnascope.kdata)))
# pseudobulk
bulk.pb.k2.map <- data.frame(colname = colnames(list.pb.k234[["k2"]]),
primary = list.pb.k234[["k2"]][["sample.id"]])
bulk.pb.k3.map <- data.frame(colname = colnames(list.pb.k234[["k3"]]),
primary = list.pb.k234[["k3"]][["sample.id"]])
bulk.pb.k4.map <- data.frame(colname = colnames(list.pb.k234[["k4"]]),
primary = list.pb.k234[["k4"]][["sample.id"]])
# make mappings list, then map df
listmap <- list(
snrnaseq.k2.all = sn.k2.map, # snrnaseq
snrnaseq.k3.all = sn.k3.map,
snrnaseq.k4.all = sn.k4.map,
bulk.rnaseq = bulk.map, # bulk
bulk.rpkm.rnaseq = bulk.rpkm.map, # bulk, rpkm
cell.sizes = dfrn.map, # rnascope cell sizes
sce.img = sce.img.map, # rnascope sce image data
bulk.pb.k2 = bulk.pb.k2.map, # pseudobulk k2
bulk.pb.k3 = bulk.pb.k3.map, # pseudobulk k3
bulk.pb.k4 = bulk.pb.k4.map # pseudobulk k4
)
dfmap <- listToMap(listmap) # make new sampleMap object
rownames(dfmap) <- dfmap$primary
# get object list
object.list <- list(
snrnaseq.k2.all = sce1.all,
snrnaseq.k3.all = sce2.all,
snrnaseq.k4.all = sce3.all,
bulk.rnaseq = rse.filter,
bulk.rpkm.rnaseq = rse.rpkm,
cell.sizes = df.rnascope.kdata %>% as.matrix(),
sce.img = sce.img,
bulk.pb.k2 = list.pb.k234[["k2"]],
bulk.pb.k3 = list.pb.k234[["k3"]],
bulk.pb.k4 = list.pb.k234[["k4"]]
)
experiment.list <- ExperimentList(object.list)
rownames(coldata) <- coldata$sample.id
# get mae datasets
mae <- prepMultiAssay(
ExperimentList = experiment.list,
sampleMap = dfmap, colData = coldata
)
# get final mae type object
mae.final <- MultiAssayExperiment(
mae$experiments,
mae$colData,
mae$sampleMap
)
#--------------
# mae summaries
#--------------
# summarize
complete.id <- colData(mae.final)[complete.cases(mae.final),]
length(complete.id) # 11
# upset plot of samples by assays
upsetSamples(mae.final)
# example: subset on one sample id
mae.final[,colData(mae.final)$sample.id=="Br8492_mid",]
# inspect, with basic summaries
names(mae.final)
colData(mae.final)
#-----
# save
#-----
# set new mae filename
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
save(mae.final, file = mae.final.filepath)
#!/usr/bin/env R
# Author: Sean Maden
#
# Append data to snRNAseq SingleCellExperiment objects
#
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
#-----
# load
#-----
mae.path <- "./outputs/01_mae/mae_allsamples.rda"
mae <- get(load(mae.path))
# load snrnaseq filtered nucleus proportions
sn.path <- "./data/snRNA_cell_type_proportions.csv"
sn.proportions <- read.csv(sn.path)
#---------------------------
# true cell proportions list
#---------------------------
sample.id.vector <- unique(sn.proportions$Sample)
# k2
list.df.true.k2 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.neuron <- sum(sn.filter[sn.filter$cell_type %in% c("Excit", "Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.neuron, total.glial))
# props
prop.neuron <- total.neuron/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, neuron = prop.neuron)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k2) <- sample.id.vector
metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]] <- list.df.true.k2
# k3
list.df.true.k3 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo", "Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.glial <- total.glial/total.cells
# return
dfr <- data.frame(glial = prop.glial, excit = prop.excit, inhib = prop.inhib)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k3) <- sample.id.vector
metadata(mae[["snrnaseq.k3.all"]])[["list.df.true.k3"]] <- list.df.true.k3
# k4
list.df.true.k4 <- lapply(sample.id.vector, function(sample.id){
sn.filter <- sn.proportions[sn.proportions$Sample==sample.id,]
# sums
total.excit <- sum(sn.filter[sn.filter$cell_type %in% c("Excit"),]$n_cell_sn)
total.inhib <- sum(sn.filter[sn.filter$cell_type %in% c("Inhib"),]$n_cell_sn)
total.oligo <- sum(sn.filter[sn.filter$cell_type %in% c("Oligo"),]$n_cell_sn)
total.non.oligo.glial <- sum(sn.filter[sn.filter$cell_type %in% c("Micro", "Astro"),]$n_cell_sn)
total.cells <- sum(c(total.excit, total.inhib, total.oligo, total.non.oligo.glial))
# props
prop.excit <- total.excit/total.cells
prop.inhib <- total.inhib/total.cells
prop.oligo <- total.oligo/total.cells
prop.non.oligo.glial <- total.non.oligo.glial/total.cells
# return
dfr <- data.frame(oligo = prop.oligo, excit = prop.excit, inhib = prop.inhib,
non.oligo.glial = prop.non.oligo.glial)
rownames(dfr) <- "true_proportion"
return(dfr)
})
names(list.df.true.k4) <- sample.id.vector
metadata(mae[["snrnaseq.k4.all"]])[["list.df.true.k4"]] <- list.df.true.k4
#------------------
# append cell sizes
#------------------
for(index in seq(3)){
k.variable <- paste0("k", index+1)
sce <- mae[[paste0("snrnaseq.",k.variable,".all")]]
sample.id.vector <- unique(sce[["Sample"]])
df.sizes.all <- do.call(rbind, lapply(sample.id.vector, function(sample.id){
scef <- sce[,sce[["Sample"]]==sample.id]
cell.types <- unique(scef[[k.variable]])
df.sizes <- do.call(rbind, lapply(cell.types, function(cell.type){
counts <- assays(
scef[,scef[[k.variable]]==cell.type])[["counts"]]
mean(colSums(counts))
}))
df.sizes <- as.data.frame(df.sizes)
colnames(df.sizes) <- "size"
df.sizes$k4 <- cell.types
df.sizes$sample.id <- sample.id
df.sizes$size.type <- "mean_library_counts"
return(df.sizes)
}))
df.sizes.all <- as.data.frame(df.sizes.all)
df.sizes.all$ktype <- k.variable
assay.name <- paste0("snrnaseq.",k.variable,".all")
metadata(mae[[assay.name]])[["cell.sizes"]] <- df.sizes.all
}
#-----
# save
#-----
mae.new.path <- "./outputs/01_mae/mae_allsamples_append.rda"
save(mae, file = mae.new.path)
#!/usr/bin/env R
# Author: Sean Maden
#
# Gets summaries and confidences by sample.id.
#
#
#
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
combo.id.variable <- "SAMPLE_ID"
confidence.variable <- "Confidence"
cd.id <- as.data.frame(colData(mae))
cd.id$confidence.circle <- cd.id$confidence.star <- "NA"
sce.img <- mae[["sce.img"]]
cd.rnascope <- colData(sce.img)
cd.rnascope$combo <- gsub(".*_", "", cd.rnascope$SAMPLE_ID)
table(cd.rnascope$combo)
cell.sizes <- metadata(mae[["snrnaseq.k2.all"]])[["cell.sizes"]]
cell.sizes <- cell.sizes[cell.sizes$ktype=="k2",]
cell.proportions <- metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]]
cd.id$size.sn.glial <- cd.id$size.sn.neuron <- "NA"
cd.id$proportion.sn.glial <- cd.id$proportion.sn.neuron <- "NA"
for(sample.id in cd.id$sample.id){
message(sample.id)
filter.sample.rnascope <- cd.rnascope$Sample==sample.id
cd.rnascope.iter <- cd.rnascope[filter.sample.rnascope,]
cd.id[cd.id$sample.id==sample.id,]$confidence.circle <- cd.rnascope.iter[cd.rnascope.iter$combo=="CIRCLE",]$Confidence[1]
cd.id[cd.id$sample.id==sample.id,]$confidence.star <- cd.rnascope.iter[cd.rnascope.iter$combo=="STAR",]$Confidence[1]
cell.sizes.iter <- cell.sizes[cell.sizes$sample.id==sample.id,]
filter.glial <- cell.sizes.iter[,2]=="glial"
filter.neuron <- cell.sizes.iter[,2]=="neuron"
cd.id[cd.id$sample.id==sample.id,]$size.sn.glial <- cell.sizes.iter[filter.glial,]$size[1]
cd.id[cd.id$sample.id==sample.id,]$size.sn.neuron <- cell.sizes.iter[filter.neuron,]$size[1]
if(sample.id %in% names(cell.proportions)){
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.glial <- cell.proportions[[sample.id]][["glial"]]
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.neuron <- cell.proportions[[sample.id]][["neuron"]]
}
}
for(c in c(4:7)){cd.id[,c] <- as.numeric(as.character(cd.id[,c]))}
filter.na <- is.na(cd.id$confidence.star) & is.na(cd.id$confidence.circle)
table(filter.na)
cd.id <- cd.id[!filter.na,]
cd.id$remove.low <- FALSE
condition.remove <- cd.id$confidence.circle=="Low" & cd.id$confidence.star=="Low"
condition.remove <- condition.remove | (cd.id$confidence.circle=="Low" & is.na(cd.id$confidence.star))
condition.remove <- condition.remove | (is.na(cd.id$confidence.circle) & cd.id$confidence.star=="Low")
cd.id[condition.remove,]$remove.low <- TRUE
cd.id$brain.region <- gsub(".*_", "", cd.id$sample.id)
save(cd.id, file = "./outputs/01_mae/sample_qc_df.rda")
#!/usr/bin/env R
#
# Preprocess MultiAssayExperiment
#
filter.rnascope.confidence <- "Low"
#-----
# load
#-----
mae.in.path <- "./outputs/01_mae/mae_allsamples_append.rda"
mae <- mae.all <- get(load(mae.in.path))
dim(colData(mae))
# rnascope confidence annotations
cd.id <- get(load("./outputs/01_mae/sample_qc_df.rda"))
#---------------------------------------------
# 1. filter on rnascope confidence annotations
#---------------------------------------------
sample.vector.keep <- cd.id[cd.id$remove.low==FALSE,]$sample.id
# filter sce.img
sce.img <- mae[["sce.img"]]
dim(sce.img)
filter.sce <- colData(sce.img)$Sample %in% sample.vector.keep
sce.img <- sce.img[,filter.sce]
dim(sce.img)
mae[["sce.img"]] <- sce.img
# filter cell.sizes
cell.sizes <- mae[["cell.sizes"]]
dim(cell.sizes)
filter.cell.sizes <- cell.sizes["sample_id",] %in% sample.vector.keep
cell.sizes <- cell.sizes[,filter.cell.sizes]
dim(cell.sizes)
mae[["cell.sizes"]] <- cell.sizes
#-----
# save
#-----
dim(colData(mae))
mae.out.path <- "./outputs/01_mae/mae_analysis_append.rda"
save(mae, file = mae.out.path)
