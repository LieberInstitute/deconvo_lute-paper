ggtitle(paste0("Quantile = ", 10*exclusion.decile, "%"))
# return
lr <- list(new.plot1 = new.plot1,
new.plot2 = new.plot2,
dfp.filter = dfp.filter)
return(lr)
}
cell_type_barplots <- function(dfp){
dfp.bp <- as.data.frame(table(dfp$cell_type))
colnames(dfp.bp) <- c("cell_type", "cells")
dfp.bp[,2] <- as.numeric(dfp.bp[,2])
dfp.bp$percent <- paste0(round(100*dfp.bp[,2]/sum(dfp.bp[,2]), 1), "%")
dfp.bp$sample <- rep("sample", nrow(dfp.bp))
new.plot1 <- ggplot(dfp.bp, aes(x = sample, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "stacked") +
theme_bw()
new.plot2 <- ggplot(dfp.bp, aes(x = cell_type, y = cells, fill = cell_type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = percent), vjust = 0) +
theme_bw()
lr <- list(new.plot1 = new.plot1, new.plot2 = new.plot2)
return(lr)
}
list.results <- lapply(c(1,2,4), function(decile.filter){
list.filter.result <- exclude_coordinates(dfp, decile.filter)
barplots.filter <- cell_type_barplots(list.filter.result$dfp.filter)
new.filter.plot <- list.filter.result$new.plot2
new.barplot1 <- barplots.filter$new.plot1 + ggtitle("")
new.barplot2 <- barplots.filter$new.plot2 + ggtitle("")
list(new.filter.plot, new.barplot1, new.barplot2)
})
setwd("C:/Users/User/Documents/GitHub/scib")
setwd("C:/Users/User/Documents/GitHub/scib-reproducibility")
list.files(recursive = T)
barplot(unique.extensions.vector)
list.files.results.vector <- list.files(recursive = T)
list.files.results.vector
?list.files
files.results.vector.extensions <- gsub("\\.", "", list.files.results.vector)
files.results.vector.extensions
files.results.vector.extensions <- gsub(".*\\.", "", list.files.results.vector)
unique(files.results.vector.extensions)
unique.file.extensions.vector <- unique(files.results.vector.extensions)
table(unique.file.extensions.vector)
table(files.results.vector.extensions)
barplot(files.results.vector.extensions)
files.results.vector.extensions
?barplot
barplot(table(files.results.vector.extensions))
barplot(table(files.results.vector.extensions)[1:5])
barplot(table(files.results.vector.extensions)[5:10])
?prop.table
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
# this could be better as pipes, e.g. table() %>% prop.table()
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
table.frequency.extensions <- table(files.results.vector.extensions)
table.proportion.extensions <- prop.table(table.frequency.extensions)
table.proportion.extensions
load("~/GitHub/scib-reproducibility/README.md")
gc()
setwd("C:/Users/User/Documents/GitHub")
setwd("C:/Users/User/Documents/GitHub")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
library(recountmethylation)
BiocManager::install("recountmethylation")
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
?BiocManager
BiocManager::version()
library(basilisk)
?basilisk
basilisk
basiliskRun()
# get the system load paths
dpath <- system.file("extdata", "glint_files",
package = "recountmethylation")  # local path to example data
res1.fname <- "glint_results_tutorialdata.epistructure.pcs.txt"
res1.fpath <- file.path(dpath, res1.fname)
res1 <- read.table(res1.fpath, sep = "\t")            # read in example dataset #1
res2.fpath <- file.path(dpath, "glint_results_minfidata.epistructure.pcs.txt")
res2 <- read.table(res2.fpath, sep = "\t")            # read in example dataset #2
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
proc
env.name <- "glint_env"          # name the new virtual environment
pkg.name <- "recountmethylation" # set env properties
pkgv <- c("python==2.7",         # python version (v2.7)
"numpy==1.15",         # numpy version (v1.15)
"pandas==0.22",        # pandas version (v0.22)
"scipy==1.2",          # scipy version (v1.2)
"scikit-learn==0.19",  # scikit-learn (v0.19)
"matplotlib==2.2",     # matplotlib (v2.2)
"statsmodels==0.9",    # statsmodels (v0.9)
"cvxopt==1.2")         # cvxopt (v1.2)
glint_env <- BasiliskEnvironment(envname = env.name, pkgname = pkg.name,
packages = pkgv)
proc <- basiliskStart(glint_env) # define run process
gc()
if (!requireNamespace("AzureStor", quietly = TRUE))
install.packages("AzureStor")
library("AzureStor")
sas <- "sp=racwl&st=2023-09-15T12:09:46Z&se=2023-09-29T20:09:46Z&spr=https&sv=2022-11-02&sr=c&sig=zOoG6Bx3rapm0uCpasqlkXfAK%2BorckQyaVed9HFHiH4%3D"
url <- "https://bioconductorhubs.blob.core.windows.net"
ep <- storage_endpoint(url, sas = sas)
container <- storage_container(ep, "staginghub")
libv <- c("ggplot2", "dplyr")
sapply(libv, library, character.only = T)
knitr::opts_chunk$set(echo = TRUE)
subfolder <- gsub(".*\\/", "", getwd())
subfolder <- gsub(".*\\/", "", getwd())
setwd("..")
setwd("..")
# list.files()
scripts.path <- file.path("scripts", subfolder)
scripts <- file.path(scripts.path, list.files(scripts.path))
sapply(scripts, source)
gc()
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "12_soptimize_yvary-zsame_dlpfc-cohort1", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load results
setwd("..")
setwd("..")
load.filename <- "df-sopt-result_yvary-zsame_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# postprocess df.res
df.res$glial.group.label <- as.character(df.res$s.glial)
df.res$neuron.group.label <- as.character(df.res$s.neuron)
# df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",ifelse(,,ifelse(,,ifelse())))
df.res$all.highlight.categories <- ifelse(df.res$minimum.error, "min",
ifelse(df.res$maximum.error, "max",
ifelse(df.res$minimum.decile.error, "min.dec",
ifelse(df.res$maximum.decile.error, "max.dec", "mid"))))
df.res$all.highlight.sizes <- ifelse(df.res$minimum.error|df.res$maximum.error, "min/max", "min.dec/max.dec/mid")
# set standard column labels
df.res$cell.compartment.id <- df.res$library.preparation
df.res$library.preparation.id <- gsub(".*_", "", df.res$cell.compartment)
df.res$block.id <- df.res$sample.id.brnum
df.res$experiment.id <- paste0(df.res$cell.compartment.id,"_",df.res$library.preparation.id)
df.res$sample.experiment <- paste0(df.res$sample.id,"_",df.res$experiment.id)
df.res$block.experiment <- paste0(df.res$block.id,"_",df.res$experiment.id)
df.res$sample.compartment <- paste0(df.res$sample.id,"_",df.res$cell.compartment.id)
# set plot parameters
highlight.color.low <- "red"
highlight.color.high <- "blue"
background.color.highlights <- "gray"
# helper functions
text.to.make.new.dfp <- function(variable.name="sample.id", value.index=1, dfp.index=1){
text.vector1 <- paste0("id.to.get <- df.res[,'",variable.name,"'][",value.index,"]")
text.vector2 <- paste0("filter.variable.vector <- df.res[,'",variable.name,"']==id.to.get")
text.vector3 <- paste0("dfp",dfp.index," <- df.res[filter.variable.vector,]")
text.vector.list <- as.list(c(text.vector1, text.vector2, text.vector3))
return(paste0(text.vector.list, collapse = ";"))
}
# viz wrapper functions
source("deconvo_plots.R")
# dataset summaries function(s)
source("dataset_summaries.R")
## Get plot data for `[BLOCK_ID]-[EXPERIMENT_CONDITION]`
# Gets the first ID in the "sample-region-compartment-library" designation, saves as `dfp1`.
dfp1 <- parse(text=text.to.make.new.dfp("block.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[EXPERIMENT_CONDITION]` "sample-compartment-library" as
dfp2 <- parse(text=text.to.make.new.dfp("sample.experiment")) %>% eval()
## Get plot data for `[SAMPLE]-[COMPARTMENT]`
dfp3 <- parse(text=text.to.make.new.dfp("sample.compartment")) %>% eval()
## Get plot data for `[SAMPLE]`
dfp4 <- parse(text=text.to.make.new.dfp("sample.id")) %>% eval()
list.summaries.dfp1 <- get_data_summaries(dfp1, "block.experiment")
list.summaries.dfp2 <- get_data_summaries(dfp2, "sample.experiment")
list.summaries.dfp3 <- get_data_summaries(dfp3, "sample.compartment")
list.summaries.dfp4 <- get_data_summaries(dfp4, "sample.id")
list.summaries.dfp1
list.summaries.dfp2
list.summaries.dfp3
list.summaries.dfp4
list.plots.dfp1 <- deconvo_plots_list(dfp1, "anatomic.region")
list.plots.dfp1$heatmaps$heatmap6
list.plots.dfp2 <- deconvo_plots_list(dfp2, "anatomic.region")
list.plots.dfp2$heatmaps$heatmap6
list.plots.dfp3.byregion <- deconvo_plots_list(dfp3, "anatomic.region")
list.plots.dfp3.bylibraryprep <- deconvo_plots_list(dfp3, "library.preparation.id")
list.plots.dfp3.byregion$heatmaps$heatmap6
list.plots.dfp3.bylibraryprep$heatmaps$heatmap6
facet.variable.vector <- c("anatomic.region", "library.preparation.id", "cell.compartment")
results.list.dfp4 <- lapply(facet.variable.vector, function(facet.variable){
deconvo_plots_list(dfp4, facet.variable)
})
names(results.list.dfp4) <- facet.variable.vector
unpack_plot_type(results.list.dfp4, "heatmap1", "heatmaps")
unpack_plot_type(results.list.dfp4, "heatmap6", "heatmaps")
unpack_plot_type(results.list.dfp4, "lp1", "lineplots")
unpack_plot_type(results.list.dfp4, "lp2", "lineplots")
gc()
knitr::opts_chunk$set(echo = TRUE)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result-pseudobulk_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
# load the dataset
setwd("..")
setwd("..")
load.filename <- "df-result_s-opt-bias_cohort1.rda"
load.path <- file.path("data", "outputs", "04_experiment", load.filename)
df.res <- get(load(load.path))
df.res$abs.bias.neuron <- abs(df.res$bias.neuron.true.pred)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
source(file.path("scripts","02_pseudobulk","00_param.R"))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("data", "outputs", "00_preprocess", mae.filename)
list.files()
mae <- get(load(mae.path))
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("output", "00_preprocess", mae.filename)
list.files()
mae <- get(load(mae.path))
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("output", "01_mae", mae.filename)
list.files()
mae <- get(load(mae.path))
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
list.files()
mae <- get(load(mae.path))
# load rnascope cell sizes
folder.name <- "13_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("data", "outputs", "00_preprocess", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
# load rnascope cell sizes
folder.name <- "13_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- mae[["sn1.rnaseq"]]
sample.id.variable.rn <- "sample.id"
celltype.variable <- "k2"
# df.rnascope.kdata
df.rn.path <- file.path("outputs", "00_preprocess", "df-rnascope-info_cohort1.rda")
df.rn <- get(load(df.rn.path))
names9mae
names(mae)
df.rn <- mae[["cell.sizes"]]
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
#
source(file.path("scripts","02_pseudobulk","00_param.R"))
#
sce.k2 <- sce
sample.id.variable <- "Sample"
assay.name <- "logcounts"
celltype.variable <- "k2"
algorithm.name <- "nnls"
return.dimensions <- "tall"
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dim(sce.k2)
class(sce)
names(mae)
sce <- mae[["snrnaseq.k2.all"]]
dim(sce)
dim(sce)
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dim(sce.k2)
dim(sce)
sce.k2 <- cse
sce.k2 <- sce
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
names(assays(sce.k2))
names(colData(sce))
gc()
source(file.path("scripts","02_pseudobulk","00_param.R"))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
#
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae <- get(load(mae.path))
folder.name <- "03_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- sce.k2 <- mae[["snrnaseq.k2.all"]]
algorithm.name <- "nnls"
return.dimensions <- "tall"
# load rnascope cell sizes
sample.id.variable.rn <- "sample.id"
# df.rnascope.kdata
# df.rn.path <- file.path("outputs", "00_preprocess", "df-rnascope-info_cohort1.rda")
# df.rn <- get(load(df.rn.path))
df.rn <- mae[["cell.sizes"]]
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
# filter training samples
sample.id.train <- get(load("outputs", "00_preprocess", "list_snrnaseq_sampleid.rda"))[["train"]]
sample.id.train.path <- file.path("outputs", "00_preprocess", "list_snrnaseq_sampleid.rda")
sample.id.train <- get(load(sample.id.train.path))[["train"]]
sce <- sce[,sce[[sample.id.variable]] %in% sample.id.train]
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.high <- dfp.tall
# plot
new.plot.experiment.high <- ggplot(dfp.tall.high, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.id)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("S_pseudobulk id :", sample.id.iter.high))
new.plot.experiment.high
sample.id.iter <- sample.id.iter.low <- "Br2743_ant"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.low <- dfp.tall
save.image(file = file.path("env", "03_shuffle", "00_fig3ab_script.RData"))
gc()
setwd("..")
setwd("..")
env.name <- "00_fig3ab_script.RData"
source(file.path("env", "03_shuffle", env.name))
setwd("..")
setwd("..")
env.name <- "00_fig3ab_script.RData"
load(file.path("env", "03_shuffle", env.name))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
new.plot.filename <- "fig3a.jpg"
new.plot.path <- file.path("figures", "03_shuffle", new.plot.filename)
###
new.plot.low.save <- ggplot(dfp.tall.high,
aes(x = neuron.true, y = neuron.pred, shape = matched.id)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~type) + theme_bw() +
ggtitle(paste0("S pseudobulk id: ", sample.id.iter.high)) +
xlim(0.2, 1) + ylim(0.2, 1)
###
jpeg(new.plot.path, width = 5, height = 3, units = "in", res = 400)
new.plot.low.save
dev.off()
new.plot.filename <- "fig3a.jpg"
new.plot.path <- file.path("figures", "03_shuffle", new.plot.filename)
###
new.plot.low.save <- ggplot(dfp.tall.high,
aes(x = neuron.true, y = neuron.pred, shape = matched.id)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~type) + theme_bw() +
ggtitle(paste0("S pseudobulk id: ", sample.id.iter.high)) +
xlim(0.2, 1) + ylim(0.2, 1)
###
new.plot.low.save
setwd("..")
setwd("..")
jpeg(new.plot.path, width = 5, height = 3, units = "in", res = 400)
new.plot.low.save
dev.off()
new.plot.filename <- "fig3a.jpg"
new.plot.path <- file.path("figures", "03_shuffle", new.plot.filename)
###
new.plot.high.save <- ggplot(dfp.tall.high,
aes(x = neuron.true, y = neuron.pred, shape = matched.id)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~type) + theme_bw() +
ggtitle(paste0("S pseudobulk id: ", sample.id.iter.high)) +
xlim(0.2, 1) + ylim(0.2, 1)
###
new.plot.high.save
setwd("..")
setwd("..")
jpeg(new.plot.path, width = 5, height = 3, units = "in", res = 400)
new.plot.high.save
dev.off()
ggplot(dfp.tall.low, aes(x = neuron.true, y = neuron.pred, color = sample.id, size = matched.id)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_wrap(~type) +
ggtitle(paste0("S_pseudobulk id: ", sample.id.iter.low))
new.plot.filename <- "fig3b.jpg"
new.plot.path <- file.path("figures", "03_shuffle", new.plot.filename)
###
new.plot.low.save <- ggplot(dfp.tall.low,
aes(x = neuron.true, y = neuron.pred, shape = matched.id)) +
geom_point(size = 5, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~type) + theme_bw() +
ggtitle(paste0("S pseudobulk id: ", sample.id.iter.low)) + xlim(0.2, 1) + ylim(0.2, 1)
###
new.plot.low.save
setwd("..")
setwd("..")
###
jpeg(new.plot.path, width = 5, height = 3, units = "in", res = 400)
new.plot.low.save
dev.off()
