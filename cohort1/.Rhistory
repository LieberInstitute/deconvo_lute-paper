cellScaleFactorNewHigh <- 0.95
cellScaleFactorNewMidHigh <- 0.75
cellScaleFactorNewMidLow <- 0.25
cellScaleFactorNewLow <- 0.05
# get changes for each iteration
changeNull <- 0
changeHigh <- cellScaleFactorNewHigh-cellScaleFactorStart
changeMidHigh <- cellScaleFactorNewMidHigh-cellScaleFactorStart
changeMidLow <- cellScaleFactorNewMidLow-cellScaleFactorStart
changeLow <- cellScaleFactorNewLow-cellScaleFactorStart
labelHigh <- paste0("Increase\n(cellScaleFactor = ",cellScaleFactorNewHigh,")")
labelMidHigh <- paste0("Moderate Inc.\n(cellScaleFactor = ",cellScaleFactorNewMidHigh,")")
labelMidLow <- paste0("Moderate Dec.\n(cellScaleFactor = ",cellScaleFactorNewMidLow,")")
labelLow <- paste0("Decrease\n(cellScaleFactor = ",cellScaleFactorNewLow,")")
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
#-----------------------
# get simulation results
#-----------------------
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
cellScaleFactorsLow
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
cellScaleFactorsLow
cellScaleFactorsMidLow
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
#-----------------------
# get simulation results
#-----------------------
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
predictedProportionsStart <- newParam@predictionsTable[[1]]
predictedProportionsNull <- newParamNullScales@predictionsTable[[1]]
predictedProportionsHigh <- newParamHigh@predictionsTable[[1]]
predictedProportionsMidHigh <- newParamMidHigh@predictionsTable[[1]]
predictedProportionsMidLow <- newParamMidLow@predictionsTable[[1]]
predictedProportionsLow <- newParamLow@predictionsTable[[1]]
biasStart <- trueProportionValue-predictedProportionsStart
biasNull <- trueProportionValue-predictedProportionsNull
biasHigh <- trueProportionValue-predictedProportionsHigh
biasMidHigh <- trueProportionValue-predictedProportionsMidHigh
biasMidLow <- trueProportionValue-predictedProportionsMidLow
biasLow <- trueProportionValue-predictedProportionsLow
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
errorHigh <- abs(biasHigh)
errorMidHigh <- abs(biasMidHigh)
errorMidLow <- abs(biasMidLow)
errorLow <- abs(biasLow)
facetVector <- c(labelHigh, labelMidHigh, labelMidLow, labelLow)
newScalesVector <- c(cellScaleFactorNewHigh, cellScaleFactorNewMidHigh,
cellScaleFactorNewMidLow, cellScaleFactorNewLow)
proportionsVector <- c(predictedProportionsHigh, predictedProportionsMidHigh,
predictedProportionsMidLow, predictedProportionsLow)
biasVector <- c(biasHigh, biasMidHigh, biasMidLow, biasLow)
errorVector <- c(errorHigh, errorMidHigh, errorMidLow, errorLow)
dfp2 <- do.call(rbind, lapply(seq(4), function(index){
facetValue <- facetVector[index]
newScalesValue <- newScalesVector[index]
predictedProportion <- proportionsVector[index]
biasValue <- biasVector[index]
errorValue <- errorVector[index]
cellScaleFactorChange <- newScalesValue-cellScaleFactorStart
proportionChange <- predictedProportion-predictedProportionsStart
biasChange <- biasValue-biasStart
errorChange <- errorValue-errorStart
markerExpressionChange <-
(markerExpression*newScalesValue)-markerExpression
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$type <- facetValue
return(dfpNew)
})) |> as.data.frame()
dfp2$Change <- ifelse(dfp2$value > 0, "Increase", "Decrease")
plot2 <- ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold"))
plot2
libv <- c("ggplot2", "reshape2", "gridExtra", "lute")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change and point value examples for change in cellScaleFactor.
#
#
#
#-----------
# set params
#-----------
# set starting params (conditions for example)
cellScaleFactorStart <- 10
cellScaleFactorOffTypeValue <- 3 # this doesn't change for demonstration
trueProportionValue <- 0.8
markerExpression <- 5
# set cell scale factors to change
cellScaleFactorNewHigh <- 0.95
cellScaleFactorNewMidHigh <- 0.75
cellScaleFactorNewMidLow <- 0.25
cellScaleFactorNewLow <- 0.05
# get changes for each iteration
changeNull <- 0
changeHigh <- cellScaleFactorNewHigh-cellScaleFactorStart
changeMidHigh <- cellScaleFactorNewMidHigh-cellScaleFactorStart
changeMidLow <- cellScaleFactorNewMidLow-cellScaleFactorStart
changeLow <- cellScaleFactorNewLow-cellScaleFactorStart
labelHigh <- paste0("Increase\n(cellScaleFactor = ",cellScaleFactorNewHigh,")")
labelMidHigh <- paste0("Moderate Inc.\n(cellScaleFactor = ",cellScaleFactorNewMidHigh,")")
labelMidLow <- paste0("Moderate Dec.\n(cellScaleFactor = ",cellScaleFactorNewMidLow,")")
labelLow <- paste0("Decrease\n(cellScaleFactor = ",cellScaleFactorNewLow,")")
#-----------------------
# get simulation results
#-----------------------
# get expression matrices
zrefExample <- matrix(c(markerExpression, 0, 0, markerExpression), nrow = 2)
colnames(zrefExample) <- c("type1", "type2")
bulkExpressionExample <- matrix(c(0.5,0.5), ncol = 1)
# get scale factor sets
cellScaleFactorsStart <- c(cellScaleFactorStart, cellScaleFactorOffTypeValue)
cellScaleFactorsNull <- c(1, cellScaleFactorOffTypeValue)
cellScaleFactorsHigh <- c(cellScaleFactorNewHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidHigh <- c(cellScaleFactorNewMidHigh, cellScaleFactorOffTypeValue)
cellScaleFactorsMidLow <- c(cellScaleFactorNewMidLow, cellScaleFactorOffTypeValue)
cellScaleFactorsLow <- c(cellScaleFactorNewLow, cellScaleFactorOffTypeValue)
names(cellScaleFactorsExample) <- names(cellScaleFactorsNull) <-
names(cellScaleFactorsHigh) <- names(cellScaleFactorsMidHigh) <-
names(cellScaleFactorsLow) <- names(cellScaleFactorsMidLow) <-
c("type1", "type2")
newParam <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsExample) |>
deconvolution()
newParamNullScales <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsNull) |>
deconvolution()
newParamHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsHigh) |>
deconvolution()
newParamMidHigh <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidHigh) |>
deconvolution()
newParamMidLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsMidLow) |>
deconvolution()
newParamLow <-
nnlsParam(bulkExpressionExample, zrefExample, cellScaleFactorsLow) |>
deconvolution()
predictedProportionsStart <- newParam@predictionsTable[[1]]
predictedProportionsNull <- newParamNullScales@predictionsTable[[1]]
predictedProportionsHigh <- newParamHigh@predictionsTable[[1]]
predictedProportionsMidHigh <- newParamMidHigh@predictionsTable[[1]]
predictedProportionsMidLow <- newParamMidLow@predictionsTable[[1]]
predictedProportionsLow <- newParamLow@predictionsTable[[1]]
biasStart <- trueProportionValue-predictedProportionsStart
biasNull <- trueProportionValue-predictedProportionsNull
biasHigh <- trueProportionValue-predictedProportionsHigh
biasMidHigh <- trueProportionValue-predictedProportionsMidHigh
biasMidLow <- trueProportionValue-predictedProportionsMidLow
biasLow <- trueProportionValue-predictedProportionsLow
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
errorHigh <- abs(biasHigh)
errorMidHigh <- abs(biasMidHigh)
errorMidLow <- abs(biasMidLow)
errorLow <- abs(biasLow)
facetVector <- c(labelHigh, labelMidHigh, labelMidLow, labelLow)
newScalesVector <- c(cellScaleFactorNewHigh, cellScaleFactorNewMidHigh,
cellScaleFactorNewMidLow, cellScaleFactorNewLow)
proportionsVector <- c(predictedProportionsHigh, predictedProportionsMidHigh,
predictedProportionsMidLow, predictedProportionsLow)
biasVector <- c(biasHigh, biasMidHigh, biasMidLow, biasLow)
errorVector <- c(errorHigh, errorMidHigh, errorMidLow, errorLow)
dfp2 <- do.call(rbind, lapply(seq(4), function(index){
facetValue <- facetVector[index]
newScalesValue <- newScalesVector[index]
predictedProportion <- proportionsVector[index]
biasValue <- biasVector[index]
errorValue <- errorVector[index]
cellScaleFactorChange <- newScalesValue-cellScaleFactorStart
proportionChange <- predictedProportion-predictedProportionsStart
biasChange <- biasValue-biasStart
errorChange <- errorValue-errorStart
markerExpressionChange <-
(markerExpression*newScalesValue)-markerExpression
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$type <- facetValue
return(dfpNew)
})) |> as.data.frame()
dfp2$Change <- ifelse(dfp2$value > 0, "Increase", "Decrease")
plot2 <- ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold"))
plot2
cellScaleFactorChange
dfp2
log(-9)
ggplot(dfp2, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab(yLabelString) + facet_wrap(~type, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle=45,hjust=1),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = changeLevelsVector,
values=c("dodgerblue", "gold")) +
ylim(-1,1)
dfp2
head(dfp2)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change in expression and prediction with scale factor change.
#
#
#
#
#
source("./scripts/09_example_plots/00_param.R")
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart05 <-
listMultiPlot05$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart05, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot1 <- multiPanelPlots(markerExpressionStart = 1)
barplotStart1 <-
listMultiPlot1$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart1, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot2 <- multiPanelPlots(markerExpressionStart = 2)
barplotStart2 <-
listMultiPlot2$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart2, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
singleValueTestVariables
singleValueTestVariables()
valuesList <- list(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorOffTypeValue = cellScaleFactorOffTypeValue,
trueProportionValue = trueProportionValue,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorNew,
bulkExpressionValue = bulkExpressionValue
)
?round
libv <- c("ggplot2", "reshape2", "gridExtra", "lute")
sapply(libv, library, character.only = T)
singleValueTestVariables <- function(cellScaleFactorsStart = 0.5,
cellScaleFactorOffTypeValue = 1,
trueProportionValue = 0.8,
markerExpressionStart = 0.5,
cellScaleFactorNew = 1,
bulkExpressionValue = 0.8){
# singleValueTestVariables
#
# Run to get example valuesList object.
#
# cellScaleFactorsStart : starting cell scale factor value.
# cellScaleFactorOffTypeValue : value of the difference for new simulation.
# trueProportionValue : value of the true proportion across simulations.
# markerExpressionStart : starting marker expression.
# cellScaleFactorNew : new value of the scale factor.
# bulkExpressionValue : value of bulk gene expressions
#
#
valuesList <- list(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorOffTypeValue = cellScaleFactorOffTypeValue,
trueProportionValue = trueProportionValue,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorNew,
bulkExpressionValue = bulkExpressionValue
)
valuesList <- parseExampleStartValues(valuesList)
return(valuesList)
}
parseExampleStartValues <- function(valuesList, roundValue = 2){
# parseExampleStartValues
#
# Get predictions for starting values, and append to valuesList
#
# valuesList : List of starting simulation values.
# roundValue : Second argument to base::round().
#
#
#
#
# get scale factor sets
cellScaleFactorsStart <- c(valuesList[["cellScaleFactorsStart"]],
valuesList[["cellScaleFactorOffTypeValue"]])
cellScaleFactorsNull <- c(1, 1)
names(cellScaleFactorsStart) <-
names(cellScaleFactorsNull) <- c("type1", "type2")
# get expression matrices
matrixValues <- c(valuesList[["markerExpressionStart"]], 0.1, 0.1,
valuesList[["markerExpressionStart"]])
zrefExample <- matrix(matrixValues, nrow = 2)
colnames(zrefExample) <- c("type1", "type2")
zrefExampleScaled <- lute:::.zstransform(zrefExample, cellScaleFactorsStart)
#bulkExpressionExample <- matrix(
#  rep(valuesList[["bulkExpressionValue"]], 2), ncol = 1)
bulkExpressionExample <- t(t(
c(valuesList[["trueProportionValue"]],
1-valuesList[["trueProportionValue"]])) %*%
t(zrefExampleScaled))
rownames(zrefExample) <- rownames(zrefExampleScaled) <-
rownames(bulkExpressionExample) <- paste0("gene", seq(nrow(zrefExample)))
newParamStart <-
nnlsParam(bulkExpressionExample, zrefExample,
cellScaleFactorsStart) |>
deconvolution()
newParamNull <-
nnlsParam(bulkExpressionExample, zrefExample,
cellScaleFactorsNull) |>
deconvolution()
predictedProportionsStart <- newParamStart@predictionsTable[[1]]
predictedProportionsNull <- newParamNull@predictionsTable[[1]]
biasStart <- valuesList[["trueProportionValue"]]-predictedProportionsStart
biasNull <- valuesList[["trueProportionValue"]]-predictedProportionsNull
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
# make barplot
dfp <- data.frame(
cellScaleFactor = valuesList[["cellScaleFactorsStart"]],
markerExpression = valuesList[["markerExpressionStart"]],
trueProportion = valuesList[["trueProportionValue"]],
predictedProportion = predictedProportionsStart,
biasValue = biasStart,
errorValue = errorStart
)
dfp <- melt(dfp)
dfp$value <- round(dfp$value, roundValue)
plot1 <- ggplot(dfp, aes(x = variable, y = value)) +
geom_bar(stat="identity", color = "black", fill = 'gray') +
theme_bw() + geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle=45,hjust=1),
axis.title.x = element_blank()) +
geom_text(aes(label = value), vjust = -1.5) +
ylab("Value") + ylim(min(dfp$value-1), max(dfp$value+1)) +
ggtitle("Example starting values")
# return
valuesList[["deconvoResultsStart"]] <- newParamStart
valuesList[["bulkExpressionExample"]] <- bulkExpressionExample
valuesList[["markerExpressionStartScaled"]] <- zrefExample[1,1]
valuesList[["zrefExample"]] <- zrefExample
valuesList[["zrefExampleScaled"]] <- zrefExampleScaled
valuesList[["predictedProportionsStart"]] <- predictedProportionsStart
valuesList[["predictedProportionsNull"]] <- predictedProportionsNull
valuesList[["biasStart"]] <- biasStart
valuesList[["biasNull"]] <- biasNull
valuesList[["errorStart"]] <- errorStart
valuesList[["errorNull"]] <- errorNull
valuesList[["ggBarplotStart"]] <- plot1
return(valuesList)
}
singleValueExample <- function(valuesList, conditionLabel = "",
plotTitleString = ""){
# singleValueExample
#
# Get single point values example.
#
# @param valuesList Output from singleValueTestVariables().
#
#
#
#
changeNew <- valuesList[["cellScaleFactorNew"]]-
valuesList[["cellScaleFactorStart"]]
labelNew <-
paste0("cellScaleFactor = ",valuesList[["cellScaleFactorNew"]],")")
# get simulation results
cellScaleFactorsNew <- c(valuesList[["cellScaleFactorNew"]],
valuesList[["cellScaleFactorOffTypeValue"]])
names(cellScaleFactorsNew) <- c("type1", "type2")
newParamNew <-
nnlsParam(
valuesList[["bulkExpressionExample"]],
valuesList[["zrefExample"]],
cellScaleFactorsNew) |>
deconvolution()
predictedProportionsNew <- newParamNew@predictionsTable[[1]]
biasNew <- valuesList[["trueProportionValue"]]-predictedProportionsNew
errorNew <- abs(biasNew)
zrefNew <-
lute:::.zstransform(valuesList[["zrefExample"]],
cellScaleFactorsNew)
# get changes
cellScaleFactorChange <- valuesList[["cellScaleFactorNew"]]-
valuesList[["cellScaleFactorsStart"]]
proportionChange <- predictedProportionsNew-
valuesList[["predictedProportionsStart"]]
biasChange <- biasNew-valuesList[["biasStart"]]
errorChange <- errorNew-valuesList[["errorStart"]]
markerExpressionChange <- zrefNew[1,1]-valuesList[["zrefExample"]][1,1]
# get plot data
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$conditionLabel <- conditionLabel
dfpNew$Change <- ifelse(dfpNew$value > 0, "Increase", "Decrease")
dfpNew$variable <- factor(dfpNew$variable,
levels = c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"))
plot2 <- ggplot(dfpNew, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab("Change (New - Old)") + facet_wrap(~conditionLabel, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = c("Increase", "Decrease"),
values=c("dodgerblue", "gold"))
returnList <- list(
valuesList = valuesList,
deconvoResult = newParamNew,
zrefNew = zrefNew,
plotData = dfpNew,
ggBarplotChange = plot2
)
return(returnList)
}
