source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_script.RData")
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
table(df.k2$experiment.type)
table(df.k2$experiment.type, df.k2$bulk.scale.type)
table(df.k2$experiment.type, df.k2$bulk.scale.type, df.k2$assay.name.lutearg)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label*assay.name.lutearg)
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_script.RData")
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*s.set.label*assay.name.lutearg)
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*assay.name.lutearg)
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~s.set.label) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df.k2, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) + theme_bw() +
geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg)
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~experiment.type*assay.name.lutearg) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# absolute errors
ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/s2_scatter.jpg"
jpeg(new.plot.path, width = 5, height = 5, res = 400, units = "in")
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg)
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg)
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/s2_scatter.jpg"
jpeg(new.plot.path, width = 5, height = 5, res = 400, units = "in")
dev.off()
dev.off()
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2_scatter.jpg"
jpeg(new.plot.path, width = 5, height = 5, res = 400, units = "in")
?jpeg
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2_scatter.jpg"
jpeg(new.plot.path, width = 5, height = 5, res = 400, units = "in")
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2_scatter.jpg"
jpeg(new.plot.path, width = 5, height = 5, res = 400, units = "in")
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2_scatter.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.scatter
dev.off()
# absolute errors
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_jitterbox1.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_jitterbox1.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.jitterbox
dev.off()
head(df.k2)
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
cd <- colData(mae[["bulk.rnaseq"]])
head(cd)
cd$expt_condition
unique(cd$expt_condition)
colnames(cd)
rownames9cd
rownames(cd)
dim(df.k2)
head(df.k2)
tail(df.k2)
df.k2$sample.id.bulk <- rownames(df.k2)
unique(rownames(df.k2))
unique(gsub("Bulk.*", "Bulk", rownames(df.k2)))
df.k2$bulk.sample.id <-
ifelse(grepl("Bulk.*", rownames(df.k2)),gsub("Bulk.*", "Bulk", rownames(df.k2)),
grepl("Nuc.*", rownames(df.k2)),gsub("Nuc.*", "Nuc", rownames(df.k2)),
grepl("Cyto.*", rownames(df.k2)),gsub("Cyto.*", "Cyto", rownames(df.k2)),
rownames(df.k2))
dim(df.s.k2.shared.counts.counts)
rownames(df.s.k2.shared.counts.counts)
rownames(df.s.k2.shared.rpkm.counts)
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:11)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
df.s.k2.shared.counts.counts$bulk.sample.id <- rownames(df.s.k2.shared.counts.counts)
cd <- colData(mae[["bulk.rnaseq"]])
head(cd)
cd <- colData(mae[["bulk.rnaseq"]])
list.counts <- lapply(list.counts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "counts"
df
})
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.logcounts[,c(1:6,8:11)],
df.s.k2.within.counts.lognorm,
df.s.k2.within.rpkm.lognorm
)
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:11)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.logcounts[,c(1:6,8:11)],
df.s.k2.within.counts.lognorm,
df.s.k2.within.rpkm.lognorm
)
# append bulk conditions
cd <- colData(mae[["bulk.rnaseq"]])
list.counts <- lapply(list.counts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "counts"
df
})
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
df.k2 <- rbind(do.call(rbind, list.counts), do.call(rbind, list.logcounts))
head(df.k2)
#---------------
# format results
#---------------
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:11)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.logcounts[,c(1:6,8:11)],
df.s.k2.within.counts.lognorm,
df.s.k2.within.rpkm.lognorm
)
# append bulk conditions
cd <- colData(mae[["bulk.rnaseq"]])
list.counts <- lapply(list.counts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "counts"
df
})
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
# bind final df
df.k2 <- rbind(do.call(rbind, list.counts), do.call(rbind, list.logcounts))
# append abs.error
df.k2$abs.error.neuron <- abs(as.numeric(df.k2$neuron)-as.numeric(df.k2$true.neuron))
df.k2$abs.error.glial <- abs(as.numeric(df.k2$glial)-as.numeric(df.k2$true.glial))
# format
df.k2$true.neuron <- as.numeric(df.k2$true.neuron)
# clear cache
rm(df.s.k2.shared.counts.counts)
rm(df.s.k2.shared.rpkm.counts)
rm(df.s.k2.within.counts.counts)
rm(df.s.k2.within.rpkm.counts)
rm(df.s.k2.shared.counts.logcounts)
rm(df.s.k2.shared.rpkm.logcounts)
rm(df.s.k2.within.counts.lognorm)
rm(df.s.k2.within.rpkm.lognorm)
rm(mae)
rm(mae.final)
rm(rse.counts)
rm(rse.rpkm)
rm(sce.iter)
# save
save(df.k2, file = "./outputs/05_bulk/k2_results.rda")
head(df.k2)
dim(df.k2)
table(df.k2$bulk.sample.condition)
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter$s.pred.set.name <- names(list.s.pred)[ii]
expt.iter$s.pred.set.values <- paste0(names(list.s.pred[[ii]]), ":",
list.s.pred[[ii]],collapse = ";")
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "What type of cell reference atlas was used. 'shared' is the same summary across donors and experiments, 'within' means a new reference was calculated based on each donor's own snRNAseq data.",
y.expression.scale = "What type of scaling was used in the bulk RNAseq expression data. 'counts' means unadjusted counts from SPEQeasy, 'RPKM' means the same as 'counts' but with RPKM-normalization, a type of gene/transcript-length normalization.",
s.pred.set.name = "Label of the s cell size scale factor set used (see plots).",
s.pred.set.values = "Values of the s cell size scale factor set used.",
cell.label.type = "Identifier of the cell type labels for experiments.")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
new.plot.scatter <- ggplot(df.k2,
aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg)
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2_scatter.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.scatter
dev.off()
# absolute errors
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_jitterbox1.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.jitterbox
dev.off()
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitterbox
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_jitterbox1.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.jitterbox
dev.off()
head(df.k2)
ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~sample.id*experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond <- ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond
new.plot.jitter.cond <- ggplot(df.k2, aes(x = bulk.sample.condition, y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.cond
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2c_jitterbox2_condition.jpg"
jpeg(new.plot.path, width = 6, height = 5, res = 400, units = "in")
new.plot.jitter.cond
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2c_jitterbox2_condition.jpg"
jpeg(new.plot.path, width = 6, height = 4, res = 400, units = "in")
new.plot.jitter.cond
dev.off()
