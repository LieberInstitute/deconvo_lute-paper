setwd("C:/Users/User/Documents/GitHub/cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata()
BiocManager::install("ExperimentHubData")
ExperimentHubData::makeExperimentHubMetadata()
cd ..
setwd("C:/Users/User/Documents/GitHub")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
?.checkValidViews
?AnnotationHubData:::.checkValidViews
getSubTerms(biocViewsVocab, term="Technology")
library(biocViews)
getSubTerms(biocViewsVocab, term="software")
data(biocViewsVocab)
reposPath <- system.file("doc", package="biocViews")
reposUrl <- paste("file://", reposPath, sep="")
biocViews <- getBiocSubViews(reposUrl, biocViewsVocab, topTerm="Software")
biocViews
data(biocViewsVocab)
reposPath <- system.file("doc", package="biocViews")
reposUrl <- paste("file://", reposPath, sep="")
biocViews <- getBiocSubViews(reposUrl, biocViewsVocab, topTerm="ExperimentData")
biocViews
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
ExperimentHubData::makeExperimentHubMetadata("cellScaleFactors")
setwd("C:/Users/User/Documents/GitHub")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./outputs/01_mae/sample_qc_df.rda")
filter.low <- cd.id$confidence.circle=="Low" & cd.id$confidence.star=="Low"
mean(na.omit(as.numeric(cd.id[filter.low,]$size.sn.neuron)))
mean(na.omit(as.numeric(cd.id[!filter.low,]$size.sn.neuron)))
ggplot(cd.id, aes(x = size.sn.neuron, y = size.sn.glial)) +
geom_point() + facet_wrap(~confidence.star)
gc()
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
combo.id.variable <- "SAMPLE_ID"
confidence.variable <- "Confidence"
cd.id <- as.data.frame(colData(mae))
for(sample.id in cd.id$sample.id){
message(sample.id)
filter.sample.rnascope <- cd.rnascope$Sample==sample.id
cd.rnascope.iter <- cd.rnascope[filter.sample.rnascope,]
cd.id[cd.id$sample.id==sample.id,]$confidence.circle <- cd.rnascope.iter[cd.rnascope.iter$combo=="CIRCLE",]$Confidence[1]
cd.id[cd.id$sample.id==sample.id,]$confidence.star <- cd.rnascope.iter[cd.rnascope.iter$combo=="STAR",]$Confidence[1]
cell.sizes.iter <- cell.sizes[cell.sizes$sample.id==sample.id,]
filter.glial <- cell.sizes.iter[,2]=="glial"
filter.neuron <- cell.sizes.iter[,2]=="neuron"
cd.id[cd.id$sample.id==sample.id,]$size.sn.glial <- cell.sizes.iter[filter.glial,]$size[1]
cd.id[cd.id$sample.id==sample.id,]$size.sn.neuron <- cell.sizes.iter[filter.neuron,]$size[1]
if(sample.id %in% names(cell.proportions)){
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.glial <- cell.proportions[[sample.id]][["glial"]]
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.neuron <- cell.proportions[[sample.id]][["neuron"]]
}
}
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
combo.id.variable <- "SAMPLE_ID"
confidence.variable <- "Confidence"
cd.id <- as.data.frame(colData(mae))
cd.id$confidence.circle <- cd.id$confidence.star <- "NA"
sce.img <- mae[["sce.img"]]
cd.rnascope <- colData(sce.img)
cd.rnascope$combo <- gsub(".*_", "", cd.rnascope$SAMPLE_ID)
table(cd.rnascope$combo)
cell.sizes <- metadata(mae[["snrnaseq.k2.all"]])[["cell.sizes"]]
cell.sizes <- cell.sizes[cell.sizes$ktype=="k2",]
cell.proportions <- metadata(mae[["snrnaseq.k2.all"]])[["list.df.true.k2"]]
cd.id$size.sn.glial <- cd.id$size.sn.neuron <- "NA"
cd.id$proportion.sn.glial <- cd.id$proportion.sn.neuron <- "NA"
for(sample.id in cd.id$sample.id){
message(sample.id)
filter.sample.rnascope <- cd.rnascope$Sample==sample.id
cd.rnascope.iter <- cd.rnascope[filter.sample.rnascope,]
cd.id[cd.id$sample.id==sample.id,]$confidence.circle <- cd.rnascope.iter[cd.rnascope.iter$combo=="CIRCLE",]$Confidence[1]
cd.id[cd.id$sample.id==sample.id,]$confidence.star <- cd.rnascope.iter[cd.rnascope.iter$combo=="STAR",]$Confidence[1]
cell.sizes.iter <- cell.sizes[cell.sizes$sample.id==sample.id,]
filter.glial <- cell.sizes.iter[,2]=="glial"
filter.neuron <- cell.sizes.iter[,2]=="neuron"
cd.id[cd.id$sample.id==sample.id,]$size.sn.glial <- cell.sizes.iter[filter.glial,]$size[1]
cd.id[cd.id$sample.id==sample.id,]$size.sn.neuron <- cell.sizes.iter[filter.neuron,]$size[1]
if(sample.id %in% names(cell.proportions)){
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.glial <- cell.proportions[[sample.id]][["glial"]]
cd.id[cd.id$sample.id==sample.id,]$proportion.sn.neuron <- cell.proportions[[sample.id]][["neuron"]]
}
}
head(cd.id)
class(cd.id)
summary(cd.id)
for(c in c(2,3,4,5,6,7)){cd.id[,c] <- as.numeric(as.character(cd.id[,c]))}
summary(cd.id)
save(cd.id, file = "./outputs/01_mae/sample_qc_df.rda")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./outputs/01_mae/sample_qc_df.rda")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./outputs/01_mae/sample_qc_df.rda")
summary(cd.id)
filter.low <- cd.id$confidence.circle=="Low" & cd.id$confidence.star=="Low"
mean(na.omit(as.numeric(cd.id[filter.low,]$size.sn.neuron)))
mean(na.omit(as.numeric(cd.id[!filter.low,]$size.sn.neuron)))
ggplot(cd.id, aes(x = size.sn.neuron, y = size.sn.glial)) +
geom_point() + facet_wrap(~confidence.star)
head(cd.id)
class(cd.id$confidence.star)
cd.id$confidence.star
gc()
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
gc()
gc()
gc()
gc()
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
source(file.path("scripts","02_pseudobulk","00_param.R"))
source(file.path("scripts","03_shuffle","00_param.R"))
source(file.path("scripts","03_shuffle","00_param_pseudobulk.R"))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae <- get(load(mae.path))
folder.name <- "03_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- sce.k2 <- mae[["snrnaseq.k2.all"]]
algorithm.name <- "nnls"
return.dimensions <- "tall"
# load rnascope cell sizes
sample.id.variable.rn <- "sample.id"
df.rn <- mae[["cell.sizes"]]
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
dim(dfs.rn)
dfs.rn <- na.omit(dfs.rn)
dim(dfs.rn)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
# filter training samples
sample.id.train.path <- file.path("outputs", "00_preprocess", "list_snrnaseq_sampleid.rda")
sample.id.train <- get(load(sample.id.train.path))[["train"]]
sce <- sce[,sce[[sample.id.variable]] %in% sample.id.train]
# subset on rnascope samples
sce <- sce[,sce$Sample %in% dfs.rn$sample.id]
dim(sce)
dfs.rn
#!/usr/bin/env R
# Author: Sean Maden
#
# Run pseudobulk shuffle experiment varying Spseudobulk.
#
source(file.path("scripts","02_pseudobulk","00_param.R"))
source(file.path("scripts","03_shuffle","00_param.R"))
source(file.path("scripts","03_shuffle","00_param_pseudobulk.R"))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae <- get(load(mae.path))
folder.name <- "03_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- sce.k2 <- mae[["snrnaseq.k2.all"]]
algorithm.name <- "nnls"
return.dimensions <- "tall"
# load rnascope cell sizes
sample.id.variable.rn <- "sample.id"
df.rn <- mae[["cell.sizes"]]
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
dim(dfs.rn)
dfs.rn <- na.omit(dfs.rn)
dim(dfs.rn)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
# filter training samples
sample.id.train.path <- file.path("outputs", "00_preprocess", "list_snrnaseq_sampleid.rda")
sample.id.train <- get(load(sample.id.train.path))[["train"]]
sce <- sce[,sce[[sample.id.variable]] %in% sample.id.train]
# subset on rnascope samples
sce <- sce[,sce$Sample %in% dfs.rn$sample.id]
#-----------------------------------
#
# experiment: high neuron proportion
#
#-----------------------------------
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.high <- dfp.tall
#-----------------------------------
#
# experiment: low neuron proportion
#
#-----------------------------------
sample.id.iter <- sample.id.iter.low <- "Br2743_ant"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.low <- dfp.tall
# save
save.image(file = file.path("env", "03_shuffle", "00_fig3ab_script.RData"))
length(unique(dfp.tall.high$sample.id))
head(dfp.tall.high)
dim(dfs.rn)
length(unique(sce$Sample))
sce.k2 <- sce.k2[,sce.k2$Sample %in% dfs.rn$sample.id]
length(unique(sce.k2$Sample))
sample.id.train
length(sample.id.train)
sample.id.train <- sample.id.train[sample.id.train %in% dfs.rn$sample.id]
length(sample.id.train)
sample.id.variable
gc()
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Run pseudobulk shuffle experiment varying Spseudobulk.
#
source(file.path("scripts","02_pseudobulk","00_param.R"))
source(file.path("scripts","03_shuffle","00_param.R"))
source(file.path("scripts","03_shuffle","00_param_pseudobulk.R"))
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "scuttle", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae <- get(load(mae.path))
folder.name <- "03_shuffle"
celltype.variable <- "k2"
sample.id.variable <- "Sample"
assay.name <- "logcounts"
sce <- sce.k2 <- mae[["snrnaseq.k2.all"]]
algorithm.name <- "nnls"
return.dimensions <- "tall"
# load rnascope cell sizes
sample.id.variable.rn <- "sample.id"
df.rn <- mae[["cell.sizes"]]
dfs.rn <- t(df.rn) %>% as.data.frame()
dfs.rn <- dfs.rn[dfs.rn$k.label==celltype.variable,]
dfs.rn <- data.frame(s.glial = dfs.rn[dfs.rn$cell_type=="glial",]$cell_size,
s.neuron = dfs.rn[dfs.rn$cell_type=="neuron",]$cell_size,
sample.id.column = dfs.rn[dfs.rn$cell_type=="neuron",]$sample_id)
dim(dfs.rn)
dfs.rn <- na.omit(dfs.rn)
dim(dfs.rn)
colnames(dfs.rn)[3] <- sample.id.variable.rn
for(c in seq(2)){dfs.rn[,c] <- as.numeric(dfs.rn[,c])}
# filter training samples
sample.id.train.path <- file.path("outputs", "00_preprocess", "list_snrnaseq_sampleid.rda")
sample.id.train <- get(load(sample.id.train.path))[["train"]]
sample.id.train <- sample.id.train[sample.id.train %in% dfs.rn$sample.id]
length(sample.id.train)
# subset on rnascope samples
sce <- sce[,sce[[sample.id.variable]] %in% sample.id.train]
sce.k2 <- sce.k2[,sce.k2$Sample %in% sample.id.train]
#-----------------------------------
#
# experiment: high neuron proportion
#
#-----------------------------------
sample.id.iter <- sample.id.iter.high <- "Br3942_mid"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.high <- dfp.tall
#-----------------------------------
#
# experiment: low neuron proportion
#
#-----------------------------------
sample.id.iter <- sample.id.iter.low <- "Br2743_ant"
s.vector <- dfs.rn[dfs.rn$sample.id==sample.id.iter,]
s.vector <- c("glial" = as.numeric(s.vector[1]), "neuron" = as.numeric(s.vector[2]))
dfp.tall <- get_ypb_experiment_series(sce.k2,
sample.id.variable = sample.id.variable,
celltype.variable = celltype.variable,
assay.name = assay.name,
s.vector = s.vector,
algorithm.name = algorithm.name,
return.dimensions = return.dimensions)
dfp.tall$s.sample.id <- sample.id.iter
dfp.tall$matched.id <- dfp.tall$s.sample.id==dfp.tall$sample.id
dfp.tall.low <- dfp.tall
# save
save.image(file = file.path("env", "03_shuffle", "00_fig3ab_script.RData"))
head(dfp.tall)
# dependencies
knitr::opts_chunk$set(echo = TRUE)
libv <- c("snow", "ggplot2", "dplyr", "parallel",
"doParallel", "lute", "dplyr", "scuttle")
sapply(libv, library, character.only = T)
###
point.color <- "purple"
dfp.tall$shuffle.term <- "S_pseudobulk"
write.csv(dfp.tall, row.names = F, file = "./outputs/03_shuffle/table_s3_spb.csv")
setwd("..")
setwd("..")
dfp.tall$shuffle.term <- "S_pseudobulk"
write.csv(dfp.tall, row.names = F, file = "./outputs/03_shuffle/table_s3_spb.csv")
colnames(dfp.tall)
head(dfp.tall)
# get write table
dfp.tall.write <- dfp.tall
dfp.tall.write$shuffle.term <- "S_pseudobulk"
colnames.write <- c("glial.true", "neuron.true",
"glial.pred", "neuron.pred",
"type", "sample.id",
"glial.abs.error", "neuron.abs.error",
"s.sample.id", "shuffle.term")
dfp.tall.write <- dfp.tall.write[,colnames.write]
colnames(dfp.tall)
head(dfp.tall)
colnames(dfp.tall)
colnames(dfp.tall.write)
# get write table
dfp.tall.write <- dfp.tall
colnames(dfp.tall.write)[9] <- "index.sample.id"
dfp.tall.write$shuffle.term <- "S_pseudobulk"
colnames.write <- c("glial.true", "neuron.true",
"glial.pred", "neuron.pred",
"type", "sample.id",
"glial.abs.error", "neuron.abs.error",
"s.sample.id", "shuffle.term")
dfp.tall.write <- dfp.tall.write[,colnames.write]
# get write table
dfp.tall.write <- dfp.tall
colnames(dfp.tall.write)[9] <- "index.sample.id"
dfp.tall.write$shuffle.term <- "S_pseudobulk"
colnames.write <- c("glial.true", "neuron.true",
"glial.pred", "neuron.pred",
"type", "sample.id",
"glial.abs.error", "neuron.abs.error",
"index.sample.id", "shuffle.term")
dfp.tall.write <- dfp.tall.write[,colnames.write]
setwd("..")
setwd("..")
write.csv(dfp.tall.write, row.names = F, file = "./outputs/03_shuffle/table_s3_spb.csv")
# get write table
dfp.tall.write <- dfp.tall
colnames(dfp.tall.write)[9] <- "index.sample.id"
dfp.tall.write$shuffle.term <- "S_pseudobulk"
colnames.write <- c("glial.true", "neuron.true",
"glial.pred", "neuron.pred",
"type", "sample.id",
"glial.abs.error", "neuron.abs.error",
"index.sample.id", "shuffle.term")
dfp.tall.write <- dfp.tall.write[,colnames.write]
setwd("..")
setwd("..")
write.csv(dfp.tall.write, row.names = F, file = "./outputs/03_shuffle/table_s3_spb.csv")
setwd("..")
setwd("..")
write.csv(dfp.tall.write, row.names = F, file = "./outputs/03_shuffle/table_s3_spb.csv")
