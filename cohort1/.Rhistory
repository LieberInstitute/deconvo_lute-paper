}
}
head(cd.id)
class(cd.id)
summary(cd.id)
for(c in c(2,3,4,5,6,7)){cd.id[,c] <- as.numeric(as.character(cd.id[,c]))}
summary(cd.id)
save(cd.id, file = "./outputs/01_mae/sample_qc_df.rda")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./outputs/01_mae/sample_qc_df.rda")
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
load("./outputs/01_mae/sample_qc_df.rda")
summary(cd.id)
filter.low <- cd.id$confidence.circle=="Low" & cd.id$confidence.star=="Low"
mean(na.omit(as.numeric(cd.id[filter.low,]$size.sn.neuron)))
mean(na.omit(as.numeric(cd.id[!filter.low,]$size.sn.neuron)))
ggplot(cd.id, aes(x = size.sn.neuron, y = size.sn.glial)) +
geom_point() + facet_wrap(~confidence.star)
head(cd.id)
class(cd.id$confidence.star)
cd.id$confidence.star
gc()
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
gc()
gc()
gc()
gc()
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = TRUE)
load("./outputs/01_mae/mae_allsamples_append.rda")
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k2_mrb_script.RData")
setwd("..")
setwd("..")
new.plot.name <- "fig2b_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
# plot proportions panel -- no scale
new.plot <- ggplot(dfp.tall[dfp.tall$type=="noscale",],
aes(x = neuron.true, y = neuron.pred)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2b_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "figs1d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
new.plot <- ggplot(dfp.tall, aes(x = type, y = neuron.abs.error)) +
geom_jitter(alpha = 0.5, size = 3) +
geom_boxplot(color = "cyan", alpha = 0) +
theme_bw() +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1c_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 2, units = "in", res = 400)
new.plot
dev.off()
setwd("..")
setwd("..")
new.plot.name <- "figs1c_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k3_mrb_script.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "figs1d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
setwd("..")
setwd("..")
new.plot.name <- "fig2d_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 5.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1f_cohort2.jpg"
jpeg(file.path("./figures/01_pseudobulk/", new.plot.name),
width = 4.5, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/02_k3.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2c_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 6, height = 3, units = "in", res = 400)
new.plot
dev.off()
# jitterbox -- jittered points and boxplots of absolute errors
dfp.ae1 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.withscale)
dfp.ae1$type <- "withscale"
dfp.ae2 <- data.frame(celltype = dfp.ct$celltype,
abs.error = dfp.ct$abs.error.noscale)
dfp.ae2$type <- "noscale"
dfp.ae <- rbind(dfp.ae1, dfp.ae2)
new.plot <- ggplot(dfp.ae, aes(x = celltype, y = abs.error)) +
geom_jitter(alpha = 0.5, size = 2.5) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() + facet_wrap(~type) +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1e_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/01_k2.RData")
head(dfp.ct)
dim(dfp.ct)
summary(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
summary(dfp.ct$abs.error.noscale)
sd(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
sd(dfp.ct$abs.error.withscale)
head(dfp.ct)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
identical(dfp.tall$glial.abs.error)
identical(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
plot(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k2_mrb_script.RData")
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
packageVersion("lute")
?memory.limit
?install_github
library(devtools)
?install_github
packageVersion(lute)
packageVersion("lute")
packageVersion("lute")
devtools::install_github("metamaden/lute")
?install_version
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
#!/usr/bin/env R
# Author: Sean Maden
#----------------
#
# load
#
#----------------
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
list.filename <- "list_snrnaseq_sampleid.rda"
list.file.path <- file.path("outputs", "00_preprocess", list.filename)
list.crossvalidate <- get(load(list.file.path))
#--------------------------------------------------
#
# test1,
# snRNAseq samples count, no RNAscope filter
#
#--------------------------------------------------
#
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
length(unique(analysis.samples.assay2$Sample))
assay.name1 <- "cell.sizes"
assay.name2 <- "snrnaseq.k2.all"
assay1 <- mae.analysis[[assay.name1]]
assay2 <- mae.analysis[[assay.name2]]
length(unique(assay1["sample_id",]))
?system2
gc()
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
system2("Rscript ./unit_tests/01_mae_summaries.R")
#!/usr/bin/env R
# Author: Sean Maden
#----------------
#
# load
#
#----------------
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
list.filename <- "list_snrnaseq_sampleid.rda"
list.file.path <- file.path("outputs", "00_preprocess", list.filename)
list.crossvalidate <- get(load(list.file.path))
#--------------------------------------------------
#
# test1,
# snRNAseq samples count, no RNAscope filter
#
#--------------------------------------------------
#
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
snrnaseq.samples.vector <- unique(analysis.samples.assay$Sample)
training.samples.vector <- list.crossvalidate$train
validation.samples.vector <- list.crossvalidate$validation
# tests
# snrnaseq samples equals 17
length(snrnaseq.samples.vector)==17
# training samples from snrnaseq equals 12
length(training.samples.vector)==12
# validation samples from snrnaseq equals 12
length(validation.samples.vector)==5
#------------------------------------------
#
# test2,
# snRNAseq and RNAscope sample count
#
#------------------------------------------
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
###
length(unique(analysis.samples.assay2$Sample))==16
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)
)
)
# tests
# training snrnaseq samples overlapping rnascope filtered snrnaseq samples equals 11
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))==11
# validation snrnaseq samples overlapping rnascope filtered snrnaseq samples equals 11
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))==4
#------------------------------------------
#
# test3,
# RNAscope count from cell.sizes
#
#------------------------------------------
assay.name1 <- "cell.sizes"
assay.name2 <- "snrnaseq.k2.all"
assay1 <- mae.analysis[[assay.name1]]
assay2 <- mae.analysis[[assay.name2]]
###
length(unique(assay1["sample_id",]))==16
length(
intersect(
unique(assay1["sample_id",]),
unique(assay2[["Sample"]])
)
)
names(mae.analysis)
dim(assay1)
head(colData(assay1))
assay.name1 <- "bulk.rnaseq"
assay1 <- mae.analysis[[assay.name1]]
head(colData(assay1))
length(unique(samples.vector.bulk.rnaseq))
assay.name1 <- "bulk.rnaseq"
assay1 <- mae.analysis[[assay.name1]]
v
assay1$SAMPLE_ID
head(assay1)
unique(assay1$BrNum)
unique(assay1$SAMPLE_ID)
unique(assay1$batch.id2)
samples.vector.bulk.rnaseq <- unique(assay1$batch.id2)
samples.vector.bulk.rnaseq
length(unique(samples.vector.bulk.rnaseq))
training.samples.vector
v
samples.vector.bulk.rnaseq <- samples.vector.bulk.rnaseq[
samples.vector.bulk.rnaseq %in% training.samples.vector
]
length(unique(samples.vector.bulk.rnaseq))
validation.samples.vector.bulk.rnaseq <- samples.vector.bulk.rnaseq[
samples.vector.bulk.rnaseq %in% validation.samples.vector
]
length(unique(validation.samples.vector.bulk.rnaseq))
validation.samples.vector
samples.vector.bulk.rnaseq %in% validation.samples.vector
validation.samples.vector
validation.samples.vector.bulk.rnaseq <- samples.vector.bulk.rnaseq[
samples.vector.bulk.rnaseq %in% validation.samples.vector
]
length(unique(validation.samples.vector.bulk.rnaseq))==11
validation.samples.vector.bulk.rnaseq
validation.samples.vector.bulk.rnaseq
validation.samples.vector.bulk.rnaseq
validation.samples.vector
length(unique(validation.samples.vector.bulk.rnaseq))==0
training.samples.vector.bulk.rnaseq <- samples.vector.bulk.rnaseq[
samples.vector.bulk.rnaseq %in% training.samples.vector
]
length(unique(samples.vector.bulk.rnaseq))==11
samples.vector.bulk.rnaseq
assay1$SAMPLE_ID
table(assay1$library_prep)
table(assay1$library_type)
unique(assay1[,filter.condition]$batch.id2)
filter.condition <- assay1$library_prep=="polyA"
unique(assay1[,filter.condition]$batch.id2)
filter.condition
dim(assay1)
unique(assay1[filter.condition,]$batch.id2)
filter.condition <- assay1$library_prep=="polyA"
polya.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition,]$batch.id2)
polya.samples.vector.bulk.rnaseq
filter.condition <- assay1$library_prep=="polyA"
polya.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition,]$batch.id2)
filter.condition <- assay1$library_prep=="RiboZeroGold"
ribozerogold.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition,]$batch.id2)
polya.samples.vector.bulk.rnaseq
ribozerogold.samples.vector.bulk.rnaseq
filter.condition.ribozerogold <- assay1$library_prep=="RiboZeroGold"
ribozerogold.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition,]$batch.id2)
ribozerogold.samples.vector.bulk.rnaseq
filter.condition.polya <- assay1$library_prep=="polyA"
polya.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition.polya,]$batch.id2)
filter.condition.ribozerogold <- assay1$library_prep=="RiboZeroGold"
ribozerogold.samples.vector.bulk.rnaseq <- unique(assay1[filter.condition.ribozerogold,]$batch.id2)
polya.samples.vector.bulk.rnaseq
ribozerogold.samples.vector.bulk.rnaseq
ribozerogold.samples.vector.bulk.rnaseqassay1$library_prep=="RiboZeroGold"
assay1$library_prep=="RiboZeroGold"
unique(
assay1[filter.condition.ribozerogold,]$batch.id2)
filter.condition.ribozerogold <- assay1$library_prep=="RiboZeroGold"
ribozerogold.samples.vector.bulk.rnaseq <- unique(
assay1[filter.condition.ribozerogold,]$batch.id2)
ribozerogold.samples.vector.bulk.rnaseq
unique(
assay1[filter.condition.ribozerogold,]$batch.id2)
assay.name1 <- "bulk.rnaseq"
assay1 <- mae.analysis[[assay.name1]]
filter.condition.ribozerogold <- assay1$library_prep=="RiboZeroGold"
ribozerogold.samples.vector.bulk.rnaseq <- unique(
assay1[filter.condition.ribozerogold,]$batch.id2)
ribozerogold.samples.vector.bulk.rnaseq
