grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
singleValueTestVariables <- function(cellScaleFactorsStart = 0.5,
cellScaleFactorOffTypeValue = 1,
trueProportionValue = 0.8,
markerExpressionStart = 0.5,
cellScaleFactorNew = 1,
bulkExpressionValue = 0.8){
# singleValueTestVariables
#
# Run to get example valuesList object.
#
#
#
#
valuesList <- list(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorOffTypeValue = cellScaleFactorOffTypeValue,
trueProportionValue = trueProportionValue,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorNew,
bulkExpressionValue = bulkExpressionValue
)
valuesList <- parseExampleStartValues(valuesList)
return(valuesList)
}
parseExampleStartValues <- function(valuesList, roundValue = 2){
# parseExampleStartValues
#
# Get predictions for starting values, and append to valuesList
#
#
#
#
# get scale factor sets
cellScaleFactorsStart <- c(valuesList[["cellScaleFactorsStart"]],
valuesList[["cellScaleFactorOffTypeValue"]])
cellScaleFactorsNull <- c(1, 1)
names(cellScaleFactorsStart) <-
names(cellScaleFactorsNull) <- c("type1", "type2")
# get expression matrices
matrixValues <- c(valuesList[["markerExpressionStart"]], 0.1, 0.1,
valuesList[["markerExpressionStart"]])
zrefExample <- matrix(matrixValues, nrow = 2)
colnames(zrefExample) <- c("type1", "type2")
zrefExampleScaled <- lute:::.zstransform(zrefExample, cellScaleFactorsStart)
#bulkExpressionExample <- matrix(
#  rep(valuesList[["bulkExpressionValue"]], 2), ncol = 1)
bulkExpressionExample <- t(t(
c(valuesList[["trueProportionValue"]],
1-valuesList[["trueProportionValue"]])) %*%
t(zrefExampleScaled))
rownames(zrefExample) <- rownames(zrefExampleScaled) <-
rownames(bulkExpressionExample) <- paste0("gene", seq(nrow(zrefExample)))
newParamStart <-
nnlsParam(bulkExpressionExample, zrefExample,
cellScaleFactorsStart) |>
deconvolution()
newParamNull <-
nnlsParam(bulkExpressionExample, zrefExample,
cellScaleFactorsNull) |>
deconvolution()
predictedProportionsStart <- newParamStart@predictionsTable[[1]]
predictedProportionsNull <- newParamNull@predictionsTable[[1]]
biasStart <- valuesList[["trueProportionValue"]]-predictedProportionsStart
biasNull <- valuesList[["trueProportionValue"]]-predictedProportionsNull
errorStart <- abs(biasStart)
errorNull <- abs(biasNull)
# make barplot
dfp <- data.frame(
cellScaleFactor = valuesList[["cellScaleFactorsStart"]],
markerExpression = valuesList[["markerExpressionStart"]],
trueProportion = valuesList[["trueProportionValue"]],
predictedProportion = predictedProportionsStart,
biasValue = biasStart,
errorValue = errorStart
)
dfp <- melt(dfp)
dfp$value <- round(dfp$value, roundValue)
plot1 <- ggplot(dfp, aes(x = variable, y = value)) +
geom_bar(stat="identity", color = "black", fill = 'gray') +
theme_bw() + geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle=45,hjust=1),
axis.title.x = element_blank()) +
geom_text(aes(label = value), vjust = -1.5) +
ylab("Value") + ylim(min(dfp$value-1), max(dfp$value+1)) +
ggtitle("Example starting values")
# return
valuesList[["deconvoResultsStart"]] <- newParamStart
valuesList[["bulkExpressionExample"]] <- bulkExpressionExample
valuesList[["markerExpressionStartScaled"]] <- zrefExample[1,1]
valuesList[["zrefExample"]] <- zrefExample
valuesList[["zrefExampleScaled"]] <- zrefExampleScaled
valuesList[["predictedProportionsStart"]] <- predictedProportionsStart
valuesList[["predictedProportionsNull"]] <- predictedProportionsNull
valuesList[["biasStart"]] <- biasStart
valuesList[["biasNull"]] <- biasNull
valuesList[["errorStart"]] <- errorStart
valuesList[["errorNull"]] <- errorNull
valuesList[["ggBarplotStart"]] <- plot1
return(valuesList)
}
singleValueExample <- function(valuesList, conditionLabel = "",
plotTitleString = ""){
# singleValueExample
#
# Get single point values example.
#
# @param valuesList Output from singleValueTestVariables().
#
#
#
#
changeNew <- valuesList[["cellScaleFactorNew"]]-
valuesList[["cellScaleFactorStart"]]
labelNew <-
paste0("cellScaleFactor = ",valuesList[["cellScaleFactorNew"]],")")
# get simulation results
cellScaleFactorsNew <- c(valuesList[["cellScaleFactorNew"]],
valuesList[["cellScaleFactorOffTypeValue"]])
names(cellScaleFactorsNew) <- c("type1", "type2")
newParamNew <-
nnlsParam(
valuesList[["bulkExpressionExample"]],
valuesList[["zrefExample"]],
cellScaleFactorsNew) |>
deconvolution()
predictedProportionsNew <- newParamNew@predictionsTable[[1]]
biasNew <- valuesList[["trueProportionValue"]]-predictedProportionsNew
errorNew <- abs(biasNew)
zrefNew <-
lute:::.zstransform(valuesList[["zrefExample"]],
cellScaleFactorsNew)
# get changes
cellScaleFactorChange <- valuesList[["cellScaleFactorNew"]]-
valuesList[["cellScaleFactorsStart"]]
proportionChange <- predictedProportionsNew-
valuesList[["predictedProportionsStart"]]
biasChange <- biasNew-valuesList[["biasStart"]]
errorChange <- errorNew-valuesList[["errorStart"]]
markerExpressionChange <- zrefNew[1,1]-valuesList[["zrefExample"]][1,1]
# get plot data
dfpNew <- data.frame(
variable =
c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"),
value =
c(cellScaleFactorChange, markerExpressionChange,
proportionChange, biasChange, errorChange)
)
dfpNew$conditionLabel <- conditionLabel
dfpNew$Change <- ifelse(dfpNew$value > 0, "Increase", "Decrease")
dfpNew$variable <- factor(dfpNew$variable,
levels = c("cellScaleFactor", "markerExpression",
"predictedProportion", "bias", "error"))
plot2 <- ggplot(dfpNew, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab("Change (New - Old)") + facet_wrap(~conditionLabel, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(plotTitleString) +
scale_fill_manual(breaks = c("Increase", "Decrease"),
values=c("dodgerblue", "gold"))
returnList <- list(
valuesList = valuesList,
deconvoResult = newParamNew,
zrefNew = zrefNew,
plotData = dfpNew,
ggBarplotChange = plot2
)
return(returnList)
}
multiPanelPlots <- function(cellScaleFactorOffTypeValue = 10,
markerExpressionStart = 0.5,
cellScaleFactorsStart = 2,
trueProportionValue = 0.6,
cellScaleFactorVector =
c(0.5, 1.5, 2.5, 3.5, 1),
labelVector =
c("Decrease", "Slight Decrease",
"Slight Increase", "Increase", "NULL")){
# multiPanelPlots
#
# Get multiple plot panels from vector of changed cell types.
#
#
#
#
listResults <- lapply(seq(length(cellScaleFactorVector)), function(index){
cellScaleFactorIndex <- cellScaleFactorVector[index]
labelIndex <- labelVector[index]
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
markerExpressionStart = markerExpressionStart,
cellScaleFactorNew = cellScaleFactorIndex,
trueProportionValue = trueProportionValue)
exampleResult <- singleValueExample(
valuesList, paste0(labelIndex,"\ncellScaleFactor = ",cellScaleFactorIndex))
return(
list(result = exampleResult,
plot = exampleResult$ggBarplotChange)
)
})
names(listResults) <- labelVector
# get plots formatted for grid arrange
listPlots <- lapply(listResults, function(item){item[["plot"]]})
names(listPlots) <- labelVector
dfPlotAll <- do.call(rbind, lapply(listResults, function(item){
item$result$plotData
})) |> as.data.frame()
dfPlotAll$conditionLabel <-
factor(dfPlotAll$conditionLabel, levels = unique(dfPlotAll$conditionLabel))
ggMultiPanel <- ggplot(dfPlotAll, aes(x = variable, y = value, fill = Change)) +
geom_bar(stat="identity", color = "black") + theme_bw() +
ylab("Change (New - Old)") + facet_wrap(~conditionLabel, nrow = 1) +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Affect of scale change") +
scale_fill_manual(breaks = c("Increase", "Decrease"),
values=c("dodgerblue", "gold"))
# return
returnList <- list(resultsList = listResults,
resultsPlotList = listPlots,
dfPlotAll = dfPlotAll,
ggMulti = ggMultiPanel)
return(returnList)
}
# get multiple panels
# view facet of multi panel plots
listMultiPlot <- multiPanelPlots()
listMultiPlot$ggMulti
barplotStart <-
listMultiPlot$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
listMultiPlot <- multiPanelPlots(markerExpressionStart = 1)
listMultiPlot$ggMulti
barplotStart <-
listMultiPlot$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 0.5
listMultiPlot <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart <-
listMultiPlot$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot <- multiPanelPlots(markerExpressionStart = 1)
barplotStart <-
listMultiPlot$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot <- multiPanelPlots(markerExpressionStart = 2)
barplotStart <-
listMultiPlot$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# save
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker05.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart <-
listMultiPlot05$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot1 <- multiPanelPlots(markerExpressionStart = 1)
barplotStart <-
listMultiPlot1$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot2 <- multiPanelPlots(markerExpressionStart = 2)
barplotStart <-
listMultiPlot2$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
#--------------------------
# save multipanel plots
#--------------------------
# save
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker05.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker1.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker2.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
gc()
gc()
gc()
gc()
#!/usr/bin/env R
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change in expression and prediction with scale factor change.
#
#
#
#
#
source("./00_param.R")
#!/usr/bin/env R
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change in expression and prediction with scale factor change.
#
#
#
#
#
source("./scripts/09_example_plots/00_param.R")
#--------------------------------------------------
# multiple panels -- marker expression start is 0.5
#--------------------------------------------------
# get multiple panels
# view facet of multi panel plots
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart <-
listMultiPlot05$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot1 <- multiPanelPlots(markerExpressionStart = 1)
barplotStart <-
listMultiPlot1$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot2 <- multiPanelPlots(markerExpressionStart = 2)
barplotStart <-
listMultiPlot2$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
#--------------------------
# save multipanel plots
#--------------------------
# save
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker05.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker1.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker2.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
#--------------
# single panels
#--------------
cellScaleFactorsStart <- 1
cellScaleFactorNew <- 3
trueProportionValue <- 0.2
valuesList <- singleValueTestVariables(
cellScaleFactorsStart = cellScaleFactorsStart,
cellScaleFactorNew = cellScaleFactorNew,
trueProportionValue = trueProportionValue)
exampleResult <- singleValueExample(
valuesList, paste0("Increase\ncellScaleFactor = ",cellScaleFactorNew))
grid.arrange(exampleResult$valuesList$ggBarplotStart,
exampleResult$plot, nrow = 1)
#!/usr/bin/env R
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change in expression and prediction with scale factor change.
#
#
#
#
#
source("./scripts/09_example_plots/00_param.R")
#--------------------------------------------------
# multiple panels -- marker expression start is 0.5
#--------------------------------------------------
# get multiple panels
# view facet of multi panel plots
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart <-
listMultiPlot05$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot1 <- multiPanelPlots(markerExpressionStart = 1)
barplotStart <-
listMultiPlot1$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot2 <- multiPanelPlots(markerExpressionStart = 2)
barplotStart <-
listMultiPlot2$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
#--------------------------
# save multipanel plots
#--------------------------
# save
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker05.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker1.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker2.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
# save image
save.image(
"./env/09_example_plots/01_example_plots_value_changes_script.RData")
#!/usr/bin/env R
libv <- c("ggplot2", "reshape2")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Plot to show direction change in expression and prediction with scale factor change.
#
#
#
#
#
source("./scripts/09_example_plots/00_param.R")
#--------------------------------------------------
# multiple panels -- marker expression start is 0.5
#--------------------------------------------------
# get multiple panels
# view facet of multi panel plots
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
barplotStart05 <-
listMultiPlot05$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 1
listMultiPlot1 <- multiPanelPlots(markerExpressionStart = 1)
barplotStart1 <-
listMultiPlot1$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
# marker expression start is 2
listMultiPlot2 <- multiPanelPlots(markerExpressionStart = 2)
barplotStart2 <-
listMultiPlot2$resultsList$Decrease$result$valuesList$ggBarplotStart
grid.arrange(barplotStart, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
#--------------------------
# save multipanel plots
#--------------------------
# save
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker05.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart05, listMultiPlot05$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker1.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart1, listMultiPlot1$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
jpeg(paste0("./figures/09_example_plots/",
"multipanel_example_barplots_marker2.jpg"), width = 11,
height = 4, units = "in", res = 400)
grid.arrange(barplotStart2, listMultiPlot2$ggMulti, nrow = 1,
layout_matrix = matrix(c(1,2,2,2),nrow=1))
dev.off()
# save image
save.image(
"./env/09_example_plots/01_example_plots_value_changes_script.RData")
