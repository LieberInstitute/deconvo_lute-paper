new.plot
dev.off()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/01_k2.RData")
head(dfp.ct)
dim(dfp.ct)
summary(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
summary(dfp.ct$abs.error.noscale)
sd(dfp.ct$abs.error.noscale)
summary(dfp.ct$abs.error.withscale)
sd(dfp.ct$abs.error.withscale)
head(dfp.ct)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="glial",]$abs.error.withscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
sd(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="scale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
identical(dfp.tall$glial.abs.error)
identical(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
plot(dfp.tall$glial.abs.error, dfp.tall$neuron.abs.error)
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/01_pseudobulk/01_k2_mrb_script.RData")
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.noscale)
head(dfp.tall)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.ct[dfp.ct$celltype=="neuron",]$abs.error.withscale)
summary(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="noscale",]$neuron.abs.error)
summary(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
sd(dfp.tall[dfp.tall$type=="withscale",]$neuron.abs.error)
packageVersion(nnls)
?install.packages
?install_version
library(remotes)
?install_version
install_version("nnls", version = 1.4)
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
knitr::opts_chunk$set(echo = TRUE)
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
assay.name <- "sce.img"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.all[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
assay.name <- "sce.img"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.all[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
length(unique(analysis.samples.assay$Sample))
assay.name <- "sce.img"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
length(unique(analysis.samples.assay$Sample))
names(mae.all)
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
length(unique(analysis.samples.assay$Sample))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name]]
analysis.samples.assay1 <- mae.analysis[[assay.name]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name]]
analysis.samples.assay2 <- mae.analysis[[assay.name]]
# unique samples
length(unique(all.samples.assay1$Sample),
unique(all.samples.assay2$Sample))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
length(unique(all.samples.assay1$Sample),
unique(all.samples.assay2$Sample))
all.samples.assay1$Sample
all.samples.assay2$Sample
all.samples.assay1$Sample
length(unique(all.samples.assay1$Sample),
unique(all.samples.assay2$Sample))
unique(all.samples.assay2$Sample)
unique(all.samples.assay1$Sample)
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
length(
intersect(
unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(all.samples.assay2$Sample), unique(analysis.samples.assay2$Sample)))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(all.samples.assay2$Sample), unique(analysis.samples.assay2$Sample)))
names(mae.all)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
path.list.sample.id <- "list_snrnaseq_sampleid.rda"
list.crossvalidate <- get(load(path.list.sample.id))
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
list.filename <- "list_snrnaseq_sampleid.rda"
list.file.path <- file.path("outputs", "00_preprocess", list.filename)
list.crossvalidate <- get(load(list.file.path))
list.crossvalidate$train
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))
length(list.crossvalidate$train)
length(list.crossvalidate$validation)
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
head(analysis.samples.assay1$Sample)
head(analysis.samples.assay2$Sample)
all.samples.assay2$Sample
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))
?nnls
library(nnls)
?nnls
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
list.filename <- "list_snrnaseq_sampleid.rda"
list.file.path <- file.path("outputs", "00_preprocess", list.filename)
list.crossvalidate <- get(load(list.file.path))
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
unique(analysis.samples.assay$SAMPLE_ID)
class(analysis.samples.assay)
analysis.samples.assay$Sample
unique(analysis.samples.assay$Sample)
list.crossvalidate$train
names(list.crossvalidate)
validation.samples.vector <- list.crossvalidate$validation
validation.samples.vector
training.samples.vector
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
snrnaseq.samples.vector <- unique(analysis.samples.assay$Sample)
training.samples.vector <- list.crossvalidate$train
validation.samples.vector <- list.crossvalidate$validation
message("snrnaseq samples count:")
length(snrnaseq.samples.vector)
message("training samples count:")
length(training.samples.vector)
message("validation samples count:")
length(validation.samples.vector)
length(snrnaseq.samples.vector)==17
length(training.samples.vector)==12
length(validation.samples.vector)==5
length(list.crossvalidate$train)
length(list.crossvalidate$validation)
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
length(list.crossvalidate$train)
length(list.crossvalidate$validation)
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
length(list.crossvalidate$train)
length(list.crossvalidate$validation)
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))
gc()
gc()
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
# all samples
mae.filename <- "mae_allsamples.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.all <- get(load(mae.path))
# removed samples
mae.filename <- "mae_analysis_append.rda"
mae.path <- file.path("outputs", "01_mae", mae.filename)
mae.analysis <- get(load(mae.path))
# training and validation sample ids
list.filename <- "list_snrnaseq_sampleid.rda"
list.file.path <- file.path("outputs", "00_preprocess", list.filename)
list.crossvalidate <- get(load(list.file.path))
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
snrnaseq.samples.vector <- unique(analysis.samples.assay$Sample)
training.samples.vector <- list.crossvalidate$train
validation.samples.vector <- list.crossvalidate$validation
message("snrnaseq samples count:")
length(snrnaseq.samples.vector)
message("training samples count:")
length(training.samples.vector)
message("validation samples count:")
length(validation.samples.vector)
length(snrnaseq.samples.vector)==17
length(training.samples.vector)==12
length(validation.samples.vector)==5
assay.name <- "sce.img"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
length(unique(analysis.samples.assay$Sample))
assay.name <- "snrnaseq.k2.all"
all.samples.assay <- mae.all[[assay.name]]
analysis.samples.assay <- mae.analysis[[assay.name]]
# unique samples
length(unique(all.samples.assay$Sample))
length(unique(analysis.samples.assay$Sample))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
analysis.samples.assay1
class(analysis.samples.assay1)
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
message("samples overlapping ", all.samples.assay1,
" and ", analysis.samples.assay2," :")
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
message(
"samples overlapping ",
unique(analysis.samples.assay1$Sample), " and ",
unique(analysis.samples.assay2$Sample)," :")
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
# unique samples
#length(
#  intersect(
#    unique(all.samples.assay1$Sample), unique(all.samples.assay2$Sample)))
#length(
#  intersect(
#    unique(analysis.samples.assay1$Sample), unique(analysis.samples.assay2$Sample)))
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample)))
message(
"samples overlapping ",
assay.name1, " and ",
assay.name2," : ",
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample))))
# assay name 1
assay.name1 <- "snrnaseq.k2.all"
all.samples.assay1 <- mae.all[[assay.name1]]
analysis.samples.assay1 <- mae.analysis[[assay.name1]]
# assay name 2
assay.name2 <- "sce.img"
all.samples.assay2 <- mae.all[[assay.name2]]
analysis.samples.assay2 <- mae.analysis[[assay.name2]]
message(
"samples overlapping ",
assay.name1, " and ",
assay.name2, " : ",
length(
intersect(
unique(analysis.samples.assay1$Sample),
unique(analysis.samples.assay2$Sample))))
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))
length(intersect(list.crossvalidate$train, all.samples.assay2$Sample))==11
length(intersect(list.crossvalidate$validation, all.samples.assay2$Sample))==4
