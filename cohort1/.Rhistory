gc()
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
num.dfs.steps <- 5
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
names(mae)
dim(mae[["bulk.pb.k2"]])
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
dim(mae[["bulk.pb.k2"]])
list.experiment.results <- experiment_all_samples(
colData(mae)$sample.id, mae, bulk.mae.name = "bulk.pb.k2", dfs.steps = num.dfs.steps)
class(mae[["bulk.pb.k2"]])
class(mae[["bulk.rnaseq"]])
class(exprs(mae[["bulk.pb.k2"]]))
class(assays(mae[["bulk.pb.k2"]]))
class(assays(mae[["bulk.pb.k2"]])[[1]])
class(assays(mae[["bulk.rnaseq"]])[[1]])
traceback()
dim(cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]]))
cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]])
mae[["bulk.pb.k2"]] <- cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]])
list.experiment.results <- experiment_all_samples(
colData(mae)$sample.id, mae, bulk.mae.name = "bulk.pb.k2", dfs.steps = num.dfs.steps)
mae[["bulk.pb.k2"]]$sample.id
mae[["bulk.pb.k2"]]$batch.id2
bisque.sce <- mae[[1]]
bulk.mae.name = "bulk.rnaseq"
bulk.sample.id.variable = "batch.id2"
dfs.steps = 20
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
bulk.eest
bulk.eset
bulk.mae.name
bulk.mae.name = "bulk.pb.k2"
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
bulk.eset
y.set <- mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
num.dfs.steps <- 5
mae <- get(load("outputs/01_mae/mae_analysis_append.rda"))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
y.set <- mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
bulk.eset
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
message("prep z")
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
head(df.s.opt.res)
s.vector.scale <- colMedians(df.s.opt.res)
names(s.vector.scale) <- colnames(df.s.opt.res)
message("sopt result:\n")
print(s.vector.scale)
s.vector.noscale <- c("glial" = 1, "neuron" = 1)
# bisque rescale
message("bisque rescale")
sn.eset.rescale <- sn_eset_rescale(sn.eset,
s.vector.scale["glial"],
s.vector.scale["neuron"])
# experiment -- nnls
message("experiment -- nnls")
nnls.scale <- lute(z = z, y = y,
s = s.vector.scale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
nnls.noscale <- lute(z = z, y = y,
s = s.vector.noscale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
colnames(nnls.scale) <- paste0(colnames(nnls.scale), ".nnls.scale")
colnames(nnls.noscale) <- paste0(colnames(nnls.noscale), ".nnls.noscale")
# experiment -- music
message("experiment -- music")
music.prop.scale <- deconvolution(musicParam(y, z, s = s.vector.scale))@predictions.table
music.prop.noscale <- deconvolution(musicParam(y, z, s = s.vector.noscale))@predictions.table
colnames(music.prop.scale) <- paste0(colnames(music.prop.scale), ".music.scale")
colnames(music.prop.noscale) <- paste0(colnames(music.prop.noscale), ".music.noscale")
message("experiment -- bisque")
# bisque no scale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.noscale
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.rescale
sn.eset.rescale
bisque.prop.noscale <- as.data.frame(t(bisque.prop.noscale))
bisque.prop.rescale <- as.data.frame(t(bisque.prop.rescale))
colnames(bisque.prop.rescale) <- paste0(colnames(bisque.prop.rescale), ".bisque.scale")
colnames(bisque.prop.noscale) <- paste0(colnames(bisque.prop.noscale), ".bisque.noscale")
df.res <- cbind(nnls.noscale, nnls.scale,
music.prop.noscale, music.prop.scale,
bisque.prop.rescale, bisque.prop.noscale)
df.res <- as.data.frame(df.res)
df.res$neuron.true <- prop.table(table(sce[["k2"]]))[["neuron"]]
df.res$sample.id <- sample.id
df.res
ggpairs(df.res[,grepl("neuron", colnames(df.res))])
s.vector.scale
sample.id.vector
sample.id.vector = colData(mae)$sample.id
sample.id.vector
bisque.sce <- mae[["snrnaseq.k2.all"]]
lr <- list()
for(sample.id in sample.id.vector){
message("working on sample: ", sample.id)
mae.iter <- mae[,colData(mae)$sample.id==sample.id,]
lr[[sample.id]] <- prop_adj_results(mae.iter, bisque.sce, dfs.steps,
bulk.mae.name = bulk.mae.name,
bulk.sample.id.variable = bulk.sample.id.variable)
}
dfs.steps=5
bisque.sce <- mae[["snrnaseq.k2.all"]]
lr <- list()
for(sample.id in sample.id.vector){
message("working on sample: ", sample.id)
mae.iter <- mae[,colData(mae)$sample.id==sample.id,]
lr[[sample.id]] <- prop_adj_results(mae.iter, bisque.sce, dfs.steps,
bulk.mae.name = bulk.mae.name,
bulk.sample.id.variable = bulk.sample.id.variable)
}
sample.id
message("working on sample: ", sample.id)
mae.iter <- mae[,colData(mae)$sample.id==sample.id,]
dim(mae.iter[[1]])
lr[[sample.id]] <- prop_adj_results(mae.iter, bisque.sce, dfs.steps,
bulk.mae.name = bulk.mae.name,
bulk.sample.id.variable = bulk.sample.id.variable)
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
bisque.bulk = mae[["bulk.pb.k2"]]
dim(bisque.bulk)
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
message("prep z")
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
# get s vectors
message("get s vectors")
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
s.vector.scale <- colMedians(df.s.opt.res)
names(s.vector.scale) <- colnames(df.s.opt.res)
message("sopt result:\n")
print(s.vector.scale)
s.vector.noscale <- c("glial" = 1, "neuron" = 1)
# bisque rescale
message("bisque rescale")
sn.eset.rescale <- sn_eset_rescale(sn.eset,
s.vector.scale["glial"],
s.vector.scale["neuron"])
# experiment -- nnls
message("experiment -- nnls")
nnls.scale <- lute(z = z, y = y,
s = s.vector.scale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
nnls.noscale <- lute(z = z, y = y,
s = s.vector.noscale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
colnames(nnls.scale) <- paste0(colnames(nnls.scale), ".nnls.scale")
colnames(nnls.noscale) <- paste0(colnames(nnls.noscale), ".nnls.noscale")
# experiment -- music
message("experiment -- music")
music.prop.scale <- deconvolution(musicParam(y, z, s = s.vector.scale))@predictions.table
music.prop.noscale <- deconvolution(musicParam(y, z, s = s.vector.noscale))@predictions.table
colnames(music.prop.scale) <- paste0(colnames(music.prop.scale), ".music.scale")
colnames(music.prop.noscale) <- paste0(colnames(music.prop.noscale), ".music.noscale")
# experiment -- bisque
message("experiment -- bisque")
# bisque no scale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.noscale <- as.data.frame(t(bisque.prop.noscale))
bisque.prop.rescale <- as.data.frame(t(bisque.prop.rescale))
colnames(bisque.prop.rescale) <- paste0(colnames(bisque.prop.rescale), ".bisque.scale")
colnames(bisque.prop.noscale) <- paste0(colnames(bisque.prop.noscale), ".bisque.noscale")
bisque.prop.noscale
sample.id <- colData(mae)$sample.id
bisque.prop.noscale <- as.data.frame(t(bisque.prop.noscale))[sample.id,]
bisque.prop.rescale <- as.data.frame(t(bisque.prop.rescale))[sample.id,]
colnames(bisque.prop.rescale) <- paste0(colnames(bisque.prop.rescale), ".bisque.scale")
colnames(bisque.prop.noscale) <- paste0(colnames(bisque.prop.noscale), ".bisque.noscale")
bisque.prop.noscale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.noscale
class(bisque.prop.noscale)
bisque.prop.noscale[sample.id,]
sample.id
colData(mae[[1]])$sample.id
as.data.frame(t(bisque.prop.noscale[sample.id[1],]))
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
num.dfs.steps <- 5
mae <- get(load("outputs/01_mae/mae_analysis_append.rda"))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#mae[["bulk.pb.k2"]] <- cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]])
list.experiment.results <- experiment_all_samples(
colData(mae)$sample.id, mae, bulk.mae.name = "bulk.pb.k2", dfs.steps = num.dfs.steps)
gc()
gc()
gc()
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
num.dfs.steps <- 5
mae <- get(load("outputs/01_mae/mae_analysis_append.rda"))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#mae[["bulk.pb.k2"]] <- cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]])
list.experiment.results <- experiment_all_samples(
colData(mae)$sample.id,
mae,
bulk.mae.name = "bulk.pb.k2",
dfs.steps = num.dfs.steps)
bisque.prop.noscale
bisque.sce = mae[[1]]
bisque.bulk = mae[["bulk.pb.k2"]]
bisque.bulk
mae = mae[,colData(mae)$sample.id=="Br3942_mid",]
mae
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
sce
dim(sce)
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
bulk.mae.name = "bulk.rnaseq"
bulk.sample.id.variable = "batch.id2"
bulk.mae.name = "bulk.pb.k2"
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
message("prep z")
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
dfs.steps = 5
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- bisque.bulk # mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
message("prep z")
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
# get s vectors
message("get s vectors")
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
dim(y)
colnames(y)
y[,sample.id]
y.sopt <- y[,y[[batch.id.name]]==sample.id]
y.sopt <- y[,y[[bulk.sample.id.variable]]==sample.id]
y[[bulk.sample.id.variable]]==sample.id
sample.id
y[[bulk.sample.id.variable]]
y
dim(y)
head(y)
y.sopt <- y[,grepl(sample.id, colnames(y))]
dim(y.sopt)
y.sopt <- y[,grepl(sample.id, colnames(y)),drop = F]
y.sopt <- y[,grepl(sample.id, colnames(y)),drop = F]
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y.sopt)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y.sopt))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
s.vector.scale <- colMedians(df.s.opt.res)
names(s.vector.scale) <- colnames(df.s.opt.res)
message("sopt result:\n")
print(s.vector.scale)
s.vector.noscale <- c("glial" = 1, "neuron" = 1)
# bisque rescale
message("bisque rescale")
sn.eset.rescale <- sn_eset_rescale(sn.eset,
s.vector.scale["glial"],
s.vector.scale["neuron"])
# experiment -- nnls
message("experiment -- nnls")
nnls.scale <- lute(z = z, y = y,
s = s.vector.scale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
nnls.noscale <- lute(z = z, y = y,
s = s.vector.noscale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
colnames(nnls.scale) <- paste0(colnames(nnls.scale), ".nnls.scale")
colnames(nnls.noscale) <- paste0(colnames(nnls.noscale), ".nnls.noscale")
# experiment -- music
message("experiment -- music")
music.prop.scale <- deconvolution(musicParam(y, z, s = s.vector.scale))@predictions.table
music.prop.noscale <- deconvolution(musicParam(y, z, s = s.vector.noscale))@predictions.table
colnames(music.prop.scale) <- paste0(colnames(music.prop.scale), ".music.scale")
colnames(music.prop.noscale) <- paste0(colnames(music.prop.noscale), ".music.noscale")
# experiment -- bisque
message("experiment -- bisque")
# bisque no scale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.noscale
sample.id <- colData(mae)$sample.id
sample.id
as.data.frame(t(bisque.prop.noscale[,sample.id]))
as.data.frame(t(bisque.prop.rescale[,sample.id]))
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
source("./scripts/08_adjustment/00_musicParam-class.R")
num.dfs.steps <- 5
mae <- get(load("outputs/01_mae/mae_analysis_append.rda"))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#mae[["bulk.pb.k2"]] <- cbind(mae[["bulk.pb.k2"]],mae[["bulk.pb.k2"]])
list.experiment.results <- experiment_all_samples(
colData(mae)$sample.id,
mae,
bulk.mae.name = "bulk.pb.k2",
dfs.steps = num.dfs.steps)
df.res <- as.data.frame(
do.call(rbind, lapply(list.experiment.results, function(item){item$df.res})))
df.res$sample.id <- gsub("_.*", "", rownames(df.res))
list.dfp <- get_dfp_list(df.res)
# save image
rm(mae)
save.image(file = "./env/08_adjustment/02_run_2sample_script.RData")
save.image(file = "./env/09_fast/02_run_2sample_script.RData")
save.image(file = "./env/09_fast/02_run_2sample_script.RData")
