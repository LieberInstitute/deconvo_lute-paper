# save
#-----
# save
save(df.k2, file = "./outputs/05_bulk/validation_results.rda")
# save environment
save.image(file = "./env/05_bulk/02_crossvalidate_script.RData")
gc()
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
df.k2.filt <- df.k2[df.k2$crossvalidation=="validation",]
df.k2.filt[df.k2.filt$s.set.label=="s.set1",]$s.set.label <- "unscaled"
table(df.k2$s.set.label)
# format plot data
df.k2.filt <- df.k2[df.k2$crossvalidation=="validation",]
df.k2.filt[df.k2.filt$s.set.label=="s.null",]$s.set.label <- "unscaled"
df.k2.filt[df.k2.filt$s.set.label=="s.manual",]$s.set.label <- "scaled"
new.plot.scatter <- ggplot(df.k2.filt, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
new.plot.scatter
dim(df.k2)
head(df.k2)
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
new.plot.scatter
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Cross-validate normalization tests. Use best normalization procedure on bulk validation samples subset
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#--------------------
# get validation data
#--------------------
# Prepares MultiAssayExperiment object
sample.id.validate <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["validation"]]
validation.sample.id <- unique(gsub("_.*", "", sample.id.validate))
# load mae, subset validation
mae.path <- file.path("outputs", "01_mae", "mae_analysis_append.rda")
mae <- get(load(mae.path))
# filter validation ids
filter.mae <- colData(mae)$sample.id %in% sample.id.validate
mae <- mae[,filter.mae,]
unique(colData(mae)[,1][complete.cases(mae)])
# get bulk expression
rse.counts <- mae[["bulk.rnaseq"]]
names(assays(rse.counts)) <- "counts"
# snrnaseq reference -- using same reference across experiments
sce.iter <- mae[["snrnaseq.k2.all"]]
sce.iter <- sce.iter[,sce.iter$Sample %in% sample.id.validate]
sce.iter <- logNormCounts(sce.iter)
# define the sample id vector
sample.id.vector <- unique(sce.iter$Sample)
# define the true proportions
list.df.true <- metadata(sce.iter)[["list.df.true.k2"]]
#--------------
# prep s-vector
#--------------
s.manual <- c("glial" = 3, "neuron" = 10)
s.null <- c("glial" = 1, "neuron" = 1)
list.s.null <- lapply(sample.id.vector, function(id){s.null})
list.s.manual <- lapply(sample.id.vector, function(id){s.manual})
names(list.s.null) <- names(list.s.null) <- sample.id.vector
list.s.pred <- list(s.null = list.s.null, s.manual = list.s.manual)
#-------------
# run a/b test
#-------------
# experiment variables
deconvolution.algorithm <- "nnls"
cell.type.variable <- "k2"
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# run experiments
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
# prepare results df
shared.colnames <- intersect(colnames(df.s.k2.shared.counts.logcounts),
colnames(df.s.k2.within.counts.lognorm))
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,shared.colnames],
df.s.k2.within.counts.lognorm
)
cd <- colData(mae[["bulk.rnaseq"]])
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
df.k2 <- as.data.frame(do.call(rbind, list.logcounts))
# append true values
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["neuron"]])
df.k2[df.k2$sample.id==sample.id,]$true.glial <-
as.numeric(list.df.true[[sample.id]][["glial"]])
}
df.k2$true.neuron <- as.numeric(df.k2$true.neuron)
df.k2$abs.error.neuron <- abs(as.numeric(df.k2$neuron)-as.numeric(df.k2$true.neuron))
df.k2$abs.error.glial <- abs(as.numeric(df.k2$glial)-as.numeric(df.k2$true.glial))
# clear cache
rm(df.s.k2.shared.counts.logcounts)
rm(df.s.k2.within.counts.lognorm)
rm(mae)
rm(mae.final)
rm(rse.counts)
rm(rse.rpkm)
rm(sce.iter)
# append crossvalidation info
df.k2.validate <- df.k2
df.k2.train <- get(load("./outputs/05_bulk/k2_results.rda"))
filter.tain <- df.k2.train$bulk.scale.type=="counts"
filter.train <- df.k2.train$assay.name.lutearg=="logcounts"
df.k2.train <- df.k2.train[filter.train,]
dim(df.k2.train)
df.k2.train$crossvalidation <- "train"
df.k2.validate$crossvalidation <- "validation"
identical(colnames(df.k2.validate), colnames(df.k2.train))
df.k2 <- as.data.frame(rbind(df.k2.validate, df.k2.train))
dim(df.k2)
rm(df.k2.train)
rm(df.k2.validate)
#-----
# save
#-----
# save
save(df.k2, file = "./outputs/05_bulk/validation_results.rda")
# save environment
save.image(file = "./env/05_bulk/02_crossvalidate_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
new.plot.scatter
head(dfp)
table(dfp$s.set.values)
#!/usr/bin/env R
# Author: Sean Maden
#
# Cross-validate normalization tests. Use best normalization procedure on bulk validation samples subset
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#--------------------
# get validation data
#--------------------
# Prepares MultiAssayExperiment object
sample.id.validate <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["validation"]]
validation.sample.id <- unique(gsub("_.*", "", sample.id.validate))
# load mae, subset validation
mae.path <- file.path("outputs", "01_mae", "mae_analysis_append.rda")
mae <- get(load(mae.path))
# filter validation ids
filter.mae <- colData(mae)$sample.id %in% sample.id.validate
mae <- mae[,filter.mae,]
unique(colData(mae)[,1][complete.cases(mae)])
# get bulk expression
rse.counts <- mae[["bulk.rnaseq"]]
names(assays(rse.counts)) <- "counts"
# snrnaseq reference -- using same reference across experiments
sce.iter <- mae[["snrnaseq.k2.all"]]
sce.iter <- sce.iter[,sce.iter$Sample %in% sample.id.validate]
sce.iter <- logNormCounts(sce.iter)
# define the sample id vector
sample.id.vector <- unique(sce.iter$Sample)
# define the true proportions
list.df.true <- metadata(sce.iter)[["list.df.true.k2"]]
#--------------
# prep s-vector
#--------------
s.manual <- c("glial" = 3, "neuron" = 10)
s.null <- c("glial" = 1, "neuron" = 1)
list.s.null <- lapply(sample.id.vector, function(id){s.null})
list.s.manual <- lapply(sample.id.vector, function(id){s.manual})
names(list.s.null) <- names(list.s.manual) <- sample.id.vector
list.s.pred <- list(s.null = list.s.null, s.manual = list.s.manual)
#-------------
# run a/b test
#-------------
# experiment variables
deconvolution.algorithm <- "nnls"
cell.type.variable <- "k2"
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# run experiments
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
# prepare results df
shared.colnames <- intersect(colnames(df.s.k2.shared.counts.logcounts),
colnames(df.s.k2.within.counts.lognorm))
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,shared.colnames],
df.s.k2.within.counts.lognorm
)
cd <- colData(mae[["bulk.rnaseq"]])
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
df.k2 <- as.data.frame(do.call(rbind, list.logcounts))
# append true values
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["neuron"]])
df.k2[df.k2$sample.id==sample.id,]$true.glial <-
as.numeric(list.df.true[[sample.id]][["glial"]])
}
df.k2$true.neuron <- as.numeric(df.k2$true.neuron)
df.k2$abs.error.neuron <- abs(as.numeric(df.k2$neuron)-as.numeric(df.k2$true.neuron))
df.k2$abs.error.glial <- abs(as.numeric(df.k2$glial)-as.numeric(df.k2$true.glial))
# clear cache
rm(df.s.k2.shared.counts.logcounts)
rm(df.s.k2.within.counts.lognorm)
rm(mae)
rm(mae.final)
rm(rse.counts)
rm(rse.rpkm)
rm(sce.iter)
# append crossvalidation info
df.k2.validate <- df.k2
df.k2.train <- get(load("./outputs/05_bulk/k2_results.rda"))
filter.tain <- df.k2.train$bulk.scale.type=="counts"
filter.train <- df.k2.train$assay.name.lutearg=="logcounts"
df.k2.train <- df.k2.train[filter.train,]
dim(df.k2.train)
df.k2.train$crossvalidation <- "train"
df.k2.validate$crossvalidation <- "validation"
identical(colnames(df.k2.validate), colnames(df.k2.train))
df.k2 <- as.data.frame(rbind(df.k2.validate, df.k2.train))
dim(df.k2)
rm(df.k2.train)
rm(df.k2.validate)
#-----
# save
#-----
# save
save(df.k2, file = "./outputs/05_bulk/validation_results.rda")
# save environment
save.image(file = "./env/05_bulk/02_crossvalidate_script.RData")
table(dfp$s.set.values)
list.s.pred
knitr::opts_chunk$set(fig.width=10, fig.height=10)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label)
new.plot.scatter
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label) + xlab("True") + ylab("Predicted")
new.plot.scatter
head(dfp)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3b_validate.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3b_validate.jpg"
jpeg(new.plot.path, width = 3.5, height = 3.5, units = "in", res = 400)
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3b_validate.jpg"
jpeg(new.plot.path, width = 4.5, height = 3.5, units = "in", res = 400)
new.plot.scatter
dev.off()
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitterbox
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3d_experimenttype.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitterbox
dev.off()
new.plot.jitterbox <- ggplot(dfp, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
# Filter results to within-reference condition only
dfp <- dfp[dfp$experiment.type=="within.reference",]
dfp$preparation.type <- gsub(".*_", "", df.k2$bulk.sample.condition)
# Filter results to within-reference condition only
dfp <- dfp[dfp$experiment.type=="within.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
head(dfp)
# Filter results to within-reference condition only
dfp <- df.k2[df.k2$experiment.type=="within.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.jitter.prep <- ggplot(df.k2, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.prep
head(dfp)
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.prep
# Filter results to within-reference condition only
dfp <- df.k2[df.k2$experiment.type=="shared.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.prep
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
new.plot.jitter.prep
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3b_library_condition.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.prep
dev.off()
dfp$cell_compartment <- gsub("_.*", "", dfp$bulk.sample.condition)
new.plot.jitter.compart <- ggplot(dfp, aes(x = cell_compartment, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.compart
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3c_cell_compartment.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.compart
dev.off()
# Filter results to within-reference condition only
dfp <- df.k2[df.k2$experiment.type=="shared.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
new.plot.jitter.prep
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3c_library_condition.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.prep
dev.off()
dfp$cell_compartment <- gsub("_.*", "", dfp$bulk.sample.condition)
new.plot.jitter.compart <- ggplot(dfp, aes(x = cell_compartment, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.compart
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3d_cell_compartment.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.compart
dev.off()
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp <- na.omit(dfp)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp$bulk.sample.id <- gsub("c1", "c", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("k1", "k", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("o1", "o", dfp$bulk.sample.id)
# experiment conditions
dfp$bulk.sample.condition <- cd[dfp$bulk.sample.id,]$expt_condition
table(dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3b_validate.jpg"
jpeg(new.plot.path, width = 4.5, height = 3.5, units = "in", res = 400)
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_validate.jpg"
jpeg(new.plot.path, width = 4.5, height = 3.5, units = "in", res = 400)
new.plot.scatter
dev.off()
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_validate.jpg"
jpeg(new.plot.path, width = 4.2, height = 3.8, units = "in", res = 400)
new.plot.scatter
dev.off()
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3e_experimenttype.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitterbox
dev.off()
