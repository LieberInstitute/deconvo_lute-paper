class(s.vector.validate)
names(s.vector.validate) <- c("glial", "neuron")
# s.vector.validate <- c("glial" = 2, "neuron" = 10)
s.step.iter <- (max(s.vector.validate)-min(s.vector.validate))/num.steps.validate
param.iter <- c("s.min" = min(s.vector.validate),
"s.max" = max(s.vector.validate),
"s.step" = s.step.iter,
"s.diff" = dfs.validate.diff)
dfs.validate <- dfs_iter(param.iter, s.vector.validate)
dfs.validate
s.step.iter
num.steps.validate
#!/usr/bin/env R
# Author: Sean Maden
#
# Get S estimates from bulk validation samples, as a result of multi-step S optimization.
#
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
# sets variables
source("source/00_sopt.R")
source("source/00_sopt_utilities.R")
source("./source/00_dataset_summaries.R")
source("./source/00_deconvo_plots.R")
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
# true proportions from sce data
sn.assay.name <- "snrnaseq.k2.all"
sce.all <- mae[[sn.assay.name]]
list.df.true <- metadata(sce.all)[["list.df.true.k2"]]
#-------------------------------
# subset validation and training
#-------------------------------
samples.index.train <- 1:5
samples.index.validate <- 1:2
list.sample.cv <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))
train.sample.id <- list.sample.cv[["train"]]
validate.sample.id <- list.sample.cv[["validation"]]
cd.mae <- colData(mae)
filter.mae.train <- cd.mae$sample.id %in% train.sample.id
filter.mae.validate <- cd.mae$sample.id %in% validate.sample.id
mae.train <- mae[,which(filter.mae.train)[samples.index.train],]
mae.validate <- mae[,which(filter.mae.validate)[samples.index.validate],]
rm(mae)
#-----------
# experiment
#-----------
# parameters for experiment
num.steps.validate <- 40
seq.steps.train <- seq(5, 100, 10)
# run experiment
list.cv <- lapply(seq.steps.train, function(train.steps){
list.res <- get_crossvalidation_results(
mae.train, mae.validate,
num.steps.train = train.steps,
num.steps.validate = num.steps.validate)
list.res
})
#!/usr/bin/env R
# Author: Sean Maden
#
# Get S estimates from bulk validation samples, as a result of multi-step S optimization.
#
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
# sets variables
source("source/00_sopt.R")
source("source/00_sopt_utilities.R")
source("./source/00_dataset_summaries.R")
source("./source/00_deconvo_plots.R")
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
# true proportions from sce data
sn.assay.name <- "snrnaseq.k2.all"
sce.all <- mae[[sn.assay.name]]
list.df.true <- metadata(sce.all)[["list.df.true.k2"]]
#-------------------------------
# subset validation and training
#-------------------------------
samples.index.train <- 1:5
samples.index.validate <- 1:2
list.sample.cv <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))
train.sample.id <- list.sample.cv[["train"]]
validate.sample.id <- list.sample.cv[["validation"]]
cd.mae <- colData(mae)
filter.mae.train <- cd.mae$sample.id %in% train.sample.id
filter.mae.validate <- cd.mae$sample.id %in% validate.sample.id
mae.train <- mae[,which(filter.mae.train)[samples.index.train],]
mae.validate <- mae[,which(filter.mae.validate)[samples.index.validate],]
rm(mae)
#-----------
# experiment
#-----------
# parameters for experiment
num.steps.validate <- 500
seq.steps.train <- seq(5, 100, 10)
# run experiment
list.cv <- lapply(seq.steps.train, function(train.steps){
list.res <- get_crossvalidation_results(
mae.train, mae.validate,
num.steps.train = train.steps,
num.steps.validate = num.steps.validate)
list.res
})
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Get S estimates from bulk validation samples, as a result of multi-step S optimization.
#
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
# sets variables
source("source/00_sopt.R")
source("source/00_sopt_utilities.R")
source("./source/00_dataset_summaries.R")
source("./source/00_deconvo_plots.R")
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
# true proportions from sce data
sn.assay.name <- "snrnaseq.k2.all"
sce.all <- mae[[sn.assay.name]]
list.df.true <- metadata(sce.all)[["list.df.true.k2"]]
#-------------------------------
# subset validation and training
#-------------------------------
samples.index.train <- 1:5
samples.index.validate <- 1:2
list.sample.cv <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))
train.sample.id <- list.sample.cv[["train"]]
validate.sample.id <- list.sample.cv[["validation"]]
cd.mae <- colData(mae)
filter.mae.train <- cd.mae$sample.id %in% train.sample.id
filter.mae.validate <- cd.mae$sample.id %in% validate.sample.id
mae.train <- mae[,which(filter.mae.train)[samples.index.train],]
mae.validate <- mae[,which(filter.mae.validate)[samples.index.validate],]
rm(mae)
#-----------
# experiment
#-----------
# parameters for experiment
seq.steps.train <- seq(5, 100, 10)
# run experiment
list.cv <- lapply(seq.steps.train, function(train.steps){
list.res <- get_crossvalidation_results(
mae.train, mae.validate, num.steps.train = train.steps)
list.res
})
#!/usr/bin/env R
# Author: Sean Maden
#
# Get S estimates from bulk validation samples, as a result of multi-step S optimization.
#
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
# sets variables
source("source/00_sopt.R")
source("source/00_sopt_utilities.R")
source("./source/00_dataset_summaries.R")
source("./source/00_deconvo_plots.R")
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
# true proportions from sce data
sn.assay.name <- "snrnaseq.k2.all"
sce.all <- mae[[sn.assay.name]]
list.df.true <- metadata(sce.all)[["list.df.true.k2"]]
#-------------------------------
# subset validation and training
#-------------------------------
samples.index.train <- 1:5
samples.index.validate <- 1:2
list.sample.cv <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))
train.sample.id <- list.sample.cv[["train"]]
validate.sample.id <- list.sample.cv[["validation"]]
cd.mae <- colData(mae)
filter.mae.train <- cd.mae$sample.id %in% train.sample.id
filter.mae.validate <- cd.mae$sample.id %in% validate.sample.id
mae.train <- mae[,which(filter.mae.train)[samples.index.train],]
mae.validate <- mae[,which(filter.mae.validate)[samples.index.validate],]
rm(mae)
#-----------
# experiment
#-----------
# parameters for experiment
seq.steps.train <- seq(5, 100, 10)
# run experiment
list.cv <- lapply(seq.steps.train, function(train.steps){
list.res <- get_crossvalidation_results(
mae.train, mae.validate, num.steps.train = train.steps)
list.res
})
names(list.cv) <- paste0("steps:", seq.steps.train)
#-----------------
# format plot data
#-----------------
# get plot data
dfp <- do.call(rbind, lapply(list.cv, function(cv.result){
df.res.val <- cv.result$validate.result$df.res
df.res.train <- cv.result$train.result$df.res
c(min(df.res.val$error.neuron),
median(df.res.val$error.neuron),
sd(df.res.val$error.neuron),
min(df.res.train$error.neuron),
median(df.res.train$error.neuron),
sd(df.res.train$error.neuron),
length(unique(df.res.val$sample.id)),
length(unique(df.res.train$sample.id)),
cv.result$num.steps.train)
}))
dfp <- as.data.frame(dfp)
colnames(dfp) <- c("min.val", "median.val", "sd.val",
"min.train", "median.train", "sd.train",
"num.samples.val", "num.samples.train",
"steps")
# get plot data
dfp.wide <- do.call(rbind, lapply(list.cv, function(cv.result){
c(cv.result$num.steps.train,
min(cv.result$validate.result$df.res$error.neuron),
median(cv.result$validate.result$df.res$error.neuron),
mean(cv.result$validate.result$df.res$error.neuron),
min(cv.result$train.result$df.res$error.neuron),
median(cv.result$train.result$df.res$error.neuron),
mean(cv.result$train.result$df.res$error.neuron))
}))
dfp.wide <- as.data.frame(dfp.wide)
colnames(dfp.wide) <- c("num.steps.train",
"min.validate", "median.validate", "mean.validate",
"min.train", "median.train", "mean.train")
# get dfp.wide
dfp.tall <- do.call(rbind, lapply(list.cv, function(cv.result){
df.iter.val <- c(
cv.result$num.steps.train,
min(cv.result$validate.result$df.res$error.neuron),
max(cv.result$validate.result$df.res$error.neuron),
sd(cv.result$validate.result$df.res$error.neuron),
median(cv.result$validate.result$df.res$error.neuron),
mean(cv.result$validate.result$df.res$error.neuron)
)
df.iter.train <- c(
cv.result$num.steps.train,
min(cv.result$train.result$df.res$error.neuron),
max(cv.result$train.result$df.res$error.neuron),
sd(cv.result$train.result$df.res$error.neuron),
median(cv.result$train.result$df.res$error.neuron),
mean(cv.result$train.result$df.res$error.neuron)
)
df.iter <- as.data.frame(rbind(df.iter.train, df.iter.val))
colnames(df.iter) <- c("dfs.num.steps", "min", "max", "sd", "median", "mean")
df.iter$crossvalidation <- c("train", "validate")
return(df.iter)
}))
dfp.tall <- as.data.frame(dfp.tall)
colnames(dfp.tall) <- c("dfs.num.steps", "min", "max", "sd", "median", "mean", "crossvalidation")
list.dfp = list(dfp.wide = dfp.wide, dfp.tall = dfp.tall)
#-----
# save
#-----
# save plot data
save(list.dfp, file = "./outputs/06_estimate/list_results_train_plot_limited.rda")
# files
list.cv.validate <- lapply(list.cv, function(item){
list(results.validate = item$validate.result, num.steps.train = item$num.steps.train)
})
save(list.cv.validate, file = "./outputs/06_estimate/results_cv_validate_limited.rda")
save(list.cv, file = "./outputs/06_estimate/results_cv_limited.rda")
save(dfp, file = "./outputs/06_estimate/results_dfp_limited.rda")
# env
rm(mae.validate)
rm(mae.train)
save.image("./outputs/06_estimate/02_run_limited_resolution_script.RData")
gc()
gc()
gc()
gc()
knitr::opts_chunk$set(echo = FALSE)
libv <- c("dplyr", "ggplot2")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./outputs/06_estimate/02_run_limited_resolution_script.RData")
# format plot data
# dfp <- list.dfp$dfp.tall
dfp <- dfp[dfp$crossvalidation=="train",]
# dfp$median <- format(dfp$median, scientific = TRUE, digits = 6)
new.plot <- ggplot(dfp, aes(x = steps, y = median.train)) +
geom_point() + geom_line() + ylab("Median error (neuron)") +
xlab("Step count")
new.plot2 <- ggplot(dfp, aes(x = min.train, y = min.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
new.plot3 <- ggplot(dfp, aes(x = sd.train, y = sd.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
xlim(0, 0.3) + ylim(0, 0.3)
new.plot2
new.plot3
new.plot
setwd("..")
setwd("..")
load("./outputs/06_estimate/02_run_limited_resolution_script.RData")
head(dfp)
new.plot <- ggplot(dfp, aes(x = steps, y = median.train)) +
geom_point() + geom_line() + ylab("Median error (neuron)") +
xlab("Step count")
new.plot2 <- ggplot(dfp, aes(x = min.train, y = min.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
new.plot3 <- ggplot(dfp, aes(x = sd.train, y = sd.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
xlim(0, 0.3) + ylim(0, 0.3)
new.plot2
new.plot3
new.plot
new.plot <- ggplot(dfp.tall, aes(x = dfs.num.steps, y = sd, color = crossvalidation)) +
geom_point() + geom_line()
new.plot
new.plot2 <- ggplot(dfp.tall, aes(x = dfs.num.steps, y = median, color = crossvalidation)) +
geom_point() + geom_line()
new.plot2
new.plot3 <- ggplot(dfp.tall, aes(x = dfs.num.steps, y = min, color = crossvalidation)) +
geom_point() + geom_line()
new.plot3
new.plot1 <- ggplot(dfp, aes(x = steps, y = median.train)) +
geom_point() + geom_line() + ylab("Median error (neuron)") +
xlab("Step count")
new.plot2 <- ggplot(dfp, aes(x = steps, y = min.train)) +
geom_point() + geom_line() + ylab("Median error (neuron)") +
xlab("Step count")
new.plot3 <- ggplot(dfp, aes(x = min.train, y = min.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
new.plot4 <- ggplot(dfp, aes(x = sd.train, y = sd.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
xlim(0, 0.3) + ylim(0, 0.3)
new.plot1
new.plot2
new.plot3
new.plot4
new.plot1 <- ggplot(dfp, aes(x = steps, y = median.train)) +
geom_point() + geom_line() + ylab("Median error (neuron)") +
xlab("Step count")
new.plot2 <- ggplot(dfp, aes(x = steps, y = min.train)) +
geom_point() + geom_line() + ylab("Min. error (neuron)") +
xlab("Step count")
new.plot3 <- ggplot(dfp, aes(x = min.train, y = min.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0)
new.plot4 <- ggplot(dfp, aes(x = sd.train, y = sd.val, color = steps)) +
geom_point() + geom_abline(slope = 1, intercept = 0) +
xlim(0, 0.3) + ylim(0, 0.3)
new.plot1
new.plot2
new.plot3
new.plot4
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
table(mae[["bulk.rnaseq"]]$expt_condition)
gc()
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Get S estimates from bulk validation samples, as a result of multi-step S optimization.
#
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "dplyr", "MultiAssayExperiment")
sapply(libv, library, character.only = T)
# sets variables
source("source/00_sopt.R")
source("source/00_sopt_utilities.R")
source("./source/00_dataset_summaries.R")
source("./source/00_deconvo_plots.R")
#----------
# load data
#----------
# load mae (SEE CODE 01 OUTPUTS)
new.mae.filename <- "mae_analysis_append.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
# get sn data
sn.assay.name <- "snrnaseq.k2.all"
sce.all <- mae[[sn.assay.name]]
# get true proportions
list.df.true <- metadata(sce.all)[["list.df.true.k2"]]
# filter bulk
condition.name <- "Nuc_RiboZeroGold"
y.set <- mae[["bulk.rnaseq"]]
mae[["bulk.rnaseq"]] <- y.set[,y.set$expt_condition==condition.name]
#-------------------------------
# subset validation and training
#-------------------------------
samples.index.train <- 1:5
samples.index.validate <- 1:2
list.sample.cv <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))
train.sample.id <- list.sample.cv[["train"]]
validate.sample.id <- list.sample.cv[["validation"]]
# filter cv ids
cd.mae <- colData(mae)
filter.mae.train <- cd.mae$sample.id %in% train.sample.id
filter.mae.validate <- cd.mae$sample.id %in% validate.sample.id
# get separate mae cv data
mae.train <- mae[,which(filter.mae.train)[samples.index.train],]
mae.validate <- mae[,which(filter.mae.validate)[samples.index.validate],]
rm(mae)
#-----------
# experiment
#-----------
# parameters for experiment
seq.steps.train <- seq(5, 150, 25)
# run experiment
list.cv <- lapply(seq.steps.train, function(train.steps){
list.res <- get_crossvalidation_results(
mae.train, mae.validate, num.steps.train = train.steps)
list.res
})
names(list.cv) <- paste0("steps:", seq.steps.train)
#-----------------
# format plot data
#-----------------
# get plot data
dfp <- do.call(rbind, lapply(list.cv, function(cv.result){
df.res.val <- cv.result$validate.result$df.res
df.res.train <- cv.result$train.result$df.res
c(min(df.res.val$error.neuron),
median(df.res.val$error.neuron),
sd(df.res.val$error.neuron),
min(df.res.train$error.neuron),
median(df.res.train$error.neuron),
sd(df.res.train$error.neuron),
length(unique(df.res.val$sample.id)),
length(unique(df.res.train$sample.id)),
cv.result$num.steps.train)
}))
dfp <- as.data.frame(dfp)
colnames(dfp) <- c("min.val", "median.val", "sd.val",
"min.train", "median.train", "sd.train",
"num.samples.val", "num.samples.train",
"steps")
# get plot data
dfp.wide <- do.call(rbind, lapply(list.cv, function(cv.result){
c(cv.result$num.steps.train,
min(cv.result$validate.result$df.res$error.neuron),
median(cv.result$validate.result$df.res$error.neuron),
mean(cv.result$validate.result$df.res$error.neuron),
min(cv.result$train.result$df.res$error.neuron),
median(cv.result$train.result$df.res$error.neuron),
mean(cv.result$train.result$df.res$error.neuron))
}))
dfp.wide <- as.data.frame(dfp.wide)
colnames(dfp.wide) <- c("num.steps.train",
"min.validate", "median.validate", "mean.validate",
"min.train", "median.train", "mean.train")
# get dfp.wide
dfp.tall <- do.call(rbind, lapply(list.cv, function(cv.result){
df.iter.val <- c(
cv.result$num.steps.train,
min(cv.result$validate.result$df.res$error.neuron),
max(cv.result$validate.result$df.res$error.neuron),
sd(cv.result$validate.result$df.res$error.neuron),
median(cv.result$validate.result$df.res$error.neuron),
mean(cv.result$validate.result$df.res$error.neuron)
)
df.iter.train <- c(
cv.result$num.steps.train,
min(cv.result$train.result$df.res$error.neuron),
max(cv.result$train.result$df.res$error.neuron),
sd(cv.result$train.result$df.res$error.neuron),
median(cv.result$train.result$df.res$error.neuron),
mean(cv.result$train.result$df.res$error.neuron)
)
df.iter <- as.data.frame(rbind(df.iter.train, df.iter.val))
colnames(df.iter) <- c("dfs.num.steps", "min", "max", "sd", "median", "mean")
df.iter$crossvalidation <- c("train", "validate")
return(df.iter)
}))
dfp.tall <- as.data.frame(dfp.tall)
colnames(dfp.tall) <- c("dfs.num.steps", "min", "max", "sd", "median", "mean", "crossvalidation")
list.dfp = list(dfp.wide = dfp.wide, dfp.tall = dfp.tall)
#-----
# save
#-----
# save plot data
save(list.dfp, file = "./outputs/06_estimate/list_results_train_plot_limited.rda")
# files
list.cv.validate <- lapply(list.cv, function(item){
list(results.validate = item$validate.result, num.steps.train = item$num.steps.train)
})
save(list.cv.validate, file = "./outputs/06_estimate/results_cv_validate_limited.rda")
save(list.cv, file = "./outputs/06_estimate/results_cv_limited.rda")
save(dfp, file = "./outputs/06_estimate/results_dfp_limited.rda")
# env
rm(mae.validate)
rm(mae.train)
save.image("./outputs/06_estimate/02_run_limited_resolution_script.RData")
