sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
sample.id.keep <- c("Br8325_mid", "Br3942_mid")
mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
df.res <- as.data.frame(
do.call(rbind, lapply(list.experiment.results, function(item){item$df.res})))
df.res$sample.id <- gsub("_.*", "", rownames(df.res))
list.dfp <- get_dfp_list(df.res)
# save image
rm(mae)
save.image(file = "./env/08_adjustment/03_run_pseudobulk_script.RData")
knitr::opts_chunk$set(echo = TRUE)
libv <- c("dplyr", "ggplot2", "GGally")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/08_adjustment/03_run_pseudobulk_script.RData")
dfp.wide <- list.dfp$dfp.wide
dfp.tall <- list.dfp$dfp.tall
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 40
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
names(mae)
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 40
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
colnames(mae[[2]])
colnames(mae[["bulk.pb.k2"]])
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
class(assays(mae[["bulk.pb.k2"]])[[1]])
class(assays(mae[["bulk.pb.k2"]])[[1]][,1])
class(assays(mae[["bulk.pb.k2"]])[[1]])
dim(assays(mae[["bulk.pb.k2"]])[[1]])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,1])
dim(assays(mae[["bulk.pb.k2"]])[[1]])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,1])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,1,drop=F])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,,drop=F])
dim(assays(mae[["bulk.pb.k2"]])[[1]][,,drop=F])
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- mae[[bulk.mae.name]]
bulk.mae.name = "bulk.pb.k2"
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
bisque.sce = sce
# prep
sample.id <- unique(colData(mae)$sample.id)
sce <- mae[["snrnaseq.k2.all"]]
y.set <- mae[[bulk.mae.name]]
# get logcounts scaled expression
y.set <- scuttle::logNormCounts(y.set)
sce <- scuttle::logNormCounts(sce)
bisque.sce <- scuttle::logNormCounts(bisque.sce)
y <- assays(y.set)[["logcounts"]][,,drop=F]
assays(sce)[["counts"]] <- assays(sce)[["logcounts"]]
assays(bisque.sce)[["logcounts"]] <- assays(bisque.sce)[["logcounts"]]
bulk.eset <- se_to_eset(y.set, "logcounts")
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
bulk.sample.id.variable = "sample.id"
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
dfs.steps = 2
# prep bisque
sn.eset <- sce_to_eset(bisque.sce)
exprs(sn.eset) <- exprs(sn.eset) + 1e-3
sn.eset[["sample.id"]] <- sn.eset[["Sample"]]
bulk.eset[["sample.id"]] <- bulk.eset[[bulk.sample.id.variable]]
# prep z
z <- lute::get_z_from_sce(sce, "counts", "k2")
dfs <- dfs.series(seq(1, 20, (20-1)/dfs.steps))
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
dim(y)
y <- y[,1,drop=F]
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
sce <- sce[,sce$Sample = colnames(y)]
sce <- sce[,sce$Sample == colnames(y)]
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
mae <- mae[,colData(mae)$sample.id == colnames(y)[1],]
df.s.opt.res <- do.call(rbind, lapply(seq(ncol(y)), function(index){
message("working on bulk sample index ", index, " of ", ncol(y))
mae.iter <- mae
mae.iter[[bulk.mae.name]] <- mae.iter[[bulk.mae.name]][,index]
df.sopt <- get_sopt_results(mae.iter, dfs, label = "train")
df.sopt.res <- df.sopt$df.res
filter.sopt <- df.sopt.res$error.neuron == min(df.sopt.res$error.neuron)
df.sopt.res <- df.sopt.res[filter.sopt,]
df.sopt.res <- df.sopt.res[1,]
c("glial" = df.sopt.res$s.glial, "neuron" = df.sopt.res$s.neuron)
}))
s.vector.scale <- colMedians(df.s.opt.res)
names(s.vector.scale) <- colnames(df.s.opt.res)
message("sopt result:\n")
df.s.opt.res
s.vector.scale <- colMedians(df.s.opt.res)
names(s.vector.scale) <- colnames(df.s.opt.res)
message("sopt result:\n")
print(s.vector.scale)
s.vector.noscale <- c("glial" = 1, "neuron" = 1)
# bisque rescale
sn.eset.rescale <- sn_eset_rescale(sn.eset,
s.vector.scale["glial"],
s.vector.scale["neuron"])
sn.eset.rescale
# experiment -- nnls
nnls.scale <- lute(z = z, y = y,
s = s.vector.scale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
nnls.noscale <- lute(z = z, y = y,
s = s.vector.noscale,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
colnames(nnls.scale) <- paste0(colnames(nnls.scale), ".nnls.scale")
colnames(nnls.noscale) <- paste0(colnames(nnls.noscale), ".nnls.noscale")
# experiment -- music
music.prop.scale <- deconvolution(musicParam(y, z, s = s.vector.scale))@predictions.table
music.prop.noscale <- deconvolution(musicParam(y, z, s = s.vector.noscale))@predictions.table
colnames(music.prop.scale) <- paste0(colnames(music.prop.scale), ".music.scale")
colnames(music.prop.noscale) <- paste0(colnames(music.prop.noscale), ".music.noscale")
# experiment -- bisque
# bisque no scale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.noscale <- as.data.frame(t(bisque.prop.noscale))
bisque.prop.rescale <- as.data.frame(t(bisque.prop.rescale))
colnames(bisque.prop.rescale) <- paste0(colnames(bisque.prop.rescale), ".bisque.scale")
colnames(bisque.prop.noscale) <- paste0(colnames(bisque.prop.noscale), ".bisque.noscale")
# bind results
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
# bisque no scale
bisque.prop.noscale <- BisqueRNA::ReferenceBasedDecomposition(
bulk.eset, sn.eset, markers=NULL, use.overlap=FALSE,
subject.names = "sample.id", cell.types = "k2")$bulk.props
bisque.prop.noscale
bulk.eset
sn.eset.rescale
dim(sn.eset.rescale)
dim(sn.eset)
class(assays(sn.eset))
class(exprs(sn.eset))
class(exprs(sn.eset.rescale))
class(exprs(sn.eset.rescale)[[1]])
class(exprs(sn.eset.rescale)[,1])
class(exprs(sn.eset)[,1])
summary(exprs(sn.eset.rescale)[,1])
summary(exprs(sn.eset)[,1])
bisque.prop.rescale <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset,
sn.eset.rescale,
markers=NULL, use.overlap=FALSE,
subject.names = "sample.id",
cell.types = "k2")$bulk.props
bisque.prop.rescale
bisque.prop.noscale <- as.data.frame(t(bisque.prop.noscale))
bisque.prop.rescale <- as.data.frame(t(bisque.prop.rescale))
colnames(bisque.prop.rescale) <- paste0(colnames(bisque.prop.rescale), ".bisque.scale")
colnames(bisque.prop.noscale) <- paste0(colnames(bisque.prop.noscale), ".bisque.noscale")
# bind results
df.res <- cbind(nnls.noscale, nnls.scale,
music.prop.noscale, music.prop.scale,
bisque.prop.rescale, bisque.prop.noscale)
df.res
head(df.res)
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
#!/usr/bin/env R
# Author: Sean Maden
#
# Performs bias-adjusted deconvolution.
#
source("./scripts/08_adjustment/00_musicParam-class.R")
source("./scripts/08_adjustment/00_sopt.R")
source("./scripts/08_adjustment/00_sopt_utilities.R")
source("./scripts/08_adjustment/00_param.R")
libv <- c("snow", "dplyr", "parallel", "doParallel", "lute", "BisqueRNA", "MuSiC",
"dplyr", "MultiAssayExperiment", "GGally")
sapply(libv, library, character.only = T)
# params
num.dfs.steps <- 2
#-----
# load
#-----
new.mae.filename <- "mae_allsamples.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#sample.id.keep <- c("Br8325_mid", "Br3942_mid")
#mae <- mae[,colData(mae)$sample.id %in% sample.id.keep,]
#-----------
# experiment
#-----------
sample.id.vector <- colData(mae)$sample.id
list.experiment.results <- experiment_all_samples(
sample.id.vector, mae, dfs.steps = num.dfs.steps,
bulk.mae.name = "bulk.pb.k2",
bulk.sample.id.variable = "batch.id2")
traceback()
ExpressionSet(assayData = exprs(bulk.eset))
ExpressionSet(assayData = exprs(bulk.eset))
mexprs(ExpressionSet(assayData = exprs(bulk.eset)))
y
class(y)
bulk.eset
exprs(bulk.eset)
names(assays(bulk.eset))
class(exprs(bulk.eset))
