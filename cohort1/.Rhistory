setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_analysis.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_analysis.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_analysis.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#!/usr/bin/env R
# Prepares MultiAssayExperiment object
# experiment variables
deconvolution.algorithm <- "nnls"
cell.type.variable <- "k2"
#-----------
# unpack mae
#-----------
# get bulk expression
rse.counts <- mae[["bulk.rnaseq"]]
rse.rpkm <- mae[["bulk.rpkm.rnaseq"]]
names(assays(rse.counts)) <- names(assays(rse.rpkm)) <- "counts"
# snrnaseq reference -- using same reference across experiments
sce.iter <- mae[["snrnaseq.k2.all"]]
sce.iter <- logNormCounts(sce.iter)
# prep rnascope data
# get true proportions from rnascope data
df.rn <- mae[["cell.sizes"]]
df.rn <- as.data.frame(t(df.rn))
df.rn <- df.rn[df.rn$k.label=="k2",]
# get list.df.true
list.df.true <- metadata(sce.iter)[["list.df.true.k2"]]
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:11)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:11)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:11)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
colnames(df.s.k2.shared.counts.counts)
colnames(df.s.k2.shared.rpkm.counts)
colnames(df.s.k2.within.rpkm.counts)
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:9)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:9)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
head(list.counts)
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:9)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:9)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,c(1:6,8:9)],
df.s.k2.shared.rpkm.logcounts[,c(1:6,8:9)],
df.s.k2.within.counts.lognorm,
df.s.k2.within.rpkm.lognorm
)
# append bulk conditions
cd <- colData(mae[["bulk.rnaseq"]])
list.counts <- lapply(list.counts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "counts"
df
})
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
df.k2 <- rbind(do.call(rbind, list.counts), do.call(rbind, list.logcounts))
head(df.k2)
list.df.true[[sample.id]][["neuron"]]
sample.id.vector <- unique(df.k2$sample.id)
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
list.df.true[[sample.id]][["neuron"]]
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
list.df.true[[sample.id]][["glial"]]
}
head(df.k2)
head(df.k2$sample.id)
sample.id.vector
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
list.df.true[[sample.id]][["neuron"]]
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
list.df.true[[sample.id]][["glial"]]
}
head(df.k2)
# append true values
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["neuron"]])
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["glial"]])
}
head(d.fk2)
head(df.k2)
list.df.true[[1]]$glial
list.df.true
# append true values
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["neuron"]])
df.k2[df.k2$sample.id==sample.id,]$true.glial <-
as.numeric(list.df.true[[sample.id]][["glial"]])
}
head(df.k2)
#---------------
# format results
#---------------
list.counts <- list(
df.s.k2.shared.counts.counts[,c(1:6,8:9)],
df.s.k2.shared.rpkm.counts[,c(1:6,8:9)],
df.s.k2.within.counts.counts,
df.s.k2.within.rpkm.counts
)
list.logcounts <- list(
df.s.k2.shared.counts.logcounts[,c(1:6,8:9)],
df.s.k2.shared.rpkm.logcounts[,c(1:6,8:9)],
df.s.k2.within.counts.lognorm,
df.s.k2.within.rpkm.lognorm
)
# append bulk conditions
cd <- colData(mae[["bulk.rnaseq"]])
list.counts <- lapply(list.counts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "counts"
df
})
list.logcounts <- lapply(list.logcounts, function(df){
df$bulk.sample.id <- rownames(df)
df$bulk.sample.condition <- cd[df$bulk.sample.id,]$expt_condition
df$assay.name.lutearg <- "logcounts"
df
})
# bind final df
df.k2 <- rbind(do.call(rbind, list.counts), do.call(rbind, list.logcounts))
# append true values
sample.id.vector <- unique(df.k2$sample.id)
df.k2$true.neuron <- df.k2$true.glial <- "NA"
for(sample.id in sample.id.vector){
df.k2[df.k2$sample.id==sample.id,]$true.neuron <-
as.numeric(list.df.true[[sample.id]][["neuron"]])
df.k2[df.k2$sample.id==sample.id,]$true.glial <-
as.numeric(list.df.true[[sample.id]][["glial"]])
}
# append abs.error
df.k2$abs.error.neuron <- abs(as.numeric(df.k2$neuron)-as.numeric(df.k2$true.neuron))
df.k2$abs.error.glial <- abs(as.numeric(df.k2$glial)-as.numeric(df.k2$true.glial))
# format
df.k2$true.neuron <- as.numeric(df.k2$true.neuron)
# clear cache
rm(df.s.k2.shared.counts.counts)
rm(df.s.k2.shared.rpkm.counts)
rm(df.s.k2.within.counts.counts)
rm(df.s.k2.within.rpkm.counts)
rm(df.s.k2.shared.counts.logcounts)
rm(df.s.k2.shared.rpkm.logcounts)
rm(df.s.k2.within.counts.lognorm)
rm(df.s.k2.within.rpkm.lognorm)
rm(mae)
rm(mae.final)
rm(rse.counts)
rm(rse.rpkm)
rm(sce.iter)
# save
save(df.k2, file = "./outputs/05_bulk/k2_results.rda")
gc()
gc()
#!/usr/bin/env R
# Author: Sean Maden
#
# Perform bulk conditions A/B tests.
#
#
libv <- c("scuttle")
sapply(libv, library, character.only = TRUE)
#---------
# load mae
#---------
new.mae.filename <- "mae_analysis.rda"
mae.final.filepath <- file.path("outputs", "01_mae", new.mae.filename)
mae <- get(load(mae.final.filepath))
#------------------------
# filter training samples
#------------------------
# sample.id.train <- get(load("./outputs/00_preprocess/list_snrnaseq_sampleid.rda"))[["train"]]
# remove validation samples
dim(mae[["bulk.rnaseq"]])
cd.mae <- colData(mae)
cd.mae$sample.id.new <- gsub("_.*", "", cd.mae$sample.id)
validation.sample.id <- c("Br6432", "Br6522", "Br8667")
filter.string <- paste0(validation.sample.id, collapse = "|")
filter.mae <- !grepl(filter.string, cd.mae$sample.id.new)
table(filter.mae)
# filter.mae
# FALSE  TRUE
# 7    15
mae <- mae[,filter.mae,]
dim(mae[["bulk.rnaseq"]])
#-------------
# run a/b test
#-------------
base.path <- file.path("scripts/05_bulk/abtest/")
# prep dependencies
source(file.path(base.path, "00_helper-functions.R"))
# prep data
source(file.path(base.path, "01-01_prepare-mae.R")) # prep mae data
source(file.path(base.path, "01-02_prep-s-vector.R"))
# run experiments
source(file.path(base.path, "02-01-01_rse-counts_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-01-02_rse-counts_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-02-01_rse-counts_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-02-02_rse-counts_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-03-01_rse-rpkm_counts-yz_shared-reference-experiments.R"))
source(file.path(base.path, "02-03-02_rse-rpkm_logcounts-lutearg_shared-reference-experiments.R"))
source(file.path(base.path, "02-04-01_rse-rpkm_counts-yz_within-reference-experiments.R"))
source(file.path(base.path, "02-04-02_rse-rpkm_lognorm-yz_within-reference-experiments.R"))
source(file.path(base.path, "03_prep-experiment-results.R"))
# save environment
save.image(file = "./env/05_bulk/01_run_script.RData")
