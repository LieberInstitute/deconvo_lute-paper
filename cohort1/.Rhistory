plot()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/02_k3.RData")
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("True") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot proportions multipanel -- scale vs with scale
new.plot <- ggplot(dfp.ct, aes(x = true.noscale, y = pred.noscale)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~celltype) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2c_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 6, height = 3, units = "in", res = 400)
new.plot
dev.off()
gc()
gc()
gc()
libv <- c("ggplot2")
sapply(libv, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
list.files()
load("./env/02_pseudobulk/01_k2.RData")
# plot proportions panel -- no scale
new.plot <- ggplot(dfp.tall[dfp.tall$type=="noscale",],
aes(x = neuron.true, y = neuron.pred)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("..")
setwd("..")
new.plot.name <- "fig2a_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
new.plot <- ggplot(dfp.tall, aes(x = neuron.true, y = neuron.pred)) +
geom_point(size = 4, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0.5) + geom_vline(xintercept = 0.5) + theme_bw() +
xlab("Known") + ylab("Predicted") +
xlim(0, 1) + ylim(0, 1) + facet_wrap(~type) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot
setwd("..")
setwd("..")
new.plot.name <- "figs1b_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 4, height = 2.5, units = "in", res = 400)
new.plot
dev.off()
new.plot <- ggplot(dfp.tall, aes(x = type, y = neuron.abs.error)) +
geom_jitter(alpha = 0.5, size = 3) +
geom_boxplot(color = "cyan", alpha = 0) + theme_bw() +
ylab("Error (neuron)")
setwd("..")
setwd("..")
new.plot.name <- "figs1a_cohort1.jpg"
jpeg(file.path("./figures/02_pseudobulk/", new.plot.name),
width = 3, height = 3, units = "in", res = 400)
new.plot
dev.off()
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
libv <- c("ggplot2", "reshape2", "gridExtra", "cowplot")
sapply(libv, library, character.only = T)
# Author: Sean Maden
#
# Gets scatterplots of multiple conditions, varying the true proportions and bulk expressions.
#
#
#
#
#------
# load
#------
source("./scripts/09_example_plots/00_param.R")
load("./env/09_example_plots/01_example_plots_value_changes_script.RData")
#--------------------------------------------------
# multiple panels -- marker expression start is 0.5
#--------------------------------------------------
# get multiple panels
# view facet of multi panel plots
# marker expression start is 0.5
listMultiPlot05 <- multiPanelPlots(markerExpressionStart = 0.5)
trueProportionsVector <- seq(0.4, 0.9, 0.035)
bulkExpressionVector <- rnorm(
length(trueProportionsVector), mean = 0.7, sd = 0.09)
listScatterResult <- multiPanelScatterPlots(
trueProportionValueVector = trueProportionsVector,
bulkExpressionVector = bulkExpressionVector
)
multiPanelScatterPlots
listScatterResult$ggScatter
listScatterResult$ggScatter + xlab('Known')
jpeg(paste0("./figures/09_example_plots/",
"scatterplot_samples_true-versus-predicted.jpg"),
width = 10, height = 2.5, units = "in", res = 400)
listScatterResult$ggScatter + xlab('Known')
dev.off()
gc()
gc()
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10, echo = F)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
dfp <- df.k2
# format plot data
dfp <- dfp[dfp$crossvalidation=="validation",]
dfp[dfp$s.set.label=="s.null",]$s.set.label <- "unscaled"
dfp[dfp$s.set.label=="s.manual",]$s.set.label <- "scaled"
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp$bulk.sample.id <- gsub("c1", "c", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("k1", "k", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("o1", "o", dfp$bulk.sample.id)
# experiment conditions
dfp$bulk.sample.condition <- cd[dfp$bulk.sample.id,]$expt_condition
table(dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs2b_validate.jpg"
jpeg(new.plot.path, width = 4.2, height = 3.8, units = "in", res = 400)
new.plot.scatter
dev.off()
new.plot.jitterbox <- ggplot(df.k2, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~crossvalidation) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3e_experimenttype.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitterbox
dev.off()
# Filter results to within-reference condition only
dfp <- df.k2[df.k2$experiment.type=="shared.reference",]
dfp$preparation.type <- gsub(".*_", "", dfp$bulk.sample.condition)
dfp <- na.omit(dfp)
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
facet_wrap(~crossvalidation) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
new.plot.jitter.prep
# combine all samples
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
new.plot.jitter.prep
# combine all samples
new.plot.jitter.prep <- ggplot(dfp, aes(x = preparation.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)")
new.plot.jitter.prep
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3c_library_condition_allsamples.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.prep
dev.off()
# combined samples
dfp$cell_compartment <- gsub("_.*", "", dfp$bulk.sample.condition)
new.plot.jitter.compart <- ggplot(dfp, aes(x = cell_compartment, y = abs.error.neuron)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "cyan") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
new.plot.jitter.compart
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3d_cell_compartment_allsamples.jpg"
jpeg(new.plot.path, width = 4, height = 3, units = "in", res = 400)
new.plot.jitter.compart
dev.off()
gc()
gc()
gc()
gc()
knitr::opts_chunk$set(fig.width=10, fig.height=10, echo = F)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
# load env data
setwd("..")
setwd("..")
load("./env/05_bulk/01_run_manual_script.RData")
# format plot data
dfp <- df.k2
# format variable states
dfp$experiment.type <- paste0("z_type : ", dfp$experiment.type)
dfp$assay.name.lutearg <- paste0("rescale_type : ", dfp$assay.name.lutearg)
dfp$s.set.label <- paste0("s_set : ", dfp$s.set.label)
dfp$bulk.sample.id <- gsub("c1", "c", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("k1", "k", dfp$bulk.sample.id)
dfp$bulk.sample.id <- gsub("o1", "o", dfp$bulk.sample.id)
# experiment conditions
dfp$bulk.sample.condition <- cd[dfp$bulk.sample.id,]$expt_condition
table(dfp$bulk.sample.condition)
# filter na
dfp <- na.omit(dfp)
expt <- data.frame(z.reference.type = c("shared", "within", "shared", "within"),
y.expression.scale = c("counts", "counts", "RPKM", "RPKM"))
expt <- do.call(rbind, lapply(seq(length(list.s.pred)), function(ii){
expt.iter <- expt
expt.iter
}))
expt$cell.label.type <- "k2"
# table visualization
knitr::kable(expt)
data.dict <- list(z.reference.type = "Type of cell type reference for deconvolution",
y.expression.scale = "Scale of the bulk sample data passed to lute",
s.pred.set.name = "Label of the S factor set",
s.pred.set.values = "S factor set values.",
cell.label.type = "Cell type identifier")
data.dict <- do.call(rbind, lapply(seq(length(data.dict)), function(ii){c(names(data.dict)[ii], data.dict[[ii]])}))
knitr::kable(data.dict)
# new plot
new.plot.scatter <-
ggplot(dfp, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label)
new.plot.scatter
# new plot
new.plot.scatter <-
ggplot(dfp, aes(x = true.neuron, y = neuron, color = bulk.scale.type)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~experiment.type*assay.name.lutearg*s.set.label) +
xlab("Known") + ylab("Predicted")
new.plot.scatter
setwd("..")
setwd("..")
new.plot.path <- "./figures/05_bulk/figs3a_scatter.jpg"
jpeg(new.plot.path, width = 7, height = 6, res = 400, units = "in")
new.plot.scatter
dev.off()
dfp.new <- dfp
dfp.new$experiment.type <- gsub("z_type : ", "", dfp.new$experiment.type)
new.plot.jitterbox <- ggplot(dfp.new, aes(x = experiment.type, y = abs.error.neuron)) +
geom_jitter(alpha = 0.5) + geom_boxplot(alpha = 0, color = "cyan") +
facet_wrap(~assay.name.lutearg) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("z_type") + ylab("Error (neuron)")
new.plot.jitterbox
new.plot.jitter.cond <- ggplot(dfp, aes(x = bulk.sample.condition,
y = abs.error.neuron, color = sample.id)) +
geom_jitter(alpha = 0.3) + geom_boxplot(alpha = 0, color = "black") + theme_bw() +
facet_wrap(~experiment.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Error (neuron)") + xlab("Preparation condition")
new.plot.jitter.cond
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("True") + ylab("Predicted")
new.plot.scatter
new.plot.scatter <- ggplot(dfp, aes(x = true.neuron, y = neuron)) +
theme_bw() + geom_point(alpha = 0.5) + geom_abline(slope = 1, intercept = 0) +
facet_wrap(~s.set.label*experiment.type) + xlab("Known") + ylab("Predicted")
new.plot.scatter
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
libv <- c("dplyr", "ggplot2", "GGally", "gridExtra")
sapply(libv, library, character.only = TRUE)
setwd("..")
setwd("..")
load("./env/07_adjustment/03_run_adjustment_realbulk_all_script.RData")
list.df.true <- metadata(sce)[["list.df.true.k2"]]
plotsList <- function(dfp){
# plotsList
#
# scatterplot and jitterbox plot of results data, with outlier label.
#
# dfp.tall results data.frame
#
#
dfp$scale <- ifelse(dfp$scale, "withscale", "noscale")
dfLabel <- dfp[dfp$true < 0.75 & dfp$value < 0.25,]
new.plot.tall <- ggplot(dfp, aes(x = true, y = value)) +
geom_point(size = 4, alpha = 0.5) + geom_abline(slope = 1, intercept = 0) + facet_wrap(~scale) +
xlab("Known") + ylab("Predicted") + xlim(0.1,0.9) + ylim(0.1,0.9) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(data = dfLabel, aes(x = true, y = value),
label = sample.id, nudge_x = 0.1, nudge_y = 0.1)
new.plot.tall
new.plot.tall.jitterbox <- ggplot(dfp, aes(x = scale, y = error)) +
geom_jitter(alpha = 0.5, width = 0.5, height = 0) + theme_bw() +
geom_boxplot(alpha = 0, color = "cyan") +
xlab("Scale") + ylab("Error (neuron)") + ylim(0, 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
new.plot.tall.jitterbox
return(list(
new.plot.tall, new.plot.tall.jitterbox
))
}
