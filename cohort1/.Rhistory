})) |> as.data.frame()
do.call(rbind, lapply(1:nrow(exampleDataSamples), function(rowIndex){
exampleDataSamples[rowIndex, "sample.id"] <- paste0(
exampleDataSamples[rowIndex, "sample.id"], levelsSepSymbol, conditionLevel)
exampleDataSamples[rowIndex,]
})) |> as.data.frame()
exampleDataSamples
library(chattr)
chattr("hello")
chattr("hello")
knitr::opts_chunk$set(echo = TRUE)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"Tool options > search 'copilot' > Enable GitHub Copilot > Deselect")
)
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > ('Enable GitHub Copilot' deselect)")
)
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (deselect 'Enable GitHub Copilot')")
)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion",
"Toggle completion delay"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (deselect 'Enable GitHub Copilot')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Index project files...')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Toggle Automatic Completions')",
"(TOOL_OPTIONS) > (SEARCH 'code completion')",
"Global Options / Options > Code > Completion > Completion Delay")
)
knitr::kable(dfch)
?.rs.api.setGhostText()
.rs.api.setGhostText()
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion settings",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (deselect 'Enable GitHub Copilot')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Index project files...')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Toggle Automatic Completions')",
"(TOOL_OPTIONS) > (SEARCH 'code completion') > (select option from 'Use code completion for [r/other language]')",
"Global Options / Options > Code > Completion > Completion Delay",
".rs.api.setGhostText()")
)
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion settings",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (deselect 'Enable GitHub Copilot')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Index project files...')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Toggle Automatic Completions')",
"(TOOL_OPTIONS) > (SEARCH 'code completion') > (select option from 'Use code completion for [r/other language]')",
"Global Options / Options > Code > Completion > Completion Delay",
".rs.api.setGhostText()")
)
dfch$item <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion settings",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (deselect 'Enable GitHub Copilot')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Index project files...')",
"(TOOL_OPTIONS) > (SEARCH 'copilot') > (select 'Toggle Automatic Completions')",
"(TOOL_OPTIONS) > (SEARCH 'code completion') > (select option from 'Use code completion for [r/other language]')",
"Global Options / Options > Code > Completion > Completion Delay",
".rs.api.setGhostText()")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot')\nGlobal Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion')\nGlobal Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText()")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText()")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
knitr::kable(dfch)
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText()")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
colnames(dfch) <- c("", "Task", "Command")
knitr::kable(dfch)
?kable
knitr::kable(dfch)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "black") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
knitr::kable(dfch)
library(tidyverse)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "black") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
?column_spec
knitr::kable(dfch)
library(tidyverse)
library(kableExtra)
install.packages("kableExtra")
knitr::kable(dfch)
library(tidyverse)
library(kableExtra)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "black") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
knitr::kable(dfch)
library(tidyverse)
library(kableExtra)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "black") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "red", background = "white")
knitr::kable(dfch)
library(tidyverse)
library(kableExtra)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
.rs.api.setGhostText("my test text")
.rs.api.setGhostText("my test text")
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('My test text') > Run / CTRL + ENTER"),
)
.rs.api.setGhostText('my test text')
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('test') > Run / CTRL + ENTER"),
)
c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API")
length(c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"))
c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('test') > Run / CTRL + ENTER")
length(c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('test') > Run / CTRL + ENTER"))
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('test') > Run / CTRL + ENTER")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
colnames(dfch) <- c("", "Task", "Command")
knitr::kable(dfch)
library(tidyverse)
library(kableExtra)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
knitr::include_graphics("ai_presentations_content, sean Ci.png")
knitr::opts_chunk$set(echo = F)
# set image width
options(width = 100)
knitr::include_graphics("ai_presentations_content, sean Ci.png")
# set image width
options(width = 50)
knitr::include_graphics("ai_presentations_content, sean Ci.png")
# set image width
options(width = 2)
# set image width
options(width = 10)
knitr::include_graphics("ai_presentations_content, sean Ci.png")
# knitr options suppress all messages
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = F)
library(tidyverse)
library(kableExtra)
# make knitr kable table with centering and border lines
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
# set kable border color black
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white") %>%
add_header_above(c(" " = 1, "Task" = 1, "Command" = 1)) %>%
row_spec(0, bold = T, color = "white", background = "black") %>%
row_spec(1, bold = T, color = "black", background = "white") %>%
row_spec(2, bold = T, color = "black", background = "white") %>%
row_spec(3, bold = T, color = "black", background = "white") %>%
row_spec(4, bold = T, color = "black", background = "white") %>%
row_spec(5, bold = T, color = "black", background = "white") %>%
row_spec(6, bold = T, color = "black", background = "white") %>%
row_spec(7, bold = T, color = "black", background = "white") %>%
row_spec(8, bold = T, color = "black", background = "white")
# set kable border color black
kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white") %>%
add_header_above(c(" " = 1, "Task" = 1, "Command" = 1)) %>%
row_spec(0, bold = T, color = "white", background = "black") %>%
row_spec(1, bold = T, color = "black", background = "white") %>%
row_spec(2, bold = T, color = "black", background = "white") %>%
row_spec(3, bold = T, color = "black", background = "white") %>%
row_spec(4, bold = T, color = "black", background = "white") %>%
row_spec(5, bold = T, color = "black", background = "white") %>%
row_spec(6, bold = T, color = "black", background = "white") %>%
row_spec(7, bold = T, color = "black", background = "white") %>%
row_spec(8, bold = T, color = "black", background = "white")
library(tidyverse)
library(kableExtra)
# knitr options suppress all messages
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = F)
dfch <- data.frame(
"Task" = c("Open tool options",
"Toggle Copilot options",
"Enable/Disable Copilot",
"Use all project files",
"Toggle automatic completions",
"Toggle code completion options", # 6
"Toggle code completion by language",
"Toggle completion delay",
"Test Ghost Text API"),
"Command" = c("CTRL + SHIFT + P / CMD + SHIFT + P",
"(1.) > (SEARCH 'copilot') || Global Options > Copilot",
"(2.) > (deselect 'Enable GitHub Copilot')",
"(2.) > (select 'Index project files...')",
"(2.) > (select 'Toggle Automatic Completions')",
"(1.) > (SEARCH 'code completion') || Global Options > Copilot",
"(6.) > (select option from 'Use code completion for... [R/other language]')",
"(6.) > Completion Delay",
".rs.api.setGhostText('test') > Run / CTRL + ENTER")
)
dfch$index <- seq(nrow(dfch))
dfch <- dfch[,c(3,1,2)]
colnames(dfch) <- c("", "Task", "Command")
# make knitr kable table with centering and border lines
newTable <- kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
print(newTable)
# make knitr kable table with centering and border lines
newTable <- kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
newTable |> kable_styling() | print()
# make knitr kable table with centering and border lines
newTable <- kable(dfch, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "bordered"), full_width = F) %>%
column_spec(1, bold = T, color = "white", background = "red") %>%
column_spec(2, bold = T, color = "black", background = "white") %>%
column_spec(3, bold = T, color = "black", background = "white")
# newTable |> kable_styling() | print()
print(kable_styling(newTable))
library(chattr)
chattr("hello")
knitr::opts_chunk$set(echo = TRUE)
x <- 0.4
y <- 1e-10
x - y
format(x-y, digits = 22)
z1 <- x - y
z2 <- format(x-y, digits = 22)
z3 <- 1e-20
data.frame(z1, z2, z3)
matrix(z1, z2, z3)
matrix(c(z1, z2, z3))
data.frame(as.numeric(z1), as.numeric(z2), as.numeric(z3))
matrix(as.numeric(c(z1, z2, z3)))
?as.float
z2.1 <- format(x-y, digits = 10)
z2.2 <- format(x-y, digits = 20)
z2.3 <- format(x-y, digits = 30)
z2.1 <- format(x-y, digits = 10)
z2.2 <- format(x-y, digits = 20)
z2.3 <- format(x-y, digits = 25)
z2.1 <- format(x-y, digits = 10)
z2.2 <- format(x-y, digits = 20)
z2.3 <- format(x-y, digits = 22)
z2.1
z2.2
z2.3
knitr::kable(data.frame(z1, z2, z3))
knitr::kable(matrix(c(z1, z2, z3)))
matrix(c(z1, z2, z3))
knitr::kable(as.data.frame(matrix(c(z1, z2, z3))))
z1
matrix(c(z1, z2, z3)) |> as.data.frame()
cbind(c(z1, z2, z3)) |> as.data.frame()
cbind(c(rep(z1, 5), rep(z2, 5), rep(z3, 5))) |> as.data.frame()
cbind(rep(z1, 5), rep(z2, 5), rep(z3, 5)) |> as.data.frame()
z1 <- x - y
z2 <- format(x-y, digits = 22)
z3 <- 1e-20
data.frame(z1, z2, z3)
cbind(rep(z1, 5), rep(z2, 5), rep(z3, 5)) |> as.data.frame()
#!/usr/bin env R
# Author: Sean Maden
# AI: Copilot
#
#
# load libraries
library(ggplot2)
# plot a dispersed distribution using ggplot2
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_minimal() +
labs(title = "Scatterplot of Sepal Length and Width",
x = "Sepal Length",
y = "Sepal Width")
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_vline(aes(xintercept = mean(Sepal.Length)), color = "red") +
geom_hline(aes(yintercept = mean(Sepal.Width)), color = "blue") +
theme_minimal() +
labs(title = "Scatterplot of Sepal Length and Width",
x = "Sepal Length",
y = "Sepal Width")
setwd("C:/Users/User/Documents/GitHub/deconvo_method-paper/cohort1")
setwd("..")
setwd("..")
load("./env/05_bulk/02_crossvalidate_script.RData")
knitr::opts_chunk$set(fig.width=10, fig.height=10, echo = F)
libv <- c("ggplot2")
sapply(libv, library, character.only = T)
dim(df.k2)
length(unique(df.k2$sample.id))
head(df.k2$sample.id)
head(df.k2)
length(unique(gsub("_.*", "", df.k2$bulk.sample.id)))
