library(snow)
dfs.series <- function(
s.glial.series = seq(1, 20, 1)){
s.neuron.series <- rev(s.glial.series)
dfs.series <- do.call(rbind,
lapply(
seq(
length(
s.glial.series)), function(index1){
do.call(
rbind,
lapply(
seq(
length(
s.neuron.series)), function(index2){
c("glial" = s.glial.series[index1], "neuron" = s.neuron.series[index2])
}
)
)
}
)
) %>%
as.data.frame()
return(dfs.series)
}
parallelized_bias_calculatoins <- function(sce,
dfs,
celltype.variable = "k2",
assay.name = "counts",
s.vector.ypb = c("glial" = 3, "neuron" = 10)){
# begin parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# get full run
df.res <- do.call(rbind,
mclapply(seq(nrow(dfs)),
function(i){
s.vector <- c("glial" = dfs$glial[i], "neuron" = dfs$neuron[i])
ypb <- ypb_from_sce(sce, assay.name,
celltype.variable, S = s.vector.ypb) %>% as.matrix()
suppressMessages(
lute(sce, y = ypb, celltype.variable = celltype.variable, s = s.vector,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
)
}))
colnames(df.res) <- paste0(colnames(df.res), ".pred.nnls")
df.res <- cbind(df.res, dfs)
df.true <- sce[[celltype.variable]] %>% table() %>% prop.table() %>% as.data.frame()
rownames(df.true) <- df.true[,1]
df.res$glial.true <- df.true["glial",2]
df.res$neuron.true <- df.true["neuron",2]
df.res$bias.glial.true.pred <- df.res$glial.true - df.res$glial.pred.nnls
df.res$bias.neuron.true.pred <- df.res$neuron.true - df.res$neuron.pred.nnls
# make sequential again (i.e. cancels parallel)
registerDoSEQ()
return(df.res)
}
# get s vector series
dfs <- dfs.series()
library(snow)
#------
# setup
#------
# helper functions
# get series of s cell size factors
dfs.series <- function(
s.glial.series = seq(1, 20, 1)){
library(dplyr)
s.neuron.series <- rev(s.glial.series)
dfs.series <- do.call(rbind,
lapply(
seq(
length(
s.glial.series)), function(index1){
do.call(
rbind,
lapply(
seq(
length(
s.neuron.series)), function(index2){
c("glial" = s.glial.series[index1], "neuron" = s.neuron.series[index2])
}
)
)
}
)
) %>%
as.data.frame()
return(dfs.series)
}
dfs.series <- function(
s.glial.series = seq(1, 20, 1)){
library(dplyr)
s.neuron.series <- rev(s.glial.series)
dfs.series <- do.call(rbind,
lapply(
seq(
length(
s.glial.series)), function(index1){
do.call(
rbind,
lapply(
seq(
length(
s.neuron.series)), function(index2){
c("glial" = s.glial.series[index1],
"neuron" = s.neuron.series[index2])
}
)
)
}
)
) %>%
as.data.frame()
return(dfs.series)
}
parallelized_bias_calculations <- function(sce,
dfs,
celltype.variable = "k2",
assay.name = "counts",
s.vector.ypb = c("glial" = 3, "neuron" = 10)){
#
#
#
#
#
# begin parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# get full run
df.res <- do.call(rbind,
mclapply(seq(nrow(dfs)),
function(i){
s.vector <- c("glial" = dfs$glial[i], "neuron" = dfs$neuron[i])
ypb <- ypb_from_sce(sce, assay.name,
celltype.variable, S = s.vector.ypb) %>% as.matrix()
suppressMessages(
lute(sce, y = ypb, celltype.variable = celltype.variable, s = s.vector,
typemarker.algorithm = NULL)$deconvolution.results@predictions.table
)
}))
colnames(df.res) <- paste0(colnames(df.res), ".pred.nnls")
df.res <- cbind(df.res, dfs)
df.true <- sce[[celltype.variable]] %>% table() %>% prop.table() %>% as.data.frame()
rownames(df.true) <- df.true[,1]
df.res$glial.true <- df.true["glial",2]
df.res$neuron.true <- df.true["neuron",2]
df.res$bias.glial.true.pred <- df.res$glial.true - df.res$glial.pred.nnls
df.res$bias.neuron.true.pred <- df.res$neuron.true - df.res$neuron.pred.nnls
# make sequential again (i.e. cancels parallel)
registerDoSEQ()
return(df.res)
}
# get s vector series
dfs <- dfs.series()
# load data
sce.markers.list.path <- file.path(
"deconvo_method-paper",
"outputs",
"01_prepare-datasets",
"list-scef_markers-k2-k3-k4_ro1-dlpfc.rda"
)
list.sce.markers <- get(
load(
sce.markers.list.path
)
)
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
script.path <- file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1",
"01_000_parallel-runs-allsamples_cohort1.R")
source(script.path)
script.path
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
script.path <- file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1",
"01_000_parallel-runs-allsamples_cohort1.R")
#source(script.path)
list.files()
# * shuffle the signature references
# * shuffle the rnascope cell sizes
# * shuffle the rnascope cell proportions
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
script.path <- file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1",
"01_000_parallel-runs-allsamples_cohort1.R")
#source(script.path)
list.files(file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1"))
# * shuffle the signature references
# * shuffle the rnascope cell sizes
# * shuffle the rnascope cell proportions
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
script.path <- file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1",
"01_000_parallel-runs-allsamples_cohort1.R")
#source(script.path)
list.files(file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1"))
# * shuffle the signature references
# * shuffle the rnascope cell sizes
# * shuffle the rnascope cell proportions
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
setwd("..")
script.path <- file.path("code",
"11_soptimize-pbfit-bias_dlpfc-cohort1",
"01_000_parallel-runs-allsamples_cohort1.R")
source(script.path)
